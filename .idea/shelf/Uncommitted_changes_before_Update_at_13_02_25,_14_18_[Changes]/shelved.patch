Index: src/main/java/org/example/togetjob/model/dao/concreteobjects/DataBaseStudentDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>    package org.example.togetjob.model.dao.concreteobjects;\n\n    import org.example.togetjob.connection.DatabaseConfig;\n    import org.example.togetjob.exceptions.DatabaseException;\n    import org.example.togetjob.model.dao.abstractobjects.JobApplicationDao;\n    import org.example.togetjob.model.dao.abstractobjects.StudentDao;\n    import org.example.togetjob.model.dao.abstractobjects.UserDao;\n    import org.example.togetjob.model.entity.JobApplication;\n    import org.example.togetjob.model.entity.Student;\n    import org.example.togetjob.model.entity.User;\n\n    import java.sql.*;\n    import java.sql.Date;\n    import java.time.LocalDate;\n    import java.util.*;\n\n    public class DataBaseStudentDao implements StudentDao {\n\n        private static final String INSERT_STUDENT_SQL =\n                \"INSERT INTO STUDENT (Username, DateOfBirth, PhoneNumber, Degrees, CourseAttended, Certifications, WorkExperience, Skills, Availability) \"\n                        + \"VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n\n        private static final String SELECT_STUDENT_SQL =\n                \"SELECT DateOfBirth, PhoneNumber, Degrees, CourseAttended, Certifications, WorkExperience, Skills, Availability \"\n                        + \"FROM STUDENT WHERE Username = ?\";\n\n        private static final String SELECT_ALL_STUDENTS_SQL =\n                \"SELECT Username, DateOfBirth, PhoneNumber, Degrees, CourseAttended, Certifications, WorkExperience, Skills, Availability \"\n                        + \"FROM STUDENT\";\n\n        private static final String UPDATE_STUDENT_SQL =\n                \"UPDATE STUDENT SET DateOfBirth = ?, PhoneNumber = ?, Degrees = ?, CourseAttended = ?, Certifications = ?, \"\n                        + \"WorkExperience = ?, Skills = ?, Availability = ? WHERE Username = ?\";\n\n        private static final String DELETE_STUDENT_SQL =\n                \"DELETE FROM STUDENT WHERE Username = ?\";\n\n        private static final String CHECK_STUDENT_EXISTS_SQL =\n                \"SELECT COUNT(*) FROM STUDENT WHERE Username = ?\";\n\n        private static final String COLUMN_DATE_OF_BIRTH = \"DateOfBirth\";\n        private static final String COLUMN_PHONE_NUMBER = \"PhoneNumber\";\n        private static final String COLUMN_DEGREES = \"Degrees\";\n        private static final String COLUMN_COURSE_ATTENDED = \"CourseAttended\";\n        private static final String COLUMN_CERTIFICATIONS = \"Certifications\";\n        private static final String COLUMN_WORK_EXPERIENCE = \"WorkExperience\";\n        private static final String COLUMN_SKILLS = \"Skills\";\n        private static final String COLUMN_AVAILABILITY = \"Availability\";\n\n        private final UserDao userDao;\n        private JobApplicationDao jobApplicationDao;\n\n        public DataBaseStudentDao(UserDao userDao, JobApplicationDao jobApplicationDao) {\n            this.userDao = userDao;\n            this.jobApplicationDao = jobApplicationDao;\n        }\n\n        public void setJobApplicationDao(DataBaseJobApplicationDao jobApplicationDao) {\n            this.jobApplicationDao = jobApplicationDao;\n        }\n\n\n        @Override\n        public void saveStudent(Student student) {\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(INSERT_STUDENT_SQL)) {\n\n                stmt.setString(1, student.obtainUsername());\n                stmt.setDate(2, Date.valueOf(student.obtainDateOfBirth()));\n                stmt.setString(3, student.obtainPhoneNumber());\n                stmt.setString(4, String.join(\",\", student.obtainDegrees()));\n                stmt.setString(5, String.join(\",\", student.obtainCoursesAttended()));\n                stmt.setString(6, String.join(\",\", student.obtainCertifications()));\n                stmt.setString(7, String.join(\",\", student.obtainWorkExperiences()));\n                stmt.setString(8, String.join(\",\", student.obtainSkills()));\n                stmt.setString(9, student.obtainAvailability());\n\n                stmt.executeUpdate();\n            } catch (SQLException e) {\n                throw new DatabaseException(\"Error save student\");\n            }\n        }\n\n        @Override\n        public Optional<Student> getStudent(String username) {\n            Optional<User> userOptional = userDao.getUser(username);\n\n            if (userOptional.isEmpty()) {\n                return Optional.empty();\n            }\n\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(SELECT_STUDENT_SQL)) {\n\n                stmt.setString(1, username);\n                ResultSet rs = stmt.executeQuery();\n\n                if (rs.next()) {\n                    User user = userOptional.get();\n\n                    LocalDate dateOfBirth = rs.getDate(COLUMN_DATE_OF_BIRTH).toLocalDate();\n                    String phoneNumber = rs.getString(COLUMN_PHONE_NUMBER);\n                    String degreesStr = rs.getString(COLUMN_DEGREES);\n                    List<String> degrees = degreesStr != null ? List.of(degreesStr.split(\",\")) : Collections.emptyList();\n\n                    String courseAttendedStr = rs.getString(COLUMN_COURSE_ATTENDED);\n                    List<String> courseAttended = courseAttendedStr != null ? List.of(courseAttendedStr.split(\",\")) : Collections.emptyList();\n\n                    String certificationsStr = rs.getString(COLUMN_CERTIFICATIONS);\n                    List<String> certifications = certificationsStr != null ? List.of(certificationsStr.split(\",\")) : Collections.emptyList();\n\n                    String workExperienceStr = rs.getString(COLUMN_WORK_EXPERIENCE);\n                    List<String> workExperiences = workExperienceStr != null ? List.of(workExperienceStr.split(\",\")) : Collections.emptyList();\n\n                    String skillsStr = rs.getString(COLUMN_SKILLS);\n                    List<String> skills = skillsStr != null ? List.of(skillsStr.split(\",\")) : Collections.emptyList();\n\n                    String availability = rs.getString(COLUMN_AVAILABILITY);\n\n                    Student student = new Student(\n                            user.obtainName(),            // name\n                            user.obtainSurname(),         // surname\n                            user.obtainUsername(),        // username\n                            user.obtainEmailAddress(),    // emailAddress\n                            user.obtainPassword(),        // password\n                            user.obtainRole(),            // role\n                            dateOfBirth                // dateOfBirth\n                    );\n\n                    student.setPhoneNumber(phoneNumber);             // phoneNumber\n                    student.setDegrees(degrees);                     // degrees\n                    student.setCoursesAttended(courseAttended);      // courses attended\n                    student.setCertifications(certifications);       // certifications\n                    student.setWorkExperiences(workExperiences);     // work experiences\n                    student.setSkills(skills);                       // skills\n                    student.setAvailability(availability);           // availability\n                    student.setJobApplications(new ArrayList<>());     // jobApplications\n\n                    if (jobApplicationDao != null) {\n                        List<JobApplication> jobApplications = jobApplicationDao.getAllJobApplications(student);\n                        student.setJobApplications(jobApplications);\n                    }\n\n                    return Optional.of(student);\n                }\n            } catch (SQLException e) {\n                throw new DatabaseException(\"Error obtaining student for username: \" + username + \", SQL error: \" + e.getMessage(), e);\n            }\n            return Optional.empty();\n        }\n\n\n        @Override\n        public List<Student> getAllStudents() {\n            List<Student> students = new ArrayList<>();\n            List<User> users = userDao.getAllUsers();\n            Map<String, Student> studentMap = getStudentsDetails(users);\n\n            for (Student student : studentMap.values()) {\n                List<JobApplication> jobApplications = jobApplicationDao.getAllJobApplications(student);\n                student.setJobApplications(jobApplications);\n                students.add(student);\n            }\n\n            return students;\n        }\n\n        private Map<String, Student> getStudentsDetails(List<User> users) {\n            Map<String, Student> studentMap = new HashMap<>();\n\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(SELECT_ALL_STUDENTS_SQL);\n                 ResultSet rs = stmt.executeQuery()) {\n\n                while (rs.next()) {\n                    String username = rs.getString(\"Username\");\n\n                    User user = findUserByUsername(users, username);\n                    if (user == null) {\n                        continue;\n                    }\n\n                    LocalDate dateOfBirth = rs.getDate(COLUMN_DATE_OF_BIRTH) != null ? rs.getDate(COLUMN_DATE_OF_BIRTH).toLocalDate() : null;\n                    String phoneNumber = rs.getString(COLUMN_PHONE_NUMBER);\n\n                    List<String> degrees = convertCsvToList(rs.getString(COLUMN_DEGREES));\n                    List<String> courseAttended = convertCsvToList(rs.getString(COLUMN_COURSE_ATTENDED));\n                    List<String> certifications = convertCsvToList(rs.getString(COLUMN_CERTIFICATIONS));\n                    List<String> workExperiences = convertCsvToList(rs.getString(COLUMN_WORK_EXPERIENCE));\n                    List<String> skills = convertCsvToList(rs.getString(COLUMN_SKILLS));\n                    String availability = rs.getString(COLUMN_AVAILABILITY);\n\n\n                    Student student = new Student(\n                            user.obtainName(),             // name\n                            user.obtainSurname(),          // surname\n                            user.obtainUsername(),         // username\n                            user.obtainEmailAddress(),     // emailAddress\n                            user.obtainPassword(),         // password\n                            user.obtainRole(),             // role\n                            dateOfBirth                 // dateOfBirth\n                    );\n\n                    student.setPhoneNumber(phoneNumber);             // phoneNumber\n                    student.setDegrees(degrees);                     // degrees\n                    student.setCoursesAttended(courseAttended);      // courses attended\n                    student.setCertifications(certifications);       // certifications\n                    student.setWorkExperiences(workExperiences);     // work experiences\n                    student.setSkills(skills);                       // skills\n                    student.setAvailability(availability);           // availability\n                    student.setJobApplications(null);                 // jobApplications, null\n                    studentMap.put(username, student);\n                }\n            } catch (SQLException e) {\n                throw new DatabaseException(\"Error obtaining student details\", e);\n            }\n\n            return studentMap;\n        }\n\n        private User findUserByUsername(List<User> users, String username) {\n            for (User user : users) {\n                if (user.obtainUsername().equals(username)) {\n                    return user;\n                }\n            }\n            return null;\n        }\n\n        private List<String> convertCsvToList(String csvData) {\n            if (csvData == null || csvData.isEmpty()) {\n                return new ArrayList<>();\n            }\n            return List.of(csvData.split(\",\"));\n        }\n\n        @Override\n        public boolean updateStudent(Student student) {\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(UPDATE_STUDENT_SQL)) {\n\n                stmt.setDate(1, Date.valueOf(student.obtainDateOfBirth()));\n                stmt.setString(2, student.obtainPhoneNumber());\n                stmt.setString(3, String.join(\",\", student.obtainDegrees()));\n                stmt.setString(4, String.join(\",\", student.obtainCoursesAttended()));\n                stmt.setString(5, String.join(\",\", student.obtainCertifications()));\n                stmt.setString(6, String.join(\",\", student.obtainWorkExperiences()));\n                stmt.setString(7, String.join(\",\", student.obtainSkills()));\n                stmt.setString(8, student.obtainAvailability());\n                stmt.setString(9, student.obtainUsername());\n\n                int rowsUpdated = stmt.executeUpdate();\n                return rowsUpdated > 0;\n            } catch (SQLException e) {\n                throw new DatabaseException(\"Error updating student\");\n            }\n        }\n\n        @Override\n        public boolean deleteStudent(String username) {\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(DELETE_STUDENT_SQL)) {\n\n                stmt.setString(1, username);\n                int rowsDeleted = stmt.executeUpdate();\n                return rowsDeleted > 0;\n            } catch (SQLException e) {\n                throw new DatabaseException(\"Error deleting student\");\n            }\n        }\n\n        @Override\n        public boolean studentExists(String username) {\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(CHECK_STUDENT_EXISTS_SQL)) {\n\n                stmt.setString(1, username);\n                ResultSet rs = stmt.executeQuery();\n                return rs.next() && rs.getInt(1) > 0;\n            } catch (SQLException e) {\n                throw new DatabaseException(\"Error Student not found\");\n            }\n        }\n\n    }\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/model/dao/concreteobjects/DataBaseStudentDao.java b/src/main/java/org/example/togetjob/model/dao/concreteobjects/DataBaseStudentDao.java
--- a/src/main/java/org/example/togetjob/model/dao/concreteobjects/DataBaseStudentDao.java	(revision fe6e287ffe6104328c1e6d2c33f77e6ea0d421cd)
+++ b/src/main/java/org/example/togetjob/model/dao/concreteobjects/DataBaseStudentDao.java	(date 1739452730207)
@@ -165,7 +165,7 @@
             return students;
         }
 
-        private Map<String, Student> getStudentsDetails(List<User> users) {
+        private Map<String, Student> getStudentsDetails(List<User> users) throws DatabaseException{
             Map<String, Student> studentMap = new HashMap<>();
 
             try (Connection conn = DatabaseConfig.getInstance().getConnection();
Index: src/main/java/org/example/togetjob/model/dao/concreteobjects/DataBaseUserDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.model.dao.concreteobjects;\n\nimport org.example.togetjob.connection.DatabaseConfig;\nimport org.example.togetjob.exceptions.DatabaseException;\nimport org.example.togetjob.model.dao.abstractobjects.UserDao;\nimport org.example.togetjob.model.entity.Recruiter;\nimport org.example.togetjob.model.entity.Role;\nimport org.example.togetjob.model.entity.Student;\nimport org.example.togetjob.model.entity.User;\n\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class DataBaseUserDao implements UserDao {\n\n    private static final String SQL_INSERT_USER = \"INSERT INTO USER (Username, Name, Surname, EmailAddress, Password, Role) VALUES (?, ?, ?, ?, ?, ?)\";\n    private static final String SQL_SELECT_USER = \"SELECT Username, Name, Surname, EmailAddress, Password, Role FROM USER WHERE Username = ?\";\n    private static final String SQL_SELECT_ALL_USERS = \"SELECT Username, Name, Surname, EmailAddress, Password, Role FROM USER\";\n    private static final String SQL_UPDATE_USER = \"UPDATE USER SET Name = ?, Surname = ?, EmailAddress = ?, Password = ?, Role = ? WHERE Username = ?\";\n    private static final String SQL_DELETE_USER = \"DELETE FROM USER WHERE Username = ?\";\n    private static final String SQL_CHECK_USER_EXISTS = \"SELECT COUNT(*) FROM USER WHERE Username = ?\";\n\n    @Override\n    public boolean saveUser(User user) throws DatabaseException {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SQL_INSERT_USER)) {\n\n            stmt.setString(1, user.obtainUsername());\n            stmt.setString(2, user.obtainName());\n            stmt.setString(3, user.obtainSurname());\n            stmt.setString(4, user.obtainEmailAddress());\n            stmt.setString(5, user.obtainPassword());\n            stmt.setString(6, user.obtainRole().toString());\n\n            return stmt.executeUpdate() > 0;\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error saving user to the database\");\n        }\n    }\n\n    @Override\n    public Optional<User> getUser(String username) throws DatabaseException {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SQL_SELECT_USER)) {\n\n            stmt.setString(1, username);\n            ResultSet rs = stmt.executeQuery();\n\n            if (rs.next()) {\n                String name = rs.getString(\"Name\");\n                String surname = rs.getString(\"Surname\");\n                String emailAddress = rs.getString(\"EmailAddress\");\n                String password = rs.getString(\"Password\");\n                String roleString = rs.getString(\"Role\");\n                Role role = mapRole(roleString);\n\n                if (role == null) {\n                    throw new DatabaseException(\"Invalid role value in the database: \" + roleString);\n                }\n\n                User user = createUserByRole(name, surname, username, emailAddress, password, role);\n\n                return Optional.of(user);\n            }\n\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error retrieving user from the database\");\n        }\n        return Optional.empty();\n    }\n\n    private Role mapRole(String roleString) {\n        if (\"Student\".equalsIgnoreCase(roleString)) {\n            return Role.STUDENT;\n        } else if (\"Recruiter\".equalsIgnoreCase(roleString)) {\n            return Role.RECRUITER;\n        } else {\n            return null;\n        }\n    }\n\n    private User createUserByRole(String name, String surname, String username, String emailAddress, String password, Role role) {\n        return switch (role) {\n            case STUDENT -> new Student(name, surname, username, emailAddress, password, role);\n            case RECRUITER -> new Recruiter(name, surname, username, emailAddress, password, role);\n        };\n    }\n\n    @Override\n    public List<User> getAllUsers() throws DatabaseException {\n        List<User> users = new ArrayList<>();\n\n\n        //Connection\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SQL_SELECT_ALL_USERS);\n             ResultSet rs = stmt.executeQuery()) {\n\n            while (rs.next()) { //loop\n                String username = rs.getString(\"Username\");\n                String name = rs.getString(\"Name\");\n                String surname = rs.getString(\"Surname\");\n                String emailAddress = rs.getString(\"EmailAddress\");\n                String password = rs.getString(\"Password\");\n                Role role = Role.valueOf(rs.getString(\"Role\").toUpperCase());\n\n                User user;\n                if (role.equals(Role.STUDENT)) {\n                    user = new Student(name, surname, username, emailAddress, password, role);\n                } else {\n                    user = new Recruiter(name, surname, username, emailAddress, password, role);\n                }\n\n                users.add(user);\n            }\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error retrieving all users from the database\");\n        }\n\n        return users;\n    }\n\n    @Override\n    public boolean updateUser(User user) throws DatabaseException {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SQL_UPDATE_USER)) {\n\n            stmt.setString(1, user.obtainName());\n            stmt.setString(2, user.obtainSurname());\n            stmt.setString(3, user.obtainEmailAddress());\n            stmt.setString(4, user.obtainPassword());\n            stmt.setString(5, user.obtainRole().name());\n            stmt.setString(6, user.obtainUsername());\n\n            int rowsUpdated = stmt.executeUpdate();\n            return rowsUpdated > 0;\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error updating user in the database\");\n        }\n    }\n\n    @Override\n    public boolean deleteUser(String username) throws DatabaseException {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SQL_DELETE_USER)) {\n\n            stmt.setString(1, username);\n\n            int rowsDeleted = stmt.executeUpdate();\n            return rowsDeleted > 0;\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error deleting user from the database\");\n        }\n    }\n\n    @Override\n    public boolean userExists(String username) throws DatabaseException {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SQL_CHECK_USER_EXISTS)) {\n\n            stmt.setString(1, username);\n\n            try (ResultSet rs = stmt.executeQuery()) {\n                if (rs.next()) {\n                    int count = rs.getInt(1);\n                    return count > 0;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error checking if user exists in the database\");\n        }\n\n        return false;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/model/dao/concreteobjects/DataBaseUserDao.java b/src/main/java/org/example/togetjob/model/dao/concreteobjects/DataBaseUserDao.java
--- a/src/main/java/org/example/togetjob/model/dao/concreteobjects/DataBaseUserDao.java	(revision fe6e287ffe6104328c1e6d2c33f77e6ea0d421cd)
+++ b/src/main/java/org/example/togetjob/model/dao/concreteobjects/DataBaseUserDao.java	(date 1739452730213)
@@ -36,7 +36,7 @@
 
             return stmt.executeUpdate() > 0;
         } catch (SQLException e) {
-            throw new DatabaseException("Error saving user to the database");
+            throw new DatabaseException("Error saving user to the database , try again later");
         }
     }
 
Index: src/main/java/org/example/togetjob/exceptions/InterviewSchedulingNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/exceptions/InterviewSchedulingNotFoundException.java b/src/main/java/org/example/togetjob/exceptions/InterviewSchedulingNotFoundException.java
new file mode 100644
--- /dev/null	(date 1739440696002)
+++ b/src/main/java/org/example/togetjob/exceptions/InterviewSchedulingNotFoundException.java	(date 1739440696002)
@@ -0,0 +1,7 @@
+package org.example.togetjob.exceptions;
+
+public class InterviewSchedulingNotFoundException extends RuntimeException {
+    public InterviewSchedulingNotFoundException(String message) {
+        super(message);
+    }
+}
Index: src/main/java/org/example/togetjob/pattern/adapter/ContactAJobCandidateAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.pattern.adapter;\n\nimport org.example.togetjob.bean.*;\nimport org.example.togetjob.controller.recruiter.JobAnnouncementService;\nimport org.example.togetjob.controller.student.SendAJobApplication;\nimport org.example.togetjob.exceptions.ConfigException;\nimport org.example.togetjob.exceptions.NotificationException;\nimport org.example.togetjob.model.dao.abstractobjects.InterviewSchedulingDao;\nimport org.example.togetjob.model.dao.abstractobjects.JobAnnouncementDao;\nimport org.example.togetjob.model.dao.abstractobjects.JobApplicationDao;\nimport org.example.togetjob.model.dao.abstractobjects.StudentDao;\nimport org.example.togetjob.model.entity.*;\nimport org.example.togetjob.model.factory.InterviewSchedulingFactory;\nimport org.example.togetjob.model.factory.NotificationFactory;\nimport org.example.togetjob.pattern.observer.StudentObserverStudent;\nimport org.example.togetjob.pattern.subject.SchedulingInterviewCollectionSubjectRecruiter;\nimport org.example.togetjob.session.SessionManager;\n\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class ContactAJobCandidateAdapter implements ContactAJobCandidateController{\n\n    public static final String DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm\";\n    public static final String JOB_ANNOUNCEMENT_NOT_FOUND_ERROR = \"Error: Job Announcement not found.\";\n    public static final String STUDENT_NOT_FOUND_ERROR = \"Error: Student not found.\";\n\n    private final SendAJobApplication adapt;\n    private final StudentDao studentDao;\n    private final JobAnnouncementDao jobAnnouncementDao;\n    private final JobApplicationDao jobApplicationDao;\n    private final InterviewSchedulingDao interviewSchedulingDao;\n    private final SchedulingInterviewCollectionSubjectRecruiter schedulingInterviewCollectionSubjectRecruiter;\n\n    public ContactAJobCandidateAdapter(SendAJobApplication adapt, StudentDao studentDao, JobAnnouncementDao jobAnnouncementDao, JobApplicationDao jobApplicationDao, InterviewSchedulingDao interviewSchedulingDao, SchedulingInterviewCollectionSubjectRecruiter schedulingInterviewCollectionSubjectRecruiter) {\n        this.adapt = adapt;\n        this.studentDao = studentDao;\n        this.jobAnnouncementDao = jobAnnouncementDao;\n        this.jobApplicationDao = jobApplicationDao;\n        this.interviewSchedulingDao = interviewSchedulingDao;\n        this.schedulingInterviewCollectionSubjectRecruiter = schedulingInterviewCollectionSubjectRecruiter;\n    }\n\n    public List<StudentInfoBean> showFilteredCandidates(StudentInfoSearchBean studentInfoSearchBean, JobAnnouncementBean jobAnnouncementBean) {\n        // Tutte le candidature\n        List<JobApplicationBean> jobApplications = adapt.getJobApplicationsForRecruiter(jobAnnouncementBean);\n\n        List<JobApplicationBean> acceptedApplications = jobApplications.stream()\n                .filter(application -> Status.ACCEPTED.equals(application.getStatus()))\n                .toList();\n\n        Set<String> acceptedStudentUsernames = acceptedApplications.stream()\n                .map(JobApplicationBean::getStudentUsername)\n                .collect(Collectors.toSet());\n\n        List<Student> filteredStudents = studentDao.getAllStudents()\n                .stream()\n                .filter(student -> acceptedStudentUsernames.contains(student.obtainUsername()))\n                .filter(student -> filterByDegrees(student, studentInfoSearchBean.getDegrees()))\n                .filter(student -> filterByCourses(student, studentInfoSearchBean.getCoursesAttended()))\n                .filter(student -> filterByCertifications(student, studentInfoSearchBean.getCertifications()))\n                .filter(student -> filterByWorkExperiences(student, studentInfoSearchBean.getWorkExperiences()))\n                .filter(student -> filterBySkills(student, studentInfoSearchBean.getSkills()))\n                .filter(student -> filterByAvailability(student, studentInfoSearchBean.getAvailability()))\n                .toList();\n\n        return filteredStudents.stream()\n                .map(this::convertToStudentInfoBean)\n                .toList();\n    }\n\n    private boolean filterByDegrees(Student student, List<String> requiredDegrees) {\n        if (requiredDegrees == null || requiredDegrees.isEmpty()) {\n            return true;\n        }\n        if (student.obtainDegrees() == null || student.obtainDegrees().isEmpty()) {\n            return true;\n        }\n        return student.obtainDegrees().stream()\n                .anyMatch(degree -> requiredDegrees.stream()\n                        .anyMatch(reqDegree -> degree.toLowerCase().contains(reqDegree.toLowerCase())));\n    }\n\n    private boolean filterByCourses(Student student, List<String> requiredCourses) {\n        if (requiredCourses == null || requiredCourses.isEmpty()) {\n            return true;\n        }\n        if (student.obtainCoursesAttended() == null || student.obtainCoursesAttended().isEmpty()) {\n            return true;\n        }\n        return student.obtainCoursesAttended().stream()\n                .anyMatch(course -> requiredCourses.stream()\n                        .anyMatch(reqCourse -> course.toLowerCase().contains(reqCourse.toLowerCase())));\n    }\n\n    private boolean filterByCertifications(Student student, List<String> requiredCertifications) {\n        if (requiredCertifications == null || requiredCertifications.isEmpty()) {\n            return true;\n        }\n        if (student.obtainCertifications() == null || student.obtainCertifications().isEmpty()) {\n            return true;\n        }\n        return student.obtainCertifications().stream()\n                .anyMatch(cert -> requiredCertifications.stream()\n                        .anyMatch(reqCert -> cert.toLowerCase().contains(reqCert.toLowerCase())));\n    }\n\n    private boolean filterByWorkExperiences(Student student, List<String> requiredWorkExperiences) {\n        if (requiredWorkExperiences == null || requiredWorkExperiences.isEmpty()) {\n            return true;\n        }\n        if (student.obtainWorkExperiences() == null || student.obtainWorkExperiences().isEmpty()) {\n            return true;\n        }\n        return student.obtainWorkExperiences().stream()\n                .anyMatch(workExp -> requiredWorkExperiences.stream()\n                        .anyMatch(reqWorkExp -> workExp.toLowerCase().contains(reqWorkExp.toLowerCase())));\n    }\n\n    private boolean filterBySkills(Student student, List<String> requiredSkills) {\n        if (requiredSkills == null || requiredSkills.isEmpty()) {\n            return true;\n        }\n        if (student.obtainSkills() == null || student.obtainSkills().isEmpty()) {\n            return true;\n        }\n        return student.obtainSkills().stream()\n                .anyMatch(skill -> requiredSkills.stream()\n                        .anyMatch(reqSkill -> skill.toLowerCase().contains(reqSkill.toLowerCase())));\n    }\n\n    private boolean filterByAvailability(Student student, String requiredAvailability) {\n        if (requiredAvailability == null || requiredAvailability.isEmpty()) {\n            return true;\n        }\n        if (student.obtainAvailability() == null || student.obtainAvailability().isEmpty()) {\n            return true;\n        }\n        return student.obtainAvailability().toLowerCase().contains(requiredAvailability.toLowerCase());\n    }\n\n\n    @Override\n    public InterviewSchedulingBean showInterviewSchedulingForm(StudentInfoBean studentInfoBean, JobAnnouncementBean jobAnnouncementBean) {\n\n        InterviewSchedulingBean form = new InterviewSchedulingBean();\n\n        form.setStudentUsername(studentInfoBean.getUsername());\n        form.setJobTitle(jobAnnouncementBean.getJobTitle());\n        form.setCompanyName(jobAnnouncementBean.getCompanyName());\n\n        form.setInterviewDateTime(\"\");\n        form.setLocation(\"\");\n\n        return form;\n    }\n\n\n    @Override\n    public boolean sendInterviewInvitation(InterviewSchedulingBean interviewSchedulingBean) {\n        if (isDateFuture(interviewSchedulingBean.getInterviewDateTime())) {\n            throw new IllegalArgumentException(\"Error: The date must be in the future.\");\n        }\n\n        Recruiter recruiter = SessionManager.getInstance().getRecruiterFromSession();\n        Student student = studentDao.getStudent(interviewSchedulingBean.getStudentUsername())\n                .orElseThrow(() -> new IllegalArgumentException(STUDENT_NOT_FOUND_ERROR));\n        JobAnnouncement jobAnnouncement = jobAnnouncementDao.getJobAnnouncement(interviewSchedulingBean.getJobTitle(), recruiter)\n                .orElseThrow(() -> new IllegalArgumentException(JOB_ANNOUNCEMENT_NOT_FOUND_ERROR));\n        if (jobApplicationDao.getJobApplication(student, jobAnnouncement).isEmpty()) {\n            throw new IllegalArgumentException(\"Error: Job application not found.\");\n        }\n        if (interviewSchedulingDao.getInterviewScheduling(student, jobAnnouncement).isPresent()) {\n            throw new IllegalArgumentException(\"Error: Interview Scheduling already exists.\");\n        }\n\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATE_FORMAT);\n        LocalDateTime interviewDateTime = LocalDateTime.parse(interviewSchedulingBean.getInterviewDateTime(), formatter);\n        InterviewScheduling interviewScheduling = InterviewSchedulingFactory.createInterviewScheduling(\n                interviewDateTime,\n                interviewSchedulingBean.getLocation(), student,\n                jobAnnouncement\n        );\n        interviewSchedulingDao.saveInterviewScheduling(interviewScheduling);\n        try {\n            schedulingInterviewCollectionSubjectRecruiter.attach(new StudentObserverStudent(student, NotificationFactory.createNotification(\"You have an interview scheduling!\")));\n        } catch (ConfigException e) {\n            throw new RuntimeException(e);\n        }\n        try {\n            sendNotification(interviewScheduling);\n        } catch (NotificationException e) {\n            return false;\n        }\n        return true;\n    }\n\n\n    private void sendNotification(InterviewScheduling interviewScheduling) throws NotificationException {\n\n        try{\n            schedulingInterviewCollectionSubjectRecruiter.addInterviewScheduling(interviewScheduling);\n\n        } catch (NotificationException e) {\n            throw new NotificationException(\"Error during the configuration\", e);\n        }\n\n    }\n\n    @Override\n    public List<JobAnnouncementBean> getJobAnnouncementsByRecruiter() {\n        JobAnnouncementService jobAnnouncementService = new JobAnnouncementService(jobAnnouncementDao);\n\n        List<JobAnnouncementBean> jobAnnouncements = jobAnnouncementService.getJobAnnouncementsForCurrentRecruiter();\n\n        return Objects.requireNonNullElse(jobAnnouncements, Collections.emptyList());\n    }\n\n    @Override\n    public List<InterviewSchedulingStudentInfoBean> getAllInterviewSchedulingsForStudent() {\n\n        Student student = SessionManager.getInstance().getStudentFromSession();\n\n        if (student == null) {\n            throw new IllegalStateException(\"Student not found in session.\");\n        }\n\n        List<InterviewScheduling> interviewSchedulings = interviewSchedulingDao.getAllInterviewScheduling(student);\n\n        return interviewSchedulings.stream()\n                .map(interviewScheduling -> {\n                    InterviewSchedulingStudentInfoBean bean = new InterviewSchedulingStudentInfoBean();\n                    bean.setSubject(interviewScheduling.obtainSubject());\n                    bean.setGreeting(interviewScheduling.obtainGreeting());\n                    bean.setIntroduction(interviewScheduling.obtainIntroduction());\n                    bean.setJobTitle(interviewScheduling.getJobAnnouncement().obtainJobTitle());\n                    bean.setCompanyName(interviewScheduling.getJobAnnouncement().obtainCompanyName());\n                    bean.setInterviewDateTime(interviewScheduling.obtainInterviewDateTime().toString());\n                    bean.setLocation(interviewScheduling.obtainLocation());\n                    bean.setStudentUsername(interviewScheduling.getCandidate().obtainUsername());\n                    return bean;\n                })\n                .toList();\n    }\n\n    @Override\n    public List<InterviewSchedulingBean> getInterviewSchedules(JobAnnouncementBean jobAnnouncementBean) {\n\n        Recruiter recruiter = SessionManager.getInstance().getRecruiterFromSession();\n        JobAnnouncement jobAnnouncement = jobAnnouncementDao.getJobAnnouncement(jobAnnouncementBean.getJobTitle(), recruiter)\n                .orElseThrow(() -> new IllegalArgumentException(JOB_ANNOUNCEMENT_NOT_FOUND_ERROR));\n\n        List<InterviewScheduling> interviewSchedulings = interviewSchedulingDao.getAllInterviewScheduling(jobAnnouncement);\n\n        return interviewSchedulings.stream()\n                .map(interviewScheduling -> {\n                    InterviewSchedulingBean bean = new InterviewSchedulingBean();\n                    bean.setStudentUsername(interviewScheduling.getCandidate().obtainUsername());\n                    bean.setJobTitle(interviewScheduling.getJobAnnouncement().obtainJobTitle());\n                    bean.setCompanyName(interviewScheduling.getJobAnnouncement().obtainCompanyName());\n                    bean.setInterviewDateTime(interviewScheduling.obtainInterviewDateTime().toString());\n                    bean.setLocation(interviewScheduling.obtainLocation());\n                    return bean;\n                })\n                .toList();\n    }\n\n    @Override\n    public boolean modifyInterview(InterviewSchedulingBean interviewSchedulingBean) {\n\n        if (isDateFuture(interviewSchedulingBean.getInterviewDateTime())) {\n            throw new IllegalArgumentException(\"Error: The date must be in the future.\");\n        }\n\n\n        Recruiter recruiter = SessionManager.getInstance().getRecruiterFromSession();\n\n        Student student = studentDao.getStudent(interviewSchedulingBean.getStudentUsername())\n                .orElseThrow(() -> new IllegalArgumentException(STUDENT_NOT_FOUND_ERROR));\n        JobAnnouncement jobAnnouncement = jobAnnouncementDao.getJobAnnouncement(interviewSchedulingBean.getJobTitle(), recruiter)\n                .orElseThrow(() -> new IllegalArgumentException(JOB_ANNOUNCEMENT_NOT_FOUND_ERROR));\n\n        InterviewScheduling interviewScheduling = interviewSchedulingDao.getInterviewScheduling(student, jobAnnouncement)\n                .orElseThrow(() -> new IllegalArgumentException(\"Error: Interview not found.\"));\n\n\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATE_FORMAT);\n        LocalDateTime interviewDateTime = LocalDateTime.parse(interviewSchedulingBean.getInterviewDateTime(), formatter);\n        interviewScheduling.setInterviewDateTime(interviewDateTime);\n        interviewScheduling.setLocation(interviewSchedulingBean.getLocation());\n\n        interviewSchedulingDao.updateInterviewScheduling(interviewScheduling);\n\n        return true;\n    }\n\n    @Override\n    public boolean deleteInterview(InterviewSchedulingBean interviewSchedulingBean) {\n\n        Recruiter recruiter = SessionManager.getInstance().getRecruiterFromSession();\n        Student student = studentDao.getStudent(interviewSchedulingBean.getStudentUsername())\n                .orElseThrow(() -> new IllegalArgumentException(STUDENT_NOT_FOUND_ERROR));\n        JobAnnouncement jobAnnouncement = jobAnnouncementDao.getJobAnnouncement(interviewSchedulingBean.getJobTitle(), recruiter)\n                .orElseThrow(() -> new IllegalArgumentException(JOB_ANNOUNCEMENT_NOT_FOUND_ERROR));\n\n\n        InterviewScheduling interviewScheduling = interviewSchedulingDao.getInterviewScheduling(student, jobAnnouncement)\n                .orElseThrow(() -> new IllegalArgumentException(\"Error: Interview not found.\"));\n\n        interviewSchedulingDao.deleteInterviewScheduling(interviewScheduling);\n\n        return true;\n    }\n\n    private StudentInfoBean convertToStudentInfoBean(Student student) {\n\n        StudentInfoBean studentInfoBean = new StudentInfoBean();\n\n        studentInfoBean.setUsername(student.obtainUsername());\n        studentInfoBean.setDateOfBirth(student.obtainDateOfBirth() != null ? student.obtainDateOfBirth() : LocalDate.of(2000, 1, 1));\n        studentInfoBean.setPhoneNumber(student.obtainPhoneNumber() != null ? student.obtainPhoneNumber() : \"No Phone Provided\");\n        studentInfoBean.setDegrees(student.obtainDegrees() != null ? new ArrayList<>(student.obtainDegrees()) : new ArrayList<>());\n        studentInfoBean.setCoursesAttended(student.obtainCoursesAttended() != null ? new ArrayList<>(student.obtainCoursesAttended()) : new ArrayList<>());\n        studentInfoBean.setCertifications(student.obtainCertifications() != null ? new ArrayList<>(student.obtainCertifications()) : new ArrayList<>());\n        studentInfoBean.setWorkExperiences(student.obtainWorkExperiences() != null ? new ArrayList<>(student.obtainWorkExperiences()) : new ArrayList<>());\n        studentInfoBean.setSkills(student.obtainSkills() != null ? new ArrayList<>(student.obtainSkills()) : new ArrayList<>());\n        studentInfoBean.setAvailability(student.obtainAvailability() != null ? student.obtainAvailability() : \"Not Specified\");\n        return studentInfoBean;\n\n    }\n\n    public boolean isDateFuture(String dateStr) {\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATE_FORMAT);\n        LocalDateTime interviewDateTime = LocalDateTime.parse(dateStr, formatter);\n        return interviewDateTime.isAfter(LocalDateTime.now());\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/pattern/adapter/ContactAJobCandidateAdapter.java b/src/main/java/org/example/togetjob/pattern/adapter/ContactAJobCandidateAdapter.java
--- a/src/main/java/org/example/togetjob/pattern/adapter/ContactAJobCandidateAdapter.java	(revision fe6e287ffe6104328c1e6d2c33f77e6ea0d421cd)
+++ b/src/main/java/org/example/togetjob/pattern/adapter/ContactAJobCandidateAdapter.java	(date 1739444866442)
@@ -3,8 +3,7 @@
 import org.example.togetjob.bean.*;
 import org.example.togetjob.controller.recruiter.JobAnnouncementService;
 import org.example.togetjob.controller.student.SendAJobApplication;
-import org.example.togetjob.exceptions.ConfigException;
-import org.example.togetjob.exceptions.NotificationException;
+import org.example.togetjob.exceptions.*;
 import org.example.togetjob.model.dao.abstractobjects.InterviewSchedulingDao;
 import org.example.togetjob.model.dao.abstractobjects.JobAnnouncementDao;
 import org.example.togetjob.model.dao.abstractobjects.JobApplicationDao;
@@ -26,8 +25,8 @@
 public class ContactAJobCandidateAdapter implements ContactAJobCandidateController{
 
     public static final String DATE_FORMAT = "yyyy-MM-dd'T'HH:mm";
-    public static final String JOB_ANNOUNCEMENT_NOT_FOUND_ERROR = "Error: Job Announcement not found.";
-    public static final String STUDENT_NOT_FOUND_ERROR = "Error: Student not found.";
+    public static final String JOB_ANNOUNCEMENT_NOT_FOUND_ERROR = "Error:Job Announcement not found.";
+    public static final String STUDENT_NOT_FOUND_ERROR = "Error:Student not found.";
 
     private final SendAJobApplication adapt;
     private final StudentDao studentDao;
@@ -161,21 +160,21 @@
 
 
     @Override
-    public boolean sendInterviewInvitation(InterviewSchedulingBean interviewSchedulingBean) {
+    public boolean sendInterviewInvitation(InterviewSchedulingBean interviewSchedulingBean) throws DateNotValidException , StudentNotFoundException , JobAnnouncementNotFoundException , JobApplicationNotFoundException , InterviewSchedulingAlreadyExistsException , NotificationException {
         if (isDateFuture(interviewSchedulingBean.getInterviewDateTime())) {
-            throw new IllegalArgumentException("Error: The date must be in the future.");
+            throw new DateNotValidException("The date must be in the future.");
         }
 
         Recruiter recruiter = SessionManager.getInstance().getRecruiterFromSession();
         Student student = studentDao.getStudent(interviewSchedulingBean.getStudentUsername())
-                .orElseThrow(() -> new IllegalArgumentException(STUDENT_NOT_FOUND_ERROR));
+                .orElseThrow(() -> new StudentNotFoundException(STUDENT_NOT_FOUND_ERROR));
         JobAnnouncement jobAnnouncement = jobAnnouncementDao.getJobAnnouncement(interviewSchedulingBean.getJobTitle(), recruiter)
-                .orElseThrow(() -> new IllegalArgumentException(JOB_ANNOUNCEMENT_NOT_FOUND_ERROR));
+                .orElseThrow(() -> new JobAnnouncementNotFoundException(JOB_ANNOUNCEMENT_NOT_FOUND_ERROR));
         if (jobApplicationDao.getJobApplication(student, jobAnnouncement).isEmpty()) {
-            throw new IllegalArgumentException("Error: Job application not found.");
+            throw new JobApplicationNotFoundException("Error: Job application not found.");
         }
         if (interviewSchedulingDao.getInterviewScheduling(student, jobAnnouncement).isPresent()) {
-            throw new IllegalArgumentException("Error: Interview Scheduling already exists.");
+            throw new InterviewSchedulingAlreadyExistsException("Error: An Interview Scheduling already exists.");
         }
 
         DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATE_FORMAT);
@@ -194,7 +193,7 @@
         try {
             sendNotification(interviewScheduling);
         } catch (NotificationException e) {
-            return false;
+           throw new NotificationException(e.getMessage()) ;
         }
         return true;
     }
@@ -221,7 +220,7 @@
     }
 
     @Override
-    public List<InterviewSchedulingStudentInfoBean> getAllInterviewSchedulingsForStudent() {
+    public List<InterviewSchedulingStudentInfoBean> getAllInterviewSchedulingsForStudent() throws IllegalStateException {
 
         Student student = SessionManager.getInstance().getStudentFromSession();
 
@@ -248,11 +247,11 @@
     }
 
     @Override
-    public List<InterviewSchedulingBean> getInterviewSchedules(JobAnnouncementBean jobAnnouncementBean) {
+    public List<InterviewSchedulingBean> getInterviewSchedules(JobAnnouncementBean jobAnnouncementBean) throws JobAnnouncementNotFoundException {
 
         Recruiter recruiter = SessionManager.getInstance().getRecruiterFromSession();
         JobAnnouncement jobAnnouncement = jobAnnouncementDao.getJobAnnouncement(jobAnnouncementBean.getJobTitle(), recruiter)
-                .orElseThrow(() -> new IllegalArgumentException(JOB_ANNOUNCEMENT_NOT_FOUND_ERROR));
+                .orElseThrow(() -> new JobAnnouncementNotFoundException(JOB_ANNOUNCEMENT_NOT_FOUND_ERROR));
 
         List<InterviewScheduling> interviewSchedulings = interviewSchedulingDao.getAllInterviewScheduling(jobAnnouncement);
 
@@ -270,22 +269,21 @@
     }
 
     @Override
-    public boolean modifyInterview(InterviewSchedulingBean interviewSchedulingBean) {
+    public boolean modifyInterview(InterviewSchedulingBean interviewSchedulingBean) throws DateNotValidException , StudentNotFoundException , JobAnnouncementNotFoundException , InterviewSchedulingNotFoundException{
 
         if (isDateFuture(interviewSchedulingBean.getInterviewDateTime())) {
-            throw new IllegalArgumentException("Error: The date must be in the future.");
+            throw new DateNotValidException("The date must be in the future.");
         }
-
 
         Recruiter recruiter = SessionManager.getInstance().getRecruiterFromSession();
 
         Student student = studentDao.getStudent(interviewSchedulingBean.getStudentUsername())
-                .orElseThrow(() -> new IllegalArgumentException(STUDENT_NOT_FOUND_ERROR));
+                .orElseThrow(() -> new StudentNotFoundException(STUDENT_NOT_FOUND_ERROR));
         JobAnnouncement jobAnnouncement = jobAnnouncementDao.getJobAnnouncement(interviewSchedulingBean.getJobTitle(), recruiter)
-                .orElseThrow(() -> new IllegalArgumentException(JOB_ANNOUNCEMENT_NOT_FOUND_ERROR));
+                .orElseThrow(() -> new JobAnnouncementNotFoundException(JOB_ANNOUNCEMENT_NOT_FOUND_ERROR));
 
         InterviewScheduling interviewScheduling = interviewSchedulingDao.getInterviewScheduling(student, jobAnnouncement)
-                .orElseThrow(() -> new IllegalArgumentException("Error: Interview not found."));
+                .orElseThrow(() -> new InterviewSchedulingNotFoundException("Interview not found."));
 
 
         DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATE_FORMAT);
@@ -299,17 +297,17 @@
     }
 
     @Override
-    public boolean deleteInterview(InterviewSchedulingBean interviewSchedulingBean) {
+    public boolean deleteInterview(InterviewSchedulingBean interviewSchedulingBean) throws StudentNotFoundException , JobAnnouncementNotFoundException , InterviewSchedulingNotFoundException {
 
         Recruiter recruiter = SessionManager.getInstance().getRecruiterFromSession();
         Student student = studentDao.getStudent(interviewSchedulingBean.getStudentUsername())
-                .orElseThrow(() -> new IllegalArgumentException(STUDENT_NOT_FOUND_ERROR));
+                .orElseThrow(() -> new StudentNotFoundException(STUDENT_NOT_FOUND_ERROR));
         JobAnnouncement jobAnnouncement = jobAnnouncementDao.getJobAnnouncement(interviewSchedulingBean.getJobTitle(), recruiter)
-                .orElseThrow(() -> new IllegalArgumentException(JOB_ANNOUNCEMENT_NOT_FOUND_ERROR));
+                .orElseThrow(() -> new JobAnnouncementNotFoundException(JOB_ANNOUNCEMENT_NOT_FOUND_ERROR));
 
 
         InterviewScheduling interviewScheduling = interviewSchedulingDao.getInterviewScheduling(student, jobAnnouncement)
-                .orElseThrow(() -> new IllegalArgumentException("Error: Interview not found."));
+                .orElseThrow(() -> new InterviewSchedulingNotFoundException("Error: Interview not found."));
 
         interviewSchedulingDao.deleteInterviewScheduling(interviewScheduling);
 
@@ -333,7 +331,7 @@
 
     }
 
-    public boolean isDateFuture(String dateStr) {
+    private boolean isDateFuture(String dateStr) {
         DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATE_FORMAT);
         LocalDateTime interviewDateTime = LocalDateTime.parse(dateStr, formatter);
         return interviewDateTime.isAfter(LocalDateTime.now());
Index: src/main/java/org/example/togetjob/view/cli/concretestate/HomeStudentState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.cli.concretestate;\n\nimport org.example.togetjob.bean.InterviewSchedulingStudentInfoBean;\nimport org.example.togetjob.view.boundary.ContactAJobCandidateStudentBoundary;\nimport org.example.togetjob.view.boundary.LoginBoundary;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.cli.abstractstate.CliState;\nimport org.example.togetjob.view.cli.contextstate.CliContext;\n\nimport java.util.List;\n\n\npublic class HomeStudentState implements CliState {\n\n    private final LoginBoundary loginBoundary = new LoginBoundary();\n    private final ContactAJobCandidateStudentBoundary contactAJobCandidateStudentBoundary = new ContactAJobCandidateStudentBoundary();\n\n    @Override\n    public void showMenu() {\n            Printer.print(\"\\n ---Home - Student---\");\n            Printer.print(\"Welcome, Student! You can do the following:\");\n            Printer.print(\"1. View your profile\");\n            Printer.print(\"2. Vote a company\");\n            Printer.print(\"3. Show Job Announcements\");\n            Printer.print(\"4. View notifications\");\n            Printer.print(\"5. Logout\");\n            Printer.print(\"6. Exit\");\n            Printer.print(\"Choose an option: \");\n    }\n\n    @Override\n    public void goNext(CliContext context, String input) {\n\n        switch (input.toLowerCase()) {\n            case \"1\": // View profile\n                Printer.print(\"Displaying your profile...\");\n                break;\n            case \"2\": // Vote a company\n                Printer.print(\"Voting a company...\");\n                break;\n            case \"3\": // Show job announcements\n                Printer.print(\"Showing job announcements...\");\n                context.setState(new SendAJobApplicationStudentState());\n                break;\n            case \"4\": // View notifications\n                Printer.print(\"Viewing notifications...\");\n                List<InterviewSchedulingStudentInfoBean> interviewSchedulingList =\n                        contactAJobCandidateStudentBoundary.getAllInterviewSchedulingForStudent();\n\n                if (interviewSchedulingList.isEmpty()) {\n                    Printer.print(\"You have no scheduled interviews at the moment.\");\n                } else {\n                    printInterviewScheduling(interviewSchedulingList);\n                }\n                break;\n            case \"5\": // Logout\n                Printer.print(\"Logging out...\");\n                loginBoundary.logout();\n                context.setState(new MainMenuState());// Go to Main Menù\n                break;\n            case \"6\": // Exit\n                Printer.print(\"Exiting application...\");\n                context.setState(new ExitState());  // Go to Exit State\n                break;\n            default:\n                Printer.print(\"Invalid option. Please try again.\");\n                context.setState(new HomeStudentState()); // Home Student\n                break;\n        }\n    }\n\n    private void printInterviewScheduling(List<InterviewSchedulingStudentInfoBean> interviewSchedulingList) {\n        for (InterviewSchedulingStudentInfoBean interview : interviewSchedulingList) {\n            Printer.print(\"\\n--- Interview Invitation ---\");\n            Printer.print(\"Subject: \" + interview.getSubject());\n            Printer.print(\"Greeting: \" + interview.getGreeting());\n            Printer.print(\"Introduction: \" + interview.getIntroduction());\n            Printer.print(\"Job Title: \" + interview.getJobTitle());\n            Printer.print(\"Company Name: \" + interview.getCompanyName());\n            Printer.print(\"Interview Date/Time: \" + interview.getInterviewDateTime());\n            Printer.print(\"Location: \" + interview.getLocation());\n            Printer.print(\"Student Username: \" + interview.getStudentUsername());\n            Printer.print(\"----------------------------------\");\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/cli/concretestate/HomeStudentState.java b/src/main/java/org/example/togetjob/view/cli/concretestate/HomeStudentState.java
--- a/src/main/java/org/example/togetjob/view/cli/concretestate/HomeStudentState.java	(revision fe6e287ffe6104328c1e6d2c33f77e6ea0d421cd)
+++ b/src/main/java/org/example/togetjob/view/cli/concretestate/HomeStudentState.java	(date 1739438963835)
@@ -30,42 +30,46 @@
 
     @Override
     public void goNext(CliContext context, String input) {
-
-        switch (input.toLowerCase()) {
-            case "1": // View profile
-                Printer.print("Displaying your profile...");
-                break;
-            case "2": // Vote a company
-                Printer.print("Voting a company...");
-                break;
-            case "3": // Show job announcements
-                Printer.print("Showing job announcements...");
-                context.setState(new SendAJobApplicationStudentState());
-                break;
-            case "4": // View notifications
-                Printer.print("Viewing notifications...");
-                List<InterviewSchedulingStudentInfoBean> interviewSchedulingList =
-                        contactAJobCandidateStudentBoundary.getAllInterviewSchedulingForStudent();
+        try {
+            switch (input.toLowerCase()) {
+                case "1": // View profile
+                    Printer.print("Displaying your profile...");
+                    break;
+                case "2": // Vote a company
+                    Printer.print("Voting a company...");
+                    break;
+                case "3": // Show job announcements
+                    Printer.print("Showing job announcements...");
+                    context.setState(new SendAJobApplicationStudentState());
+                    break;
+                case "4": // View notifications
+                    Printer.print("Viewing notifications...");
+                    List<InterviewSchedulingStudentInfoBean> interviewSchedulingList =
+                            contactAJobCandidateStudentBoundary.getAllInterviewSchedulingForStudent();
 
-                if (interviewSchedulingList.isEmpty()) {
-                    Printer.print("You have no scheduled interviews at the moment.");
-                } else {
-                    printInterviewScheduling(interviewSchedulingList);
-                }
-                break;
-            case "5": // Logout
-                Printer.print("Logging out...");
-                loginBoundary.logout();
-                context.setState(new MainMenuState());// Go to Main Menù
-                break;
-            case "6": // Exit
-                Printer.print("Exiting application...");
-                context.setState(new ExitState());  // Go to Exit State
-                break;
-            default:
-                Printer.print("Invalid option. Please try again.");
-                context.setState(new HomeStudentState()); // Home Student
-                break;
+                    if (interviewSchedulingList.isEmpty()) {
+                        Printer.print("You have no scheduled interviews at the moment.");
+                    } else {
+                        printInterviewScheduling(interviewSchedulingList);
+                    }
+                    break;
+                case "5": // Logout
+                    Printer.print("Logging out...");
+                    loginBoundary.logout();
+                    context.setState(new MainMenuState()); // Go to Main Menu
+                    break;
+                case "6": // Exit
+                    Printer.print("Exiting application...");
+                    context.setState(new ExitState());  // Go to Exit State
+                    break;
+                default:
+                    Printer.print("Invalid option. Please try again.");
+                    context.setState(new HomeStudentState()); // Home Student
+                    break;
+            }
+        } catch (IllegalStateException e) {
+            Printer.print("An error occurred: " + e.getMessage());
+            context.setState(new MainMenuState()); // Reset to main menu if there's an illegal state
         }
     }
 
Index: src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationRecruiterState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.cli.concretestate;\n\nimport org.example.togetjob.bean.InterviewSchedulingBean;\nimport org.example.togetjob.bean.JobAnnouncementBean;\nimport org.example.togetjob.bean.JobApplicationBean;\nimport org.example.togetjob.view.boundary.ContactAJobCandidateRecruiterBoundary;\nimport org.example.togetjob.view.boundary.SendAJobApplicationRecruiterBoundary;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.cli.abstractstate.CliState;\nimport org.example.togetjob.view.cli.contextstate.CliContext;\n\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class SendAJobApplicationRecruiterState implements CliState {\n\n    private final SendAJobApplicationRecruiterBoundary sendAJobApplicationRecruiterBoundary = new SendAJobApplicationRecruiterBoundary();\n    private final ContactAJobCandidateRecruiterBoundary contactAJobCandidateRecruiterBoundary = new ContactAJobCandidateRecruiterBoundary();\n    private final JobAnnouncementBean jobAnnouncementBean;\n    private static final String GO_BACK = \"Go Back \\n\";\n    private static final String CHOOSE_AN_OPTION = \"Choose an option\";\n\n    public SendAJobApplicationRecruiterState(JobAnnouncementBean jobAnnouncementBean) {\n        this.jobAnnouncementBean = jobAnnouncementBean;\n    }\n\n    @Override\n    public void showMenu() {\n        Printer.print(\"\\n --- Job Applications and Interview Schedules for: \" + jobAnnouncementBean.getJobTitle() + \" ---\");\n        Printer.print(\"Welcome, Recruiter! You can do the following:\");\n        Printer.print(\"1. View all job applications for this job announcement\");\n        Printer.print(\"2. View all interview schedules for this job announcement\");\n        Printer.print(\"3.\" + GO_BACK);\n        Printer.print(CHOOSE_AN_OPTION);\n    }\n\n    @Override\n    public void goNext(CliContext context, String input) {\n\n        Scanner scanner = context.getScanner();\n\n        switch (input.toLowerCase()) {\n            case \"1\": // View job applications for a specific job announcement\n                viewJobApplicationsForJobAnnouncement(scanner);\n                break;\n\n            case \"2\": // View and manage interview schedules for the job announcement\n                viewInterviewSchedules(scanner);\n                break;\n\n            case \"3\": // Go back to previous state\n                Printer.print(\"Returning to job announcement management...\");\n                context.setState(new PublishAJobAnnouncementRecruiterState());\n                break;\n\n            default:\n                Printer.print(\"Please try again.\" + CHOOSE_AN_OPTION);\n                break;\n        }\n    }\n\n    private void viewJobApplicationsForJobAnnouncement(Scanner scanner) {\n\n        // Call the boundary method to fetch job announcements\n        List<JobApplicationBean> jobApplications = sendAJobApplicationRecruiterBoundary.getAllJobApplications(jobAnnouncementBean);\n\n        if (jobApplications.isEmpty()) {\n            Printer.print(\"No job applications found for this job announcement.\");\n        } else {\n            // Display the list of job applications\n            Printer.print(\"Here are the job applications for the job announcement: \" + jobAnnouncementBean.getJobTitle());\n\n        }\n\n        for (int i = 0; i < jobApplications.size(); i++) {\n            JobApplicationBean jobApplication = jobApplications.get(i);\n            Printer.print((i + 1) + \". Applicant: \" + jobApplication.getStudentUsername() +\n                    \" | Status: \" + jobApplication.getStatus());\n        }\n\n        Printer.print(\"Enter the number of the application you want to manage, or 0 to go back: \");\n        int selection = scanner.nextInt();\n        scanner.nextLine();\n\n        if (selection > 0 && selection <= jobApplications.size()) {\n            JobApplicationBean selectedApplication = jobApplications.get(selection - 1);\n            manageApplication(scanner, selectedApplication);\n        } else if (selection == 0) {\n            Printer.print(\"Returning to the job announcement menu...\");\n        } else {\n            Printer.print(\"Invalid selection. Please try again.\");\n        }\n\n    }\n\n    private void viewInterviewSchedules(Scanner scanner) {\n        List<InterviewSchedulingBean> interviewSchedulings = contactAJobCandidateRecruiterBoundary.getInterviewSchedules(jobAnnouncementBean);\n\n        if (interviewSchedulings.isEmpty()) {\n            Printer.print(\"No interviews scheduled for this job announcement.\");\n        } else {\n            Printer.print(\"Here are the scheduled interviews for the job announcement: \" + jobAnnouncementBean.getJobTitle());\n            for (int i = 0; i < interviewSchedulings.size(); i++) {\n                InterviewSchedulingBean interviewScheduling = interviewSchedulings.get(i);\n                Printer.print((i + 1) + \". Candidate: \" + interviewScheduling.getStudentUsername() +\n                        \" | Date: \" + interviewScheduling.getInterviewDateTime());\n            }\n        }\n\n        Printer.print(\"Enter the number of the interview you want to manage, or 0 to go back: \");\n        int selection = scanner.nextInt();\n        scanner.nextLine();\n\n        if (selection > 0 && selection <= interviewSchedulings.size()) {\n            InterviewSchedulingBean selectedInterview = interviewSchedulings.get(selection - 1);\n            manageInterview(scanner, selectedInterview);\n        } else if (selection == 0) {\n            Printer.print(\"Returning to the job announcement menu...\");\n        } else {\n            Printer.print(\"Invalid selection. Please try again.\");\n        }\n    }\n\n    private void manageInterview(Scanner scanner, InterviewSchedulingBean selectedInterview) {\n        Printer.print(\"Managing interview with \" + selectedInterview.getStudentUsername());\n        Printer.print(\"1. Modify this interview\");\n        Printer.print(\"2. Delete this interview\");\n        Printer.print(\"3.\" + GO_BACK);\n        Printer.print(CHOOSE_AN_OPTION);\n        String action = scanner.nextLine();\n\n        boolean success;\n        switch (action) {\n            case \"1\": // Modify the interview\n                success = contactAJobCandidateRecruiterBoundary.modifyInterview(selectedInterview);\n                if (success) {\n                    Printer.print(\"Interview modified successfully.\");\n                } else {\n                    Printer.print(\"Failed to modify the interview.\");\n                }\n                break;\n\n            case \"2\": // Delete the interview\n                success = contactAJobCandidateRecruiterBoundary.deleteInterview(selectedInterview);\n                if (success) {\n                    Printer.print(\"Interview deleted successfully.\");\n                } else {\n                    Printer.print(\"Failed to delete the interview.\");\n                }\n                break;\n\n            case \"3\": // Go back to interview list\n                Printer.print(\"Returning to interview schedules...\");\n                break;\n\n            default:\n                Printer.print(\"Invalid option. Please try again.\");\n                break;\n        }\n    }\n\n    private void manageApplication(Scanner scanner, JobApplicationBean selectedApplication) {\n        Printer.print(\"Managing application from \" + selectedApplication.getStudentUsername());\n        Printer.print(\"1. Accept this application\");\n        Printer.print(\"2. Reject this application\");\n        Printer.print(\"3.\" + GO_BACK);\n        Printer.print(CHOOSE_AN_OPTION);\n        String action = scanner.nextLine();\n\n        boolean success;\n        switch (action) {\n            case \"1\": // Accept the application\n                success = sendAJobApplicationRecruiterBoundary.acceptJobApplication(selectedApplication);\n                if (success) {\n                    Printer.print(\"Application accepted successfully.\");\n                } else {\n                    Printer.print(\"Failed to accept the application.\");\n                }\n                break;\n\n            case \"2\": // Reject the application\n                success = sendAJobApplicationRecruiterBoundary.rejectJobApplication(selectedApplication);\n                if (success) {\n                    Printer.print(\"Application rejected successfully.\");\n                } else {\n                    Printer.print(\"Failed to reject the application.\");\n                }\n                break;\n\n            case \"3\": // Go back to the applications list\n                Printer.print(\"Returning to job applications...\");\n                break;\n\n            default:\n                Printer.print(\"Invalid option. Please try again.\");\n                break;\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationRecruiterState.java b/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationRecruiterState.java
--- a/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationRecruiterState.java	(revision fe6e287ffe6104328c1e6d2c33f77e6ea0d421cd)
+++ b/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationRecruiterState.java	(date 1739445507481)
@@ -3,6 +3,7 @@
 import org.example.togetjob.bean.InterviewSchedulingBean;
 import org.example.togetjob.bean.JobAnnouncementBean;
 import org.example.togetjob.bean.JobApplicationBean;
+import org.example.togetjob.exceptions.*;
 import org.example.togetjob.view.boundary.ContactAJobCandidateRecruiterBoundary;
 import org.example.togetjob.view.boundary.SendAJobApplicationRecruiterBoundary;
 import org.example.togetjob.printer.Printer;
@@ -36,26 +37,29 @@
 
     @Override
     public void goNext(CliContext context, String input) {
-
         Scanner scanner = context.getScanner();
 
-        switch (input.toLowerCase()) {
-            case "1": // View job applications for a specific job announcement
-                viewJobApplicationsForJobAnnouncement(scanner);
-                break;
+        try {
+            switch (input.toLowerCase()) {
+                case "1": // View job applications for a specific job announcement
+                    viewJobApplicationsForJobAnnouncement(scanner);
+                    break;
 
-            case "2": // View and manage interview schedules for the job announcement
-                viewInterviewSchedules(scanner);
-                break;
+                case "2": // View and manage interview schedules for the job announcement
+                    viewInterviewSchedules(scanner);
+                    break;
 
-            case "3": // Go back to previous state
-                Printer.print("Returning to job announcement management...");
-                context.setState(new PublishAJobAnnouncementRecruiterState());
-                break;
+                case "3": // Go back to previous state
+                    Printer.print("Returning to job announcement management...");
+                    context.setState(new PublishAJobAnnouncementRecruiterState());
+                    break;
 
-            default:
-                Printer.print("Please try again." + CHOOSE_AN_OPTION);
-                break;
+                default:
+                    Printer.print("Please try again." + CHOOSE_AN_OPTION);
+                    break;
+            }
+        } catch (JobAnnouncementNotFoundException e) {
+            Printer.print(e.getMessage());
         }
     }
 
@@ -93,31 +97,35 @@
 
     }
 
-    private void viewInterviewSchedules(Scanner scanner) {
-        List<InterviewSchedulingBean> interviewSchedulings = contactAJobCandidateRecruiterBoundary.getInterviewSchedules(jobAnnouncementBean);
+    private void viewInterviewSchedules(Scanner scanner) throws JobAnnouncementNotFoundException{
+        try {
+            List<InterviewSchedulingBean> interviewSchedulings = contactAJobCandidateRecruiterBoundary.getInterviewSchedules(jobAnnouncementBean);
 
-        if (interviewSchedulings.isEmpty()) {
-            Printer.print("No interviews scheduled for this job announcement.");
-        } else {
-            Printer.print("Here are the scheduled interviews for the job announcement: " + jobAnnouncementBean.getJobTitle());
-            for (int i = 0; i < interviewSchedulings.size(); i++) {
-                InterviewSchedulingBean interviewScheduling = interviewSchedulings.get(i);
-                Printer.print((i + 1) + ". Candidate: " + interviewScheduling.getStudentUsername() +
-                        " | Date: " + interviewScheduling.getInterviewDateTime());
-            }
-        }
+            if (interviewSchedulings.isEmpty()) {
+                Printer.print("No interviews scheduled for this job announcement.");
+            } else {
+                Printer.print("Here are the scheduled interviews for the job announcement: " + jobAnnouncementBean.getJobTitle());
+                for (int i = 0; i < interviewSchedulings.size(); i++) {
+                    InterviewSchedulingBean interviewScheduling = interviewSchedulings.get(i);
+                    Printer.print((i + 1) + ". Candidate: " + interviewScheduling.getStudentUsername() +
+                            " | Date: " + interviewScheduling.getInterviewDateTime());
+                }
+            }
 
-        Printer.print("Enter the number of the interview you want to manage, or 0 to go back: ");
-        int selection = scanner.nextInt();
-        scanner.nextLine();
+            Printer.print("Enter the number of the interview you want to manage, or 0 to go back: ");
+            int selection = scanner.nextInt();
+            scanner.nextLine();
 
-        if (selection > 0 && selection <= interviewSchedulings.size()) {
-            InterviewSchedulingBean selectedInterview = interviewSchedulings.get(selection - 1);
-            manageInterview(scanner, selectedInterview);
-        } else if (selection == 0) {
-            Printer.print("Returning to the job announcement menu...");
-        } else {
-            Printer.print("Invalid selection. Please try again.");
+            if (selection > 0 && selection <= interviewSchedulings.size()) {
+                InterviewSchedulingBean selectedInterview = interviewSchedulings.get(selection - 1);
+                manageInterview(scanner, selectedInterview);
+            } else if (selection == 0) {
+                Printer.print("Returning to the job announcement menu...");
+            } else {
+                Printer.print("Invalid selection. Please try again.");
+            }
+        } catch (JobAnnouncementNotFoundException e) {
+            Printer.print(e.getMessage());
         }
     }
 
@@ -132,20 +140,28 @@
         boolean success;
         switch (action) {
             case "1": // Modify the interview
-                success = contactAJobCandidateRecruiterBoundary.modifyInterview(selectedInterview);
-                if (success) {
-                    Printer.print("Interview modified successfully.");
-                } else {
-                    Printer.print("Failed to modify the interview.");
+                try {
+                    success = contactAJobCandidateRecruiterBoundary.modifyInterview(selectedInterview);
+                    if (success) {
+                        Printer.print("Interview modified successfully.");
+                    } else {
+                        Printer.print("Failed to modify the interview.");
+                    }
+                } catch (DateNotValidException | StudentNotFoundException | JobAnnouncementNotFoundException | InterviewSchedulingNotFoundException e) {
+                    Printer.print(e.getMessage());
                 }
                 break;
 
             case "2": // Delete the interview
-                success = contactAJobCandidateRecruiterBoundary.deleteInterview(selectedInterview);
-                if (success) {
-                    Printer.print("Interview deleted successfully.");
-                } else {
-                    Printer.print("Failed to delete the interview.");
+                try {
+                    success = contactAJobCandidateRecruiterBoundary.deleteInterview(selectedInterview);
+                    if (success) {
+                        Printer.print("Interview deleted successfully.");
+                    } else {
+                        Printer.print("Failed to delete the interview.");
+                    }
+                }catch (StudentNotFoundException | JobAnnouncementNotFoundException | InterviewSchedulingNotFoundException e){
+                    Printer.print(e.getMessage());
                 }
                 break;
 
@@ -159,7 +175,7 @@
         }
     }
 
-    private void manageApplication(Scanner scanner, JobApplicationBean selectedApplication) {
+    private void manageApplication(Scanner scanner, JobApplicationBean selectedApplication){
         Printer.print("Managing application from " + selectedApplication.getStudentUsername());
         Printer.print("1. Accept this application");
         Printer.print("2. Reject this application");
@@ -168,33 +184,38 @@
         String action = scanner.nextLine();
 
         boolean success;
-        switch (action) {
-            case "1": // Accept the application
-                success = sendAJobApplicationRecruiterBoundary.acceptJobApplication(selectedApplication);
-                if (success) {
-                    Printer.print("Application accepted successfully.");
-                } else {
-                    Printer.print("Failed to accept the application.");
-                }
-                break;
+        try {
+            switch (action) {
+                case "1": // Accept the application
+                    success = sendAJobApplicationRecruiterBoundary.acceptJobApplication(selectedApplication);
+                    if (success) {
+                        Printer.print("Application accepted successfully.");
+                    } else {
+                        Printer.print("Failed to accept the application.");
+                    }
+                    break;
 
-            case "2": // Reject the application
-                success = sendAJobApplicationRecruiterBoundary.rejectJobApplication(selectedApplication);
-                if (success) {
-                    Printer.print("Application rejected successfully.");
-                } else {
-                    Printer.print("Failed to reject the application.");
-                }
-                break;
+                case "2": // Reject the application
+                    success = sendAJobApplicationRecruiterBoundary.rejectJobApplication(selectedApplication);
+                    if (success) {
+                        Printer.print("Application rejected successfully.");
+                    } else {
+                        Printer.print("Failed to reject the application.");
+                    }
+                    break;
 
-            case "3": // Go back to the applications list
-                Printer.print("Returning to job applications...");
-                break;
+                case "3": // Go back to the applications list
+                    Printer.print("Returning to job applications...");
+                    break;
 
-            default:
-                Printer.print("Invalid option. Please try again.");
-                break;
+                default:
+                    Printer.print("Invalid option. Please try again.");
+                    break;
+            }
+        } catch (JobApplicationNotFoundException e) {
+            Printer.print(e.getMessage());
         }
     }
+
 
 }
Index: src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationStudentState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.cli.concretestate;\n\nimport org.example.togetjob.bean.JobAnnouncementBean;\nimport org.example.togetjob.bean.JobAnnouncementSearchBean;\nimport org.example.togetjob.bean.JobApplicationBean;\nimport org.example.togetjob.view.boundary.SendAJobApplicationStudentBoundary;\nimport org.example.togetjob.exceptions.JobAnnouncementNotActiveException;\nimport org.example.togetjob.exceptions.JobApplicationAlreadySentException;\nimport org.example.togetjob.model.entity.Status;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.cli.abstractstate.CliState;\nimport org.example.togetjob.view.cli.contextstate.CliContext;\n\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class SendAJobApplicationStudentState implements CliState {\n\n    private final SendAJobApplicationStudentBoundary sendAJobApplicationStudentBoundary = new SendAJobApplicationStudentBoundary();\n    private static final String CHOSE_AN_OPTION = \"Choose an option: \";\n    private static final String NOT_SPECIFIED = \"Not specified\";\n    private static final String JOB_TITLE = \"Job title: \";\n    private static final String LOCATION = \"Location: \";\n    private static final String SALARY = \"Salary: \";\n    private static final String WORKING_HOURS = \"Working Hours: \";\n    private static final String COMPANY = \"Company: \";\n    private static final String JOB_TYPE = \"Job Type: \";\n    private static final String JOB_ROLE = \"Job Role: \";\n\n    @Override\n    public void showMenu() {\n\n        Printer.print(\"\\n --- Show Job Announcements - Student ---\");\n        Printer.print(\"Welcome, Student! You can do the following:\");\n        Printer.print(\"1. View available job announcements\");\n        Printer.print(\"2. View sent job applications\");\n        Printer.print(\"3. Go back\");\n        Printer.print(\"4. Exit\");\n        Printer.print(CHOSE_AN_OPTION);\n    }\n\n    @Override\n    public void goNext(CliContext context, String input) {\n\n        Scanner scanner = context.getScanner();\n\n        switch (input.toLowerCase()) {\n            case \"1\":\n                applyFiltersAndShowJobAnnouncements(scanner); //show filters and job announcements\n                break;\n\n            case \"2\":\n                viewAndManageJobApplications(scanner); // view past job applications\n                break;\n\n            case \"3\":\n                Printer.print(\"Returning to student home...\");\n                context.setState(new HomeStudentState());\n                break;\n\n            case \"4\":\n                Printer.print(\"Exiting application...\");\n                context.setState(new ExitState());\n                break;\n\n            default:\n                Printer.print(\"Invalid option. Please try again.\");\n                break;\n        }\n    }\n\n    private void viewAndManageJobApplications(Scanner scanner){\n\n        List<JobApplicationBean> jobApplications = sendAJobApplicationStudentBoundary.getJobApplicationsByStudent();\n\n        if (jobApplications.isEmpty()) {\n            Printer.print(\"You haven't sent any job applications yet.\");\n            return;\n        }\n\n        Printer.print(\"\\n --- Your Job Applications ---\");\n        int index = 1;\n        for (JobApplicationBean application : jobApplications) {\n            Printer.print(index + \". Your Job Application for the Job Announcement << \" + application.getJobTitle() +\n                    \" >> is \" + application.getStatus());\n            index++;\n        }\n\n        Printer.print(\"\\nSelect an application to manage, or enter 0 to go back:\");\n        int choice = Integer.parseInt(scanner.nextLine());\n\n        if (choice == 0) {\n            return; // Go back\n        }\n\n        if (choice < 1 || choice > jobApplications.size()) {\n            Printer.print(\"Invalid selection. Please try again.\");\n            return;\n        }\n\n        JobApplicationBean selectedApplication = jobApplications.get(choice - 1);\n\n        if (selectedApplication.getStatus() == Status.PENDING) {\n            Printer.print(\"\\nWhat would you like to do?\");\n            Printer.print(\"1. Modify this application\");\n            Printer.print(\"2. Delete this application\");\n            Printer.print(\"3. Go back\");\n            Printer.print(CHOSE_AN_OPTION);\n\n            String action = scanner.nextLine();\n            switch (action) {\n                case \"1\":\n                    modifyJobApplication(scanner, selectedApplication);\n                    break;\n                case \"2\":\n                    deleteJobApplication(scanner, selectedApplication);\n                    break;\n                case \"3\":\n                    return;\n                default:\n                    Printer.print(\"Invalid option. Returning to main menu.\");\n            }\n        } else {\n            Printer.print(\"This application has already been processed and cannot be modified or deleted.\" +\n                    \"\\nPlease visit the ‘View sent job applications’ section to view the current status of your application.\");\n        }\n\n    }\n\n    private void modifyJobApplication(Scanner scanner, JobApplicationBean jobApplicationBean){\n\n        Printer.print(\"Enter a new cover letter:\");\n        String newCoverLetter = scanner.nextLine();\n        jobApplicationBean.setCoverLetter(newCoverLetter);\n\n        boolean success = sendAJobApplicationStudentBoundary.modifyAJobApplication(jobApplicationBean);\n        if (success) {\n            Printer.print(\"Job application successfully modified!\");\n        } else {\n            Printer.print(\"Error modifying the job application. It may have already been processed.\");\n        }\n\n    }\n\n    private void deleteJobApplication(Scanner scanner, JobApplicationBean jobApplicationBean){\n\n        Printer.print(\"Are you sure you want to delete this application? (yes/no)\");\n        String confirmation = scanner.nextLine().toLowerCase();\n\n        if (!confirmation.equals(\"yes\")) {\n            Printer.print(\"Deletion canceled.\");\n            return;\n        }\n\n        boolean success = sendAJobApplicationStudentBoundary.deleteAJobApplication(jobApplicationBean);\n        if (success) {\n            Printer.print(\"Job application successfully deleted!\");\n        } else {\n            Printer.print(\"Error deleting the job application. It may have already been processed.\");\n        }\n\n    }\n\n\n    private void applyFiltersAndShowJobAnnouncements(Scanner scanner) {\n\n        Printer.print(\"\\nEnter your search filters:\");\n\n        Printer.print(\"Enter job title (or leave blank to skip): \");\n        String jobTitle = scanner.nextLine();\n\n        Printer.print(\"Enter job type (or leave blank to skip): \");\n        String jobType = scanner.nextLine();\n\n        Printer.print(\"Enter role (or leave blank to skip): \");\n        String role = scanner.nextLine();\n\n        Printer.print(\"Enter location (or leave blank to skip): \");\n        String location = scanner.nextLine();\n\n        Printer.print(\"Enter working hours (or leave blank to skip): \");\n        String workingHours = scanner.nextLine();\n\n        Printer.print(\"Enter company name (or leave blank to skip): \");\n        String companyName = scanner.nextLine();\n\n        Printer.print(\"Enter salary (or leave blank to skip): \");\n        String salary = scanner.nextLine();\n\n        JobAnnouncementSearchBean searchBean = new JobAnnouncementSearchBean(); // Empty\n\n        searchBean.setJobTitle(jobTitle);\n        searchBean.setJobType(jobType);\n        searchBean.setRole(role);\n        searchBean.setLocation(location);\n        searchBean.setWorkingHours(workingHours);\n        searchBean.setCompanyName(companyName);\n        searchBean.setSalary(salary);\n\n\n        Printer.print(\"\\n --- Filters you have selected ---\");\n        Printer.print(JOB_TITLE + (jobTitle.isEmpty() ? NOT_SPECIFIED : jobTitle));\n        Printer.print(JOB_TYPE + (jobType.isEmpty() ? NOT_SPECIFIED : jobType));\n        Printer.print(JOB_ROLE + (role.isEmpty() ? NOT_SPECIFIED : role));\n        Printer.print(LOCATION + (location.isEmpty() ? NOT_SPECIFIED : location));\n        Printer.print(SALARY + (salary.isEmpty() ? NOT_SPECIFIED : salary));\n        Printer.print(WORKING_HOURS  + (workingHours.isEmpty() ? NOT_SPECIFIED : workingHours));\n        Printer.print(COMPANY + (companyName.isEmpty() ? NOT_SPECIFIED : companyName));\n        Printer.print(\"\\nDo you want to proceed with these filters?\");\n        Printer.print(\"1. Proceed\");\n        Printer.print(\"2. Go back and change filters\");\n        Printer.print(CHOSE_AN_OPTION);\n        String choice = scanner.nextLine();\n\n        if (choice.equals(\"1\")) {\n            Printer.print(\"\\nProceeding with the selected filters...\");\n            proceedWithFilters(scanner,searchBean);\n        } else if (choice.equals(\"2\")) {\n            Printer.print(\"Returning to filter selection...\");\n            applyFiltersAndShowJobAnnouncements(scanner);\n        } else {\n            Printer.print(\"Please try again.\" + CHOSE_AN_OPTION);\n            applyFiltersAndShowJobAnnouncements(scanner);\n        }\n    }\n\n\n    private void proceedWithFilters(Scanner scanner, JobAnnouncementSearchBean searchBean) {\n\n        List<JobAnnouncementBean> jobAnnouncements = sendAJobApplicationStudentBoundary.getJobAnnouncements(searchBean);\n\n        if (jobAnnouncements.isEmpty()) {\n            Printer.print(\"No job announcements found with the specified filters.\");\n        } else {\n            for (int i = 0; i < jobAnnouncements.size(); i++) {\n                JobAnnouncementBean job = jobAnnouncements.get(i);\n                Printer.print((i + 1) + \". Job Title: \" + job.getJobTitle() + \" - Location: \" + job.getLocation() + \" - Salary: \" + job.getSalary());\n            }\n\n            showJobAnnouncementDetails(scanner, jobAnnouncements);\n        }\n    }\n\n    private void showJobAnnouncementDetails(Scanner scanner, List<JobAnnouncementBean> jobAnnouncements) {\n        // Ask the student to choose a job\n        Printer.print(\"Enter the number of the job to see more details: \");\n        int jobIndex = scanner.nextInt() - 1;\n        scanner.nextLine();  // Consume the newline\n\n        if (jobIndex < 0 || jobIndex >= jobAnnouncements.size()) {\n            Printer.print(\"Please try again.\" + CHOSE_AN_OPTION);\n            return;\n        }\n\n        JobAnnouncementBean selectedJob = jobAnnouncements.get(jobIndex);\n\n        Printer.print(\"\\n --- Job Details ---\");\n        Printer.print(JOB_TITLE + selectedJob.getJobTitle());\n        Printer.print(JOB_TYPE+ selectedJob.getJobType());\n        Printer.print(JOB_ROLE  + selectedJob.getRole());\n        Printer.print(LOCATION + selectedJob.getLocation());\n        Printer.print(SALARY + selectedJob.getSalary());\n        Printer.print(WORKING_HOURS + selectedJob.getWorkingHours());\n        Printer.print(COMPANY+ selectedJob.getCompanyName());\n        Printer.print(\"Job Description: \" + selectedJob.getDescription());\n\n\n        // Allow user to go back or apply for the job\n        Printer.print(\"\\nDo you want to apply for this job?\");\n        Printer.print(\"1. Send your job application\");\n        Printer.print(\"2. Go back\");\n        Printer.print(CHOSE_AN_OPTION);\n        String choice = scanner.nextLine();\n\n        if (choice.equals(\"1\")) {\n            // Proceed to the job application process\n            applyForJob(scanner, selectedJob, jobAnnouncements);\n        } else if (choice.equals(\"2\")) {\n            // Go back to job announcements list\n            showJobAnnouncementDetails(scanner, jobAnnouncements);\n        } else {\n            Printer.print(\"Invalid choice. Please try again.\");\n            showJobAnnouncementDetails(scanner, jobAnnouncements);\n        }\n    }\n\n    private void applyForJob(Scanner scanner, JobAnnouncementBean selectedJob, List<JobAnnouncementBean> jobAnnouncements) {\n        try {\n            Printer.print(\"Filling out the application form...\");\n\n            JobApplicationBean jobApplicationBean = sendAJobApplicationStudentBoundary.fillJobApplicationForm(selectedJob);\n\n            if (jobApplicationBean != null) {\n                Printer.print(\"\\n --- Review your Application ---\");\n                Printer.print(\"Job Title: \" + jobApplicationBean.getJobTitle());\n                Printer.print(\"Applicant Name: \" + jobApplicationBean.getStudentUsername());\n\n                // Ask the user for their cover letter\n                Printer.print(\"Enter your cover letter: \");\n                String coverLetter = scanner.nextLine();\n                jobApplicationBean.setCoverLetter(coverLetter);\n\n                Printer.print(\"Cover Letter: \" + jobApplicationBean.getCoverLetter());\n\n                // Confirm submission\n                Printer.print(\"\\nDo you want to submit your application?\");\n                Printer.print(\"1. Submit\");\n                Printer.print(\"2. Go back\");\n                Printer.print(CHOSE_AN_OPTION);\n                String submitChoice = scanner.nextLine();\n\n                if (submitChoice.equals(\"1\")) {\n                    // Attempt to submit the application\n                    boolean isApplicationSent = sendAJobApplicationStudentBoundary.sendAJobApplication(jobApplicationBean);\n                    if (isApplicationSent) {\n                        Printer.print(\"Your application has been successfully submitted!\");\n                    } else {\n                        Printer.print(\"There was an error submitting your application. Please try again.\");\n                    }\n                } else if (submitChoice.equals(\"2\")) {\n                    // Go back to job details\n                    showJobAnnouncementDetails(scanner, jobAnnouncements);\n                } else {\n                    Printer.print(\"Invalid choice. Please try again.\");\n                    applyForJob(scanner, selectedJob, jobAnnouncements);\n                }\n            } else {\n                Printer.print(\"Failed to fill out the application form. Please try again.\");\n            }\n        } catch (JobAnnouncementNotActiveException | JobApplicationAlreadySentException e) {\n            // Handle case where the job announcement is no longer active\n            Printer.print(\"Error: \" + e.getMessage());\n        }  catch (Exception e) {\n            // Handle any other unexpected exceptions\n            Printer.print(\"An unexpected error occurred: \" + e.getMessage());\n        }\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationStudentState.java b/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationStudentState.java
--- a/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationStudentState.java	(revision fe6e287ffe6104328c1e6d2c33f77e6ea0d421cd)
+++ b/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationStudentState.java	(date 1739443297762)
@@ -3,6 +3,8 @@
 import org.example.togetjob.bean.JobAnnouncementBean;
 import org.example.togetjob.bean.JobAnnouncementSearchBean;
 import org.example.togetjob.bean.JobApplicationBean;
+import org.example.togetjob.exceptions.JobAnnouncementNotFoundException;
+import org.example.togetjob.exceptions.RecruiterNotFoundException;
 import org.example.togetjob.view.boundary.SendAJobApplicationStudentBoundary;
 import org.example.togetjob.exceptions.JobAnnouncementNotActiveException;
 import org.example.togetjob.exceptions.JobApplicationAlreadySentException;
@@ -327,9 +329,8 @@
             } else {
                 Printer.print("Failed to fill out the application form. Please try again.");
             }
-        } catch (JobAnnouncementNotActiveException | JobApplicationAlreadySentException e) {
-            // Handle case where the job announcement is no longer active
-            Printer.print("Error: " + e.getMessage());
+        } catch (JobAnnouncementNotActiveException | JobApplicationAlreadySentException | RecruiterNotFoundException | JobAnnouncementNotFoundException e) {
+            Printer.print(e.getMessage());
         }  catch (Exception e) {
             // Handle any other unexpected exceptions
             Printer.print("An unexpected error occurred: " + e.getMessage());
Index: src/main/java/org/example/togetjob/view/cli/concretestate/ContactAJobCandidateRecruiterState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.cli.concretestate;\n\nimport org.example.togetjob.bean.InterviewSchedulingBean;\nimport org.example.togetjob.bean.JobAnnouncementBean;\nimport org.example.togetjob.bean.StudentInfoBean;\nimport org.example.togetjob.bean.StudentInfoSearchBean;\nimport org.example.togetjob.view.boundary.ContactAJobCandidateRecruiterBoundary;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.cli.abstractstate.CliState;\nimport org.example.togetjob.view.cli.contextstate.CliContext;\n\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class ContactAJobCandidateRecruiterState implements CliState {\n\n    private final ContactAJobCandidateRecruiterBoundary boundary = new ContactAJobCandidateRecruiterBoundary();\n    private static final String CHOSE_AN_OPTION = \"Choose an option: \";\n    private static final String NOT_SPECIFIED = \"Not specified\";\n\n    @Override\n    public void showMenu() {\n        Printer.print(\"\\n ---Contact a Job Candidate---\");\n        Printer.print(\"Select an option:\");\n        Printer.print(\"1. View all candidates\");\n        Printer.print(\"2. Go back\");\n        Printer.print(CHOSE_AN_OPTION);\n    }\n\n    @Override\n    public void goNext(CliContext context, String input) {\n\n        Scanner scanner = context.getScanner();\n\n        switch (input) {\n            case \"1\":\n                // all candidates\n                Printer.print(\"Fetching candidates...\");\n                viewJobAnnouncements(scanner);\n                break;\n            case \"2\":\n                context.setState(new HomeRecruiterState());\n                break;\n            default:\n                Printer.print(\"Invalid option. Please try again.\");\n                showMenu();\n                break;\n        }\n\n    }\n\n    private void viewJobAnnouncements(Scanner scanner) {\n        // Call the boundary method to fetch job announcements\n        var jobAnnouncements = boundary.getJobAnnouncementsByRecruiter();\n\n        if (jobAnnouncements.isEmpty()) {\n            Printer.print(\"No job announcements found.\");\n        } else {\n            // Display the announcements\n            Printer.print(\"Here are the job announcements you have created or are collaborating on:\");\n\n            for (int i = 0; i < jobAnnouncements.size(); i++) {\n                var job = jobAnnouncements.get(i);\n                Printer.print((i + 1) + \". Title: \" + job.getJobTitle() + \" | Active: \" + job.isActive());\n            }\n\n            Printer.print(\"Enter the number of the job announcement you want to manage: \");\n            int jobSelection = scanner.nextInt();\n            scanner.nextLine(); // Consume the newline character after the number input\n\n            // Validate the input\n            if (jobSelection < 1 || jobSelection > jobAnnouncements.size()) {\n                Printer.print(\"Invalid selection. Please try again.\");\n                return; // Exit the method to let the user try again\n            }\n\n            var selectedJob = jobAnnouncements.get(jobSelection - 1);\n\n            Printer.print(\"Do you want to view the details of this job announcement? (yes/no): \");\n            String viewResponse = scanner.nextLine().trim().toLowerCase();\n\n            if (\"yes\".equals(viewResponse)) {\n                // Display the details of the selected job announcement\n                Printer.print(\"Job Title: \" + selectedJob.getJobTitle());\n                Printer.print(\"Location: \" + selectedJob.getLocation());\n                Printer.print(\"Salary: \" + selectedJob.getSalary());\n                Printer.print(\"Active: \" + selectedJob.isActive());\n                Printer.print(\"Description: \" + selectedJob.getDescription());\n            }\n\n            Printer.print(\"Do you want to contact a job candidate? (yes/no): \");\n            viewResponse = scanner.nextLine().trim().toLowerCase();\n\n            if (\"yes\".equals(viewResponse)) {\n                applyFiltersAndShowCandidates(scanner, selectedJob); // Pass selected job to filter candidates\n            }\n        }\n    }\n\n\n    private void applyFiltersAndShowCandidates(Scanner scanner, JobAnnouncementBean selectedJob) {\n        Printer.print(\"\\nEnter the filters you'd like to apply:\");\n\n        // filters to the recruiter\n        Printer.print(\"Enter degree (or leave blank to skip): \");\n        String degree = scanner.nextLine();\n\n        Printer.print(\"Enter course attended (or leave blank to skip): \");\n        String course = scanner.nextLine();\n\n        Printer.print(\"Enter certifications (or leave blank to skip): \");\n        String certification = scanner.nextLine();\n\n        Printer.print(\"Enter work experience (or leave blank to skip): \");\n        String workExperience = scanner.nextLine();\n\n        Printer.print(\"Enter skills (or leave blank to skip): \");\n        String skills = scanner.nextLine();\n\n        Printer.print(\"Enter availability (or leave blank to skip): \");\n        String availability = scanner.nextLine();\n\n\n        StudentInfoSearchBean filters = new StudentInfoSearchBean();\n        filters.setDegrees(List.of(degree.isEmpty() ? \"\" : degree));\n        filters.setCoursesAttended(List.of(course.isEmpty() ? \"\" : course));\n        filters.setCertifications(List.of(certification.isEmpty() ? \"\" : certification));\n        filters.setWorkExperiences(List.of(workExperience.isEmpty() ? \"\" : workExperience));\n        filters.setSkills(List.of(skills.isEmpty() ? \"\" : skills));\n        filters.setAvailability(availability.isEmpty() ? \"\" : availability);\n\n        Printer.print(\"\\n --- Filters you have selected ---\");\n        Printer.print(\"Degree: \" + (degree.isEmpty() ? NOT_SPECIFIED : degree));\n        Printer.print(\"Course: \" + (course.isEmpty() ?  NOT_SPECIFIED : course));\n        Printer.print(\"Certification: \" + (certification.isEmpty() ?  NOT_SPECIFIED : certification));\n        Printer.print(\"Work Experience: \" + (workExperience.isEmpty() ?  NOT_SPECIFIED : workExperience));\n        Printer.print(\"Skills: \" + (skills.isEmpty() ?  NOT_SPECIFIED : skills));\n        Printer.print(\"Availability: \" + (availability.isEmpty() ?  NOT_SPECIFIED : availability));\n\n        Printer.print(\"\\nDo you want to proceed with these filters?\");\n        Printer.print(\"1. Proceed\");\n        Printer.print(\"2. Go back and change filters\");\n        Printer.print(CHOSE_AN_OPTION);\n        String choice = scanner.nextLine();\n\n        if (\"1\".equals(choice)) {\n            Printer.print(\"\\nProceeding with the selected filters...\");\n            List<StudentInfoBean> filteredCandidates = boundary.getFilteredCandidates(filters, selectedJob); // Candidates filtered\n            displayCandidates(scanner, filteredCandidates, selectedJob);\n        } else if (\"2\".equals(choice)) {\n            Printer.print(\"Returning to filter selection...\");\n            applyFiltersAndShowCandidates(scanner, selectedJob);\n        } else {\n            Printer.print(\"Invalid choice. Please try again.\");\n            applyFiltersAndShowCandidates(scanner, selectedJob);\n        }\n\n    }\n\n\n    private void displayCandidates(Scanner scanner, List<StudentInfoBean> candidatesList, JobAnnouncementBean selectedJob) {\n        if (candidatesList.isEmpty()) {\n            Printer.print(\"No candidates found.\");\n        } else {\n            for (int i = 0; i < candidatesList.size(); i++) {\n                StudentInfoBean candidate = candidatesList.get(i);\n                Printer.print((i + 1) + \". \" + candidate.getUsername());\n            }\n\n            Printer.print(\"\\nDo you want to view the details of any candidate?\");\n            Printer.print(\"1. View candidate details\");\n            Printer.print(\"2. Go back\");\n            Printer.print(CHOSE_AN_OPTION);\n            String choice = scanner.nextLine();\n\n            if (\"1\".equals(choice)) {\n                viewCandidateDetails(scanner, candidatesList, selectedJob);\n            } else if (\"2\".equals(choice)) {\n                showMenu();\n            } else {\n                Printer.print(\"Invalid option. Please try again.\");\n                displayCandidates(scanner, candidatesList, selectedJob);\n            }\n        }\n    }\n\n\n    private void viewCandidateDetails(Scanner scanner, List<StudentInfoBean> candidatesList, JobAnnouncementBean selectedJob) {\n        Printer.print(\"Enter the number of the candidate to view details: \");\n        int candidateIndex = scanner.nextInt() - 1;\n        scanner.nextLine(); // Consume the newline\n\n        if (candidateIndex < 0 || candidateIndex >= candidatesList.size()) {\n            Printer.print(\"Invalid choice. Please try again.\");\n            return;\n        }\n\n        StudentInfoBean selectedCandidate = candidatesList.get(candidateIndex);\n        Printer.print(\"\\n --- Candidate Details ---\");\n        Printer.print(\"Username: \" + selectedCandidate.getUsername());\n        Printer.print(\"Degree: \" + selectedCandidate.getDegrees());\n        Printer.print(\"Courses: \" + selectedCandidate.getCoursesAttended());\n        Printer.print(\"Certifications: \" + selectedCandidate.getCertifications());\n        Printer.print(\"Work Experience: \" + selectedCandidate.getWorkExperiences());\n        Printer.print(\"Skills: \" + selectedCandidate.getSkills());\n        Printer.print(\"Availability: \" + selectedCandidate.getAvailability());\n        Printer.print(\"Do you want to schedule an interview with this candidate? (yes/no): \");\n        String response = scanner.nextLine().trim().toLowerCase();\n\n        if (\"yes\".equals(response)) {\n            scheduleInterview(scanner, selectedCandidate, selectedJob);\n        } else {\n            Printer.print(\"Returning to candidate list...\");\n            displayCandidates(scanner, candidatesList, selectedJob); // Go back to the list of candidates\n        }\n    }\n\n\n    private void scheduleInterview(Scanner scanner, StudentInfoBean selectedCandidate, JobAnnouncementBean selectedJob) {\n\n        Printer.print(\"Enter the interview date and time (e.g., 2025-02-10T10:00): \");\n        String interviewDateTime = scanner.nextLine();\n\n        Printer.print(\"Enter the location for the interview: \");\n        String location = scanner.nextLine();\n\n        InterviewSchedulingBean interviewDetails = boundary.getInterviewSchedulingForm(selectedCandidate, selectedJob);\n\n        interviewDetails.setInterviewDateTime(interviewDateTime);\n        interviewDetails.setLocation(location);\n\n        boolean success = boundary.inviteCandidateToInterview(interviewDetails);\n\n        if (success) {\n            Printer.print(\"The interview invitation has been sent successfully.\");\n        } else {\n            Printer.print(\"There was an issue sending the interview invitation. Please try again.\");\n        }\n    }\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/cli/concretestate/ContactAJobCandidateRecruiterState.java b/src/main/java/org/example/togetjob/view/cli/concretestate/ContactAJobCandidateRecruiterState.java
--- a/src/main/java/org/example/togetjob/view/cli/concretestate/ContactAJobCandidateRecruiterState.java	(revision fe6e287ffe6104328c1e6d2c33f77e6ea0d421cd)
+++ b/src/main/java/org/example/togetjob/view/cli/concretestate/ContactAJobCandidateRecruiterState.java	(date 1739438412653)
@@ -4,6 +4,7 @@
 import org.example.togetjob.bean.JobAnnouncementBean;
 import org.example.togetjob.bean.StudentInfoBean;
 import org.example.togetjob.bean.StudentInfoSearchBean;
+import org.example.togetjob.exceptions.*;
 import org.example.togetjob.view.boundary.ContactAJobCandidateRecruiterBoundary;
 import org.example.togetjob.printer.Printer;
 import org.example.togetjob.view.cli.abstractstate.CliState;
@@ -217,24 +218,34 @@
 
 
     private void scheduleInterview(Scanner scanner, StudentInfoBean selectedCandidate, JobAnnouncementBean selectedJob) {
+        boolean validDate = false;
 
-        Printer.print("Enter the interview date and time (e.g., 2025-02-10T10:00): ");
-        String interviewDateTime = scanner.nextLine();
+        while (!validDate) {
+            try {
+                Printer.print("Enter the interview date and time (e.g., 2025-02-10T10:00): ");
+                String interviewDateTime = scanner.nextLine();
 
-        Printer.print("Enter the location for the interview: ");
-        String location = scanner.nextLine();
+                Printer.print("Enter the location for the interview: ");
+                String location = scanner.nextLine();
 
-        InterviewSchedulingBean interviewDetails = boundary.getInterviewSchedulingForm(selectedCandidate, selectedJob);
-
-        interviewDetails.setInterviewDateTime(interviewDateTime);
-        interviewDetails.setLocation(location);
+                InterviewSchedulingBean interviewDetails = boundary.getInterviewSchedulingForm(selectedCandidate, selectedJob);
+                interviewDetails.setInterviewDateTime(interviewDateTime);
+                interviewDetails.setLocation(location);
 
-        boolean success = boundary.inviteCandidateToInterview(interviewDetails);
-
-        if (success) {
-            Printer.print("The interview invitation has been sent successfully.");
-        } else {
-            Printer.print("There was an issue sending the interview invitation. Please try again.");
+                boolean success = boundary.inviteCandidateToInterview(interviewDetails);
+                if (success) {
+                    Printer.print("The interview invitation has been sent successfully.");
+                    validDate = true;
+                } else {
+                    Printer.print("There was an issue sending the interview invitation. Please try again.");
+                }
+            } catch (DateNotValidException e) {
+                Printer.print( e.getMessage() + ". Please enter a valid date.");
+            }catch (StudentNotFoundException | JobAnnouncementNotFoundException | JobApplicationNotFoundException |
+                    InterviewSchedulingAlreadyExistsException | NotificationException e) {
+                Printer.print(e.getMessage());
+                return; // Esce dal metodo
+            }
         }
     }
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"0f1658da-9e89-4eda-8f6e-64bb18bca7ca\" name=\"Changes\" comment=\"Registrazione e Login interfacce ok\">\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/ContactAJobCandidateState.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/FilterJobCandidateState.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/ContactAJobCandidateController.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/FilterJobCandidateRecruiterController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RecruiterDisplayFiltersState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RecruiterDisplayFiltersState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeRecruiterController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeRecruiterController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/org/example/togetjob/RecruiterCreateJobAnnouncement.fxml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/org/example/togetjob/RecruiterDisplayFilteredStudent.fxml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/filteredjobcandidates.fxml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/RecruiterDisplayFilters.fxml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/filterjobcandidatesrecruiter.fxml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/filteredjobannouncements.fxml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/filteredjobannouncements.fxml\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Enum\" />\n        <option value=\"FxmlFile\" />\n        <option value=\"Interface\" />\n        <option value=\"Exception\" />\n        <option value=\"JavaFXApplication\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"RESET_MODE\" value=\"HARD\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;GaiaMeola&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/GaiaMeola/toGetJob.git&quot;,\n    &quot;accountId&quot;: &quot;0a1af48d-9cff-4190-bde9-bd5096772376&quot;\n  }\n}</component>\n  <component name=\"HighlightingSettingsPerFile\">\n    <setting file=\"file://$PROJECT_DIR$/src/main/java/org/example/togetjob/Main.java\" root0=\"FORCE_HIGHLIGHTING\" />\n  </component>\n  <component name=\"MavenImportPreferences\">\n    <option name=\"generalSettings\">\n      <MavenGeneralSettings>\n        <option name=\"mavenHomeTypeForPersistence\" value=\"WRAPPER\" />\n      </MavenGeneralSettings>\n    </option>\n  </component>\n  <component name=\"ProblemsViewState\">\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 5\n}</component>\n  <component name=\"ProjectId\" id=\"2nypPqqlu30o2C6FKHNbd1EkQVy\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;Application.HelloApplication.executor&quot;: &quot;Run&quot;,\n    &quot;Application.Main.executor&quot;: &quot;Run&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\n    &quot;SONARLINT_PRECOMMIT_ANALYSIS&quot;: &quot;true&quot;,\n    &quot;extract.method.default.visibility&quot;: &quot;private&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/Users/gaiameola/Desktop/ISPW/toGetJob/src/main/resources/org/example/togetjob&quot;,\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.externalResources&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CreateClassDialog.RecentsKey\">\n      <recent name=\"org.example.togetjob.model.dao.concretefactorydao\" />\n    </key>\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/src/main/resources/org/example/togetjob\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml\" />\n      <recent name=\"$PROJECT_DIR$/src/main/resources/org/example/togetjob\" />\n      <recent name=\"$PROJECT_DIR$/target/classes/org/example/togetjob\" />\n      <recent name=\"$PROJECT_DIR$/target/classes/org/example/togetjob/view\" />\n      <recent name=\"$PROJECT_DIR$/src/main/resources\" />\n    </key>\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\n      <recent name=\"org.example.togetjob\" />\n    </key>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"0f1658da-9e89-4eda-8f6e-64bb18bca7ca\" name=\"Changes\" comment=\"\" />\n      <created>1729955148511</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1729955148511</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"Quarto Commit: Connection prova\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738152156784</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738152156784</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"Quarto Commit: Connection riuscita\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738152567157</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738152567157</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"Quinto Commit: Fine Db\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738157742126</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738157742126</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"Sesto Commit: Pattern State CLI prova\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738179850232</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738179850233</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"Settimo Commit: prova Caso d'uso Registrazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738233820826</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738233820826</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"Settimo Commit: prova Caso d'uso Registrazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738234210460</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738234210460</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"Settimo Commit: prova Caso d'uso Registrazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738234584655</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738234584655</updated>\n    </task>\n    <task id=\"LOCAL-00017\" summary=\"Settimo Commit: Caso d'uso Registrazione e Login iniziati\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738255911165</created>\n      <option name=\"number\" value=\"00017\" />\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738255911165</updated>\n    </task>\n    <task id=\"LOCAL-00018\" summary=\"Settimo Commit: Caso d'uso Registrazione e Login completati\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738320033356</created>\n      <option name=\"number\" value=\"00018\" />\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738320033356</updated>\n    </task>\n    <task id=\"LOCAL-00019\" summary=\"Settimo Commit: Aggiunta di HomePageStudent, HomePageRecruiter in modalità cli\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738323917280</created>\n      <option name=\"number\" value=\"00019\" />\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738323917280</updated>\n    </task>\n    <task id=\"LOCAL-00020\" summary=\"Settimo Commit: Inizio del caso d'uso Send A Job Application\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738534877519</created>\n      <option name=\"number\" value=\"00020\" />\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738534877519</updated>\n    </task>\n    <task id=\"LOCAL-00021\" summary=\"Settimo Commit: Inizio del caso d'uso Send A Job Application\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738591871116</created>\n      <option name=\"number\" value=\"00021\" />\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738591871116</updated>\n    </task>\n    <task id=\"LOCAL-00022\" summary=\"Settimo Commit: Prima parte del caso d'uso funzionante\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738602095720</created>\n      <option name=\"number\" value=\"00022\" />\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738602095720</updated>\n    </task>\n    <task id=\"LOCAL-00023\" summary=\"Settimo Commit: Prima parte del caso d'uso funzionante\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738602224321</created>\n      <option name=\"number\" value=\"00023\" />\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738602224321</updated>\n    </task>\n    <task id=\"LOCAL-00024\" summary=\"Settimo Commit: Prima parte del caso d'uso funzionante\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738602353802</created>\n      <option name=\"number\" value=\"00024\" />\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738602353802</updated>\n    </task>\n    <task id=\"LOCAL-00025\" summary=\"Send a Job Application ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738847054568</created>\n      <option name=\"number\" value=\"00025\" />\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738847054568</updated>\n    </task>\n    <task id=\"LOCAL-00026\" summary=\"Send a Job Application ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738859623269</created>\n      <option name=\"number\" value=\"00026\" />\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738859623269</updated>\n    </task>\n    <task id=\"LOCAL-00027\" summary=\"Send a Job Application ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738859799273</created>\n      <option name=\"number\" value=\"00027\" />\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738859799273</updated>\n    </task>\n    <task id=\"LOCAL-00028\" summary=\"Send a Job Application ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738925235487</created>\n      <option name=\"number\" value=\"00028\" />\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738925235487</updated>\n    </task>\n    <task id=\"LOCAL-00029\" summary=\"Send a Job Application ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738935926115</created>\n      <option name=\"number\" value=\"00029\" />\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738935926115</updated>\n    </task>\n    <task id=\"LOCAL-00030\" summary=\"Send a Job Application ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738935935523</created>\n      <option name=\"number\" value=\"00030\" />\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738935935523</updated>\n    </task>\n    <task id=\"LOCAL-00031\" summary=\"Implementazione DATABASE DAO\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738943912969</created>\n      <option name=\"number\" value=\"00031\" />\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738943912969</updated>\n    </task>\n    <task id=\"LOCAL-00032\" summary=\"Implementazione DATABASE DAO\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738945190532</created>\n      <option name=\"number\" value=\"00032\" />\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738945190532</updated>\n    </task>\n    <task id=\"LOCAL-00033\" summary=\"Fine DAO DB che va da testare\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738945926667</created>\n      <option name=\"number\" value=\"00033\" />\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738945926667</updated>\n    </task>\n    <task id=\"LOCAL-00034\" summary=\"Fine DAO DB che va da testare\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739051085131</created>\n      <option name=\"number\" value=\"00034\" />\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739051085131</updated>\n    </task>\n    <task id=\"LOCAL-00035\" summary=\"Interfacce\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739175835404</created>\n      <option name=\"number\" value=\"00035\" />\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739175835404</updated>\n    </task>\n    <task id=\"LOCAL-00036\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739220286799</created>\n      <option name=\"number\" value=\"00036\" />\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739220286800</updated>\n    </task>\n    <task id=\"LOCAL-00037\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739221026328</created>\n      <option name=\"number\" value=\"00037\" />\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739221026328</updated>\n    </task>\n    <task id=\"LOCAL-00038\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739221891152</created>\n      <option name=\"number\" value=\"00038\" />\n      <option name=\"presentableId\" value=\"LOCAL-00038\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739221891152</updated>\n    </task>\n    <task id=\"LOCAL-00039\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739222169196</created>\n      <option name=\"number\" value=\"00039\" />\n      <option name=\"presentableId\" value=\"LOCAL-00039\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739222169196</updated>\n    </task>\n    <task id=\"LOCAL-00040\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739223095546</created>\n      <option name=\"number\" value=\"00040\" />\n      <option name=\"presentableId\" value=\"LOCAL-00040\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739223095546</updated>\n    </task>\n    <task id=\"LOCAL-00041\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739223296491</created>\n      <option name=\"number\" value=\"00041\" />\n      <option name=\"presentableId\" value=\"LOCAL-00041\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739223296491</updated>\n    </task>\n    <task id=\"LOCAL-00042\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739223373958</created>\n      <option name=\"number\" value=\"00042\" />\n      <option name=\"presentableId\" value=\"LOCAL-00042\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739223373958</updated>\n    </task>\n    <task id=\"LOCAL-00043\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739224722991</created>\n      <option name=\"number\" value=\"00043\" />\n      <option name=\"presentableId\" value=\"LOCAL-00043\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739224722991</updated>\n    </task>\n    <task id=\"LOCAL-00044\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739224907675</created>\n      <option name=\"number\" value=\"00044\" />\n      <option name=\"presentableId\" value=\"LOCAL-00044\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739224907675</updated>\n    </task>\n    <task id=\"LOCAL-00045\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739225182526</created>\n      <option name=\"number\" value=\"00045\" />\n      <option name=\"presentableId\" value=\"LOCAL-00045\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739225182526</updated>\n    </task>\n    <task id=\"LOCAL-00046\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739227822961</created>\n      <option name=\"number\" value=\"00046\" />\n      <option name=\"presentableId\" value=\"LOCAL-00046\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739227822961</updated>\n    </task>\n    <task id=\"LOCAL-00047\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739228938425</created>\n      <option name=\"number\" value=\"00047\" />\n      <option name=\"presentableId\" value=\"LOCAL-00047\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739228938425</updated>\n    </task>\n    <task id=\"LOCAL-00048\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739229738949</created>\n      <option name=\"number\" value=\"00048\" />\n      <option name=\"presentableId\" value=\"LOCAL-00048\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739229738949</updated>\n    </task>\n    <task id=\"LOCAL-00049\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739230414467</created>\n      <option name=\"number\" value=\"00049\" />\n      <option name=\"presentableId\" value=\"LOCAL-00049\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739230414467</updated>\n    </task>\n    <task id=\"LOCAL-00050\" summary=\"commit\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739286252185</created>\n      <option name=\"number\" value=\"00050\" />\n      <option name=\"presentableId\" value=\"LOCAL-00050\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739286252186</updated>\n    </task>\n    <task id=\"LOCAL-00051\" summary=\"commit\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739286944297</created>\n      <option name=\"number\" value=\"00051\" />\n      <option name=\"presentableId\" value=\"LOCAL-00051\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739286944297</updated>\n    </task>\n    <task id=\"LOCAL-00052\" summary=\"commit\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739287156849</created>\n      <option name=\"number\" value=\"00052\" />\n      <option name=\"presentableId\" value=\"LOCAL-00052\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739287156850</updated>\n    </task>\n    <task id=\"LOCAL-00053\" summary=\"Prova: aggiunta di alcune eccezioni\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739296769628</created>\n      <option name=\"number\" value=\"00053\" />\n      <option name=\"presentableId\" value=\"LOCAL-00053\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739296769628</updated>\n    </task>\n    <task id=\"LOCAL-00054\" summary=\"Registrazione e Login interfacce ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739356293943</created>\n      <option name=\"number\" value=\"00054\" />\n      <option name=\"presentableId\" value=\"LOCAL-00054\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739356293944</updated>\n    </task>\n    <task id=\"LOCAL-00055\" summary=\"Registrazione e Login interfacce ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739360362489</created>\n      <option name=\"number\" value=\"00055\" />\n      <option name=\"presentableId\" value=\"LOCAL-00055\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739360362489</updated>\n    </task>\n    <task id=\"LOCAL-00056\" summary=\"Registrazione e Login interfacce ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739360704403</created>\n      <option name=\"number\" value=\"00056\" />\n      <option name=\"presentableId\" value=\"LOCAL-00056\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739360704404</updated>\n    </task>\n    <task id=\"LOCAL-00057\" summary=\"Registrazione e Login interfacce ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739374755923</created>\n      <option name=\"number\" value=\"00057\" />\n      <option name=\"presentableId\" value=\"LOCAL-00057\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739374755923</updated>\n    </task>\n    <task id=\"LOCAL-00058\" summary=\"Registrazione e Login interfacce ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739397926768</created>\n      <option name=\"number\" value=\"00058\" />\n      <option name=\"presentableId\" value=\"LOCAL-00058\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739397926768</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"59\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Primo Commit\" />\n    <MESSAGE value=\"Secondo Commit: bozza Abstract Factory\" />\n    <MESSAGE value=\"Secondo Commit: Abstract Factory + Singleton completo\" />\n    <MESSAGE value=\"Terzo Commit: Aggiunta Entity\" />\n    <MESSAGE value=\"Terzo Commit: Prova Database\" />\n    <MESSAGE value=\"Quarto Commit: Connection prova\" />\n    <MESSAGE value=\"Quarto Commit: Connection riuscita\" />\n    <MESSAGE value=\"Quinto Commit: Fine Db\" />\n    <MESSAGE value=\"Sesto Commit: Pattern State CLI prova\" />\n    <MESSAGE value=\"Settimo Commit: prova Caso d'uso Registrazione\" />\n    <MESSAGE value=\"Settimo Commit: Caso d'uso Registrazione e Login iniziati\" />\n    <MESSAGE value=\"Settimo Commit: Caso d'uso Registrazione e Login completati\" />\n    <MESSAGE value=\"Settimo Commit: Aggiunta di HomePageStudent, HomePageRecruiter in modalità cli\" />\n    <MESSAGE value=\"Settimo Commit: Inizio del caso d'uso Send A Job Application\" />\n    <MESSAGE value=\"Settimo Commit: Prima parte del caso d'uso funzionante\" />\n    <MESSAGE value=\"Send a Job Application ok\" />\n    <MESSAGE value=\"Implementazione DATABASE DAO\" />\n    <MESSAGE value=\"Fine DAO DB che va da testare\" />\n    <MESSAGE value=\"Interfacce\" />\n    <MESSAGE value=\"Duplicazione\" />\n    <MESSAGE value=\"commit\" />\n    <MESSAGE value=\"Prova: aggiunta di alcune eccezioni\" />\n    <MESSAGE value=\"Registrazione e Login interfacce ok\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Registrazione e Login interfacce ok\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\">\n          <properties class=\"java.lang.NullPointerException\" package=\"java.lang\" />\n          <option name=\"timeStamp\" value=\"14\" />\n        </breakpoint>\n        <breakpoint enabled=\"true\" type=\"java-exception\">\n          <properties class=\"java.sql.SQLException\" package=\"java.sql\" />\n          <option name=\"timeStamp\" value=\"31\" />\n        </breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision fe6e287ffe6104328c1e6d2c33f77e6ea0d421cd)
+++ b/.idea/workspace.xml	(date 1739452730270)
@@ -5,17 +5,29 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="0f1658da-9e89-4eda-8f6e-64bb18bca7ca" name="Changes" comment="Registrazione e Login interfacce ok">
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/ContactAJobCandidateState.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/FilterJobCandidateState.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/ContactAJobCandidateController.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/FilterJobCandidateRecruiterController.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/exceptions/DateNotValidException.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/exceptions/InterviewSchedulingAlreadyExistsException.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/exceptions/InterviewSchedulingNotFoundException.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/exceptions/JobApplicationNotFoundException.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RecruiterDisplayFiltersState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RecruiterDisplayFiltersState.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeRecruiterController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeRecruiterController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/org/example/togetjob/RecruiterCreateJobAnnouncement.fxml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/org/example/togetjob/RecruiterDisplayFilteredStudent.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/filteredjobcandidates.fxml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/RecruiterDisplayFilters.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/filterjobcandidatesrecruiter.fxml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/filteredjobannouncements.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/filteredjobannouncements.fxml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/controller/registration/AbstractRegisterController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/controller/registration/AbstractRegisterController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/controller/registration/RegisterRecruiterController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/controller/registration/RegisterRecruiterController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/controller/student/SendAJobApplication.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/controller/student/SendAJobApplication.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/exceptions/JobAnnouncementNotFoundException.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/exceptions/JobAnnouncementNotFoundException.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/model/dao/concreteobjects/DataBaseStudentDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/model/dao/concreteobjects/DataBaseStudentDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/model/dao/concreteobjects/DataBaseUserDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/model/dao/concreteobjects/DataBaseUserDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/pattern/adapter/ContactAJobCandidateAdapter.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/pattern/adapter/ContactAJobCandidateAdapter.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/boundary/ContactAJobCandidateRecruiterBoundary.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/boundary/ContactAJobCandidateRecruiterBoundary.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/boundary/ContactAJobCandidateStudentBoundary.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/boundary/ContactAJobCandidateStudentBoundary.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/boundary/RegisterBoundary.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/boundary/RegisterBoundary.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationRecruiterBoundary.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationRecruiterBoundary.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationStudentBoundary.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationStudentBoundary.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/ContactAJobCandidateRecruiterState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/ContactAJobCandidateRecruiterState.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/HomeStudentState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/HomeStudentState.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/RegisterState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/RegisterState.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationRecruiterState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationRecruiterState.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationStudentState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationStudentState.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/ui.config.properties" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/ui.config.properties" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -28,9 +40,8 @@
         <option value="Enum" />
         <option value="FxmlFile" />
         <option value="Interface" />
-        <option value="Exception" />
-        <option value="JavaFXApplication" />
         <option value="Class" />
+        <option value="Exception" />
       </list>
     </option>
   </component>
@@ -98,10 +109,10 @@
       <recent name="$PROJECT_DIR$/src/main/resources/org/example/togetjob" />
     </key>
     <key name="MoveFile.RECENT_KEYS">
-      <recent name="$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml" />
-      <recent name="$PROJECT_DIR$/src/main/resources/org/example/togetjob" />
       <recent name="$PROJECT_DIR$/target/classes/org/example/togetjob" />
       <recent name="$PROJECT_DIR$/target/classes/org/example/togetjob/view" />
+      <recent name="$PROJECT_DIR$/src/main/resources/org/example/togetjob" />
+      <recent name="$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml" />
       <recent name="$PROJECT_DIR$/src/main/resources" />
     </key>
     <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
@@ -116,14 +127,6 @@
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
       <updated>1729955148511</updated>
-    </task>
-    <task id="LOCAL-00010" summary="Quarto Commit: Connection prova">
-      <option name="closed" value="true" />
-      <created>1738152156784</created>
-      <option name="number" value="00010" />
-      <option name="presentableId" value="LOCAL-00010" />
-      <option name="project" value="LOCAL" />
-      <updated>1738152156784</updated>
     </task>
     <task id="LOCAL-00011" summary="Quarto Commit: Connection riuscita">
       <option name="closed" value="true" />
@@ -503,13 +506,21 @@
     </task>
     <task id="LOCAL-00058" summary="Registrazione e Login interfacce ok">
       <option name="closed" value="true" />
-      <created>1739397926768</created>
+      <created>1739375512378</created>
       <option name="number" value="00058" />
       <option name="presentableId" value="LOCAL-00058" />
       <option name="project" value="LOCAL" />
-      <updated>1739397926768</updated>
+      <updated>1739375512378</updated>
     </task>
-    <option name="localTasksCounter" value="59" />
+    <task id="LOCAL-00059" summary="Registrazione e Login interfacce ok">
+      <option name="closed" value="true" />
+      <created>1739379852985</created>
+      <option name="number" value="00059" />
+      <option name="presentableId" value="LOCAL-00059" />
+      <option name="project" value="LOCAL" />
+      <updated>1739379852985</updated>
+    </task>
+    <option name="localTasksCounter" value="60" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
Index: src/main/resources/ui.config.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># cli, gui\nui.type = gui
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/ui.config.properties b/src/main/resources/ui.config.properties
--- a/src/main/resources/ui.config.properties	(revision fe6e287ffe6104328c1e6d2c33f77e6ea0d421cd)
+++ b/src/main/resources/ui.config.properties	(date 1739440729222)
@@ -1,2 +1,2 @@
 # cli, gui
-ui.type = gui
\ No newline at end of file
+ui.type = cli
\ No newline at end of file
Index: src/main/java/org/example/togetjob/controller/student/SendAJobApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.controller.student;\n\nimport org.example.togetjob.bean.JobAnnouncementBean;\nimport org.example.togetjob.bean.JobAnnouncementSearchBean;\nimport org.example.togetjob.bean.JobApplicationBean;\nimport org.example.togetjob.exceptions.*;\nimport org.example.togetjob.model.dao.abstractfactorydao.AbstractFactoryDaoSingleton;\nimport org.example.togetjob.model.dao.abstractobjects.JobAnnouncementDao;\nimport org.example.togetjob.model.dao.abstractobjects.JobApplicationDao;\nimport org.example.togetjob.model.dao.abstractobjects.RecruiterDao;\nimport org.example.togetjob.model.entity.*;\nimport org.example.togetjob.model.factory.JobApplicationFactory;\nimport org.example.togetjob.model.factory.NotificationFactory;\nimport org.example.togetjob.pattern.observer.RecruiterObserverStudent;\nimport org.example.togetjob.pattern.subject.JobApplicationCollectionSubjectRecruiter;\nimport org.example.togetjob.session.SessionManager;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class SendAJobApplication {\n\n    private final JobAnnouncementDao jobAnnouncementDao;\n    private final JobApplicationDao jobApplicationDao;\n    private final RecruiterDao recruiterDao;\n    private final JobApplicationCollectionSubjectRecruiter jobApplicationCollection;\n\n    public SendAJobApplication() {\n        this.jobAnnouncementDao = AbstractFactoryDaoSingleton.getFactoryDao().createJobAnnouncementDao();\n        this.jobApplicationDao = AbstractFactoryDaoSingleton.getFactoryDao().createJobApplicationDao();\n        this.recruiterDao = AbstractFactoryDaoSingleton.getFactoryDao().createRecruiterDao();\n        this.jobApplicationCollection = new JobApplicationCollectionSubjectRecruiter();\n    }\n\n    public List<JobAnnouncementBean> showFilteredJobAnnouncements(JobAnnouncementSearchBean jobAnnouncementSearchBean) {\n        //all job announcements\n        List<JobAnnouncement> allAnnouncements = jobAnnouncementDao.getAllJobAnnouncements();\n\n        List<JobAnnouncement> filteredAnnouncements = allAnnouncements.stream()\n                .filter(announcement -> filterByTitle(announcement, jobAnnouncementSearchBean.getJobTitle()))\n                .filter(announcement -> filterByJobType(announcement, jobAnnouncementSearchBean.getJobType()))\n                .filter(announcement -> filterByRole(announcement, jobAnnouncementSearchBean.getRole()))\n                .filter(announcement -> filterByLocation(announcement, jobAnnouncementSearchBean.getLocation()))\n                .filter(announcement -> filterByWorkingHours(announcement, jobAnnouncementSearchBean.getWorkingHours()))\n                .filter(announcement -> filterByCompanyName(announcement, jobAnnouncementSearchBean.getCompanyName()))\n                .filter(announcement -> filterBySalary(announcement, jobAnnouncementSearchBean.getSalary()))\n                .toList();\n\n        return filteredAnnouncements.stream()\n                .map(this::convertToJobAnnouncementBean)\n                .toList();\n\n    }\n\n    private JobAnnouncementBean convertToJobAnnouncementBean(JobAnnouncement jobAnnouncement) {\n\n        JobAnnouncementBean jobAnnouncementBean = new JobAnnouncementBean();\n\n        jobAnnouncementBean.setJobTitle(jobAnnouncement.obtainJobTitle() != null ? jobAnnouncement.obtainJobTitle() : \"Unknown Title\");\n        jobAnnouncementBean.setJobType(jobAnnouncement.obtainJobType() != null ? jobAnnouncement.obtainJobType() : \"Unknown Type\");\n        jobAnnouncementBean.setRole(jobAnnouncement.obtainJobRole() != null ? jobAnnouncement.obtainJobRole() : \"Unknown Role\");\n        jobAnnouncementBean.setLocation(jobAnnouncement.obtainLocation() != null ? jobAnnouncement.obtainLocation() : \"Unknown Location\");\n        jobAnnouncementBean.setCompanyName(jobAnnouncement.obtainCompanyName() != null ? jobAnnouncement.obtainCompanyName() : \"Unknown Company\");\n        jobAnnouncementBean.setDescription(jobAnnouncement.obtainDescription() != null ? jobAnnouncement.obtainDescription() : \"No Description\");\n\n\n        //map\n        jobAnnouncementBean.setActive(jobAnnouncement.isJobActive() != null && jobAnnouncement.isJobActive());\n        jobAnnouncementBean.setRecruiterUsername(jobAnnouncement.getRecruiter().obtainUsername());\n        jobAnnouncementBean.setWorkingHours(jobAnnouncement.obtainWorkingHours() != 0 ? String.valueOf(jobAnnouncement.obtainWorkingHours()) : \"Not Defined\");\n        jobAnnouncementBean.setSalary(jobAnnouncement.obtainSalary() != 0.0 ? String.valueOf(jobAnnouncement.obtainSalary()) : \"Not Defined\");\n\n        return jobAnnouncementBean;\n\n    }\n\n    private List<JobApplicationBean> convertToJobApplicationBeans(List<JobApplication> jobApplications) {\n        List<JobApplicationBean> jobApplicationBeans = new ArrayList<>();\n\n        for (JobApplication jobApplication : jobApplications) {\n            JobApplicationBean jobApplicationBean = new JobApplicationBean();\n\n            jobApplicationBean.setJobTitle(jobApplication.getJobAnnouncement().obtainJobTitle());\n            jobApplicationBean.setStudentUsername(jobApplication.getStudent().obtainUsername());\n            jobApplicationBean.setCoverLetter(jobApplication.obtainCoverLetter());\n            jobApplicationBean.setRecruiterUsername(jobApplication.getJobAnnouncement().getRecruiter().obtainUsername());\n            jobApplicationBean.setStatus(jobApplication.obtainStatus());\n            jobApplicationBeans.add(jobApplicationBean);\n        }\n\n        return jobApplicationBeans;\n    }\n\n    public JobApplicationBean showJobApplicationForm(JobAnnouncementBean jobAnnouncementBean) {\n\n        JobApplicationBean form = new JobApplicationBean();\n\n        form.setJobTitle(jobAnnouncementBean.getJobTitle());\n        form.setRecruiterUsername(jobAnnouncementBean.getRecruiterUsername());\n        form.setStatus(Status.PENDING);\n        form.setStudentUsername(SessionManager.getInstance().getStudentFromSession().obtainUsername());\n\n        form.setCoverLetter(\"\");\n        return form;\n    }\n\n    public boolean sendAJobApplication(JobApplicationBean jobApplicationBean) {\n\n\n        // Student who wants to send a job application to a job announcement\n        Student student = SessionManager.getInstance().getStudentFromSession();\n\n        //Recruiter who publishes the job announcement\n        Recruiter recruiter = recruiterDao.getRecruiter(jobApplicationBean.getRecruiterUsername())\n                .orElseThrow(() -> new IllegalArgumentException(\"Error: Recruiter not found.\"));\n\n        // Job Announcement\n        JobAnnouncement jobAnnouncement = jobAnnouncementDao.getJobAnnouncement(jobApplicationBean.getJobTitle(), recruiter)\n                .orElseThrow(() -> new IllegalArgumentException(\"Error: JobAnnouncement not found.\")); // Job Announcement Found\n\n        // Check if the job announcement is still active\n        if (jobAnnouncement.isJobActive() == null || !jobAnnouncement.isJobActive()) {\n            throw new JobAnnouncementNotActiveException(\"This job announcement is no longer active.\");\n        }\n\n        // Check if the student has already applied for this job\n        if (jobApplicationDao.getJobApplication(student, jobAnnouncement).isPresent()) {\n            throw new JobApplicationAlreadySentException(\"You have already applied for this job.\");\n        }\n\n        JobApplication jobApplication = JobApplicationFactory.createJobApplication(student, jobApplicationBean.getCoverLetter(), jobAnnouncement);\n        jobApplicationDao.saveJobApplication(jobApplication); // Persistence\n\n        try {\n            RecruiterObserverStudent recruiterObserver = new RecruiterObserverStudent(recruiter, NotificationFactory.createNotification(\"A new job application has been submitted!\"));\n            jobApplicationCollection.attach(recruiterObserver);\n        } catch (ConfigException e) {\n            throw new RuntimeException(e);\n        }\n\n        try {\n            sendNotificationToRecruiter(jobApplication);\n        } catch (NotificationException e) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public List<JobApplicationBean> getAllJobApplication(){\n\n        Student student = SessionManager.getInstance().getStudentFromSession();\n\n        List<JobApplication> jobApplications = jobApplicationDao.getAllJobApplications(student);\n        return convertToJobApplicationBeans(jobApplications);\n\n    }\n\n    public boolean modifyJobApplication(JobApplicationBean jobApplicationBean) {\n\n        Status status = getStatusJobApplication(jobApplicationBean);\n\n        if (status.equals(Status.PENDING)) {\n            Optional<JobApplication> jobApplicationOPT = getJobApplication(jobApplicationBean);\n            //Job application existing\n\n            if (jobApplicationOPT.isEmpty()) {\n                return false;\n            }\n\n            JobApplication jobApplication = jobApplicationOPT.get();\n            jobApplication.setCoverLetter(jobApplicationBean.getCoverLetter());  // Modify\n            jobApplicationDao.saveJobApplication(jobApplication);\n            return true;\n        }\n\n        return false;\n    }\n\n\n    public boolean deleteJobApplication(JobApplicationBean jobApplicationBean) {\n\n        Optional<JobApplication> jobApplicationOPT = getJobApplication(jobApplicationBean);\n\n        if (jobApplicationOPT.isEmpty()) {\n            return false;\n        }\n\n        JobApplication jobApplication = jobApplicationOPT.get();\n\n        if (!jobApplication.obtainStatus().equals(Status.PENDING)) {\n            return false; //job application already managed\n        }\n\n        jobApplicationDao.deleteJobApplication(jobApplication);\n        jobApplicationCollection.removeJobApplication(jobApplication);\n\n        return true;\n\n    }\n\n    public List<JobApplicationBean> getJobApplicationsForRecruiter(JobAnnouncementBean jobAnnouncementBean){\n\n        Recruiter recruiter = SessionManager.getInstance().getRecruiterFromSession();\n\n        Optional<JobAnnouncement> jobAnnouncementOpt = jobAnnouncementDao.getJobAnnouncement(jobAnnouncementBean.getJobTitle(), recruiter);\n        if (jobAnnouncementOpt.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        JobAnnouncement jobAnnouncement = jobAnnouncementOpt.get();\n\n        // all the job applications sent to the job announcement\n        List<JobApplication> jobApplications = jobApplicationDao.getJobApplicationsByAnnouncement(jobAnnouncement);\n        return convertToJobApplicationBeans(jobApplications);\n\n    }\n\n\n    public boolean updateJobApplicationStatus(JobApplicationBean jobApplicationBean, Status status) {\n\n\n        JobAnnouncement jobAnnouncement = getJobAnnouncementFromBean(jobApplicationBean);\n\n        List<JobApplication> jobApplications = jobApplicationDao.getJobApplicationsByAnnouncement(jobAnnouncement);\n        Optional<JobApplication> jobApplicationOpt = jobApplications.stream()\n                .filter(jobApplication -> jobApplication.getStudent().obtainUsername().equals(jobApplicationBean.getStudentUsername()))\n                .findFirst();\n        if (jobApplicationOpt.isEmpty()) {\n            throw new IllegalArgumentException(\"Error: Job Application not found for the specified student.\");\n        }\n        JobApplication jobApplication = jobApplicationOpt.get();\n        if (!jobApplication.obtainStatus().equals(Status.PENDING)) {\n            return false; // Already Managed\n        }\n        jobApplication.setStatus(status); // (ACCEPTED or REJECTED)\n        jobApplicationDao.updateJobApplication(jobApplication);\n\n        return true;\n\n    }\n\n\n    private JobAnnouncement getJobAnnouncementFromBean(JobApplicationBean jobApplicationBean) {\n        //recruiter from session\n        Recruiter recruiter = SessionManager.getInstance().getRecruiterFromSession();\n\n        // job announcement\n        Optional<JobAnnouncement> jobAnnouncementOpt = jobAnnouncementDao.getJobAnnouncement(jobApplicationBean.getJobTitle(), recruiter);\n\n        if (jobAnnouncementOpt.isEmpty()) {\n            throw new IllegalArgumentException(\"Error: No job announcement found for the recruiter with the specified title.\");\n        }\n\n        return jobAnnouncementOpt.get();\n    }\n\n\n\n    private void sendNotificationToRecruiter(JobApplication jobApplication) throws NotificationException {\n\n        try {\n            jobApplicationCollection.addJobApplication(jobApplication); // notify\n        } catch (NotificationException e) {\n            throw new NotificationException(\"Error during the configuration\", e);\n        }\n\n    }\n\n    private Optional<JobApplication> getJobApplication(JobApplicationBean jobApplicationBean) {\n        Student student = SessionManager.getInstance().getStudentFromSession();\n        Recruiter recruiter = recruiterDao.getRecruiter(jobApplicationBean.getRecruiterUsername())\n                .orElseThrow(() -> new IllegalArgumentException(\"Error: Recruiter not found.\"));\n        JobAnnouncement jobAnnouncement = jobAnnouncementDao.getJobAnnouncement(jobApplicationBean.getJobTitle(), recruiter)\n                .orElseThrow(() -> new IllegalArgumentException(\"Error: Job Announcement not found.\"));\n        return jobApplicationDao.getJobApplication(student, jobAnnouncement);\n    }\n\n\n    private Status getStatusJobApplication(JobApplicationBean jobApplicationBean) {\n\n        Optional<JobApplication> jobApplicationOpt = getJobApplication(jobApplicationBean);\n        if (jobApplicationOpt.isEmpty()) {\n\n            throw new IllegalArgumentException(\"Error: job Application not Found.\");\n\n        }\n\n        JobApplication jobApplication = jobApplicationOpt.get();\n        return jobApplication.obtainStatus();\n\n    }\n\n    //method to filter\n\n    private boolean filterByTitle(JobAnnouncement announcement, String jobTitle) {\n        return jobTitle == null || jobTitle.isEmpty() || announcement.obtainJobTitle().toLowerCase().contains(jobTitle.toLowerCase());\n    }\n\n    private boolean filterByLocation(JobAnnouncement announcement, String location) {\n        return location == null || location.isEmpty() || announcement.obtainLocation().toLowerCase().contains(location.toLowerCase());\n    }\n\n    private boolean filterByRole(JobAnnouncement announcement, String role) {\n        return role == null || role.isEmpty() || announcement.obtainJobRole().toLowerCase().contains(role.toLowerCase());\n    }\n\n    private boolean filterByJobType(JobAnnouncement announcement, String jobType) {\n        return jobType == null || jobType.isEmpty() || announcement.obtainJobType().toLowerCase().contains(jobType.toLowerCase());\n    }\n\n    private boolean filterBySalary(JobAnnouncement announcement, String salary) {\n        if (salary == null || salary.isEmpty()) {\n            return true; //no filter\n        }\n        try {\n            double salaryFilter = Double.parseDouble(salary);\n            return announcement.obtainSalary() >= salaryFilter;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n\n    private boolean filterByWorkingHours(JobAnnouncement announcement, String workingHours) {\n        if (workingHours == null || workingHours.isEmpty()) {\n            return true; //no filter\n        }\n        try {\n            int workingHoursFilter = Integer.parseInt(workingHours);\n            return announcement.obtainWorkingHours() >= workingHoursFilter;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n\n    private boolean filterByCompanyName(JobAnnouncement announcement, String companyName) {\n        return companyName == null || companyName.isEmpty() || announcement.obtainCompanyName().toLowerCase().contains(companyName.toLowerCase());\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/controller/student/SendAJobApplication.java b/src/main/java/org/example/togetjob/controller/student/SendAJobApplication.java
--- a/src/main/java/org/example/togetjob/controller/student/SendAJobApplication.java	(revision fe6e287ffe6104328c1e6d2c33f77e6ea0d421cd)
+++ b/src/main/java/org/example/togetjob/controller/student/SendAJobApplication.java	(date 1739445132972)
@@ -105,7 +105,7 @@
         return form;
     }
 
-    public boolean sendAJobApplication(JobApplicationBean jobApplicationBean) {
+    public boolean sendAJobApplication(JobApplicationBean jobApplicationBean) throws RecruiterNotFoundException , JobAnnouncementNotFoundException , JobAnnouncementNotActiveException , JobApplicationAlreadySentException {
 
 
         // Student who wants to send a job application to a job announcement
@@ -113,11 +113,11 @@
 
         //Recruiter who publishes the job announcement
         Recruiter recruiter = recruiterDao.getRecruiter(jobApplicationBean.getRecruiterUsername())
-                .orElseThrow(() -> new IllegalArgumentException("Error: Recruiter not found."));
+                .orElseThrow(() -> new RecruiterNotFoundException("Error: Recruiter not found."));
 
         // Job Announcement
         JobAnnouncement jobAnnouncement = jobAnnouncementDao.getJobAnnouncement(jobApplicationBean.getJobTitle(), recruiter)
-                .orElseThrow(() -> new IllegalArgumentException("Error: JobAnnouncement not found.")); // Job Announcement Found
+                .orElseThrow(() -> new JobAnnouncementNotFoundException("Error: JobAnnouncement not found.")); // Job Announcement Found
 
         // Check if the job announcement is still active
         if (jobAnnouncement.isJobActive() == null || !jobAnnouncement.isJobActive()) {
@@ -218,7 +218,7 @@
     }
 
 
-    public boolean updateJobApplicationStatus(JobApplicationBean jobApplicationBean, Status status) {
+    public boolean updateJobApplicationStatus(JobApplicationBean jobApplicationBean, Status status) throws JobApplicationNotFoundException {
 
 
         JobAnnouncement jobAnnouncement = getJobAnnouncementFromBean(jobApplicationBean);
@@ -228,7 +228,7 @@
                 .filter(jobApplication -> jobApplication.getStudent().obtainUsername().equals(jobApplicationBean.getStudentUsername()))
                 .findFirst();
         if (jobApplicationOpt.isEmpty()) {
-            throw new IllegalArgumentException("Error: Job Application not found for the specified student.");
+            throw new JobApplicationNotFoundException("Error: Job Application not found for the specified student.");
         }
         JobApplication jobApplication = jobApplicationOpt.get();
         if (!jobApplication.obtainStatus().equals(Status.PENDING)) {
Index: src/main/java/org/example/togetjob/controller/registration/RegisterRecruiterController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.controller.registration;\n\nimport org.example.togetjob.bean.RecruiterInfoBean;\nimport org.example.togetjob.bean.RegisterUserBean;\nimport org.example.togetjob.model.dao.abstractfactorydao.AbstractFactoryDaoSingleton;\nimport org.example.togetjob.model.dao.abstractobjects.RecruiterDao;\nimport org.example.togetjob.model.entity.Recruiter;\nimport org.example.togetjob.model.entity.Role;\nimport org.example.togetjob.model.entity.User;\n\npublic class RegisterRecruiterController extends AbstractRegisterController{\n\n    private final RecruiterDao recruiterDao;\n    private final RecruiterInfoBean recruiterInfoBean;\n\n    public RegisterRecruiterController(RecruiterInfoBean recruiterInfoBean){\n        this.recruiterDao = AbstractFactoryDaoSingleton.getFactoryDao().createRecruiterDao();\n        this.recruiterInfoBean = recruiterInfoBean;\n    }\n\n    @Override\n    protected User createUser(RegisterUserBean userBean) {\n        return new Recruiter(\n                userBean.getName(), userBean.getSurname(), userBean.getUsername(), userBean.getEmailAddress(), userBean.getPassword(), Role.RECRUITER, recruiterInfoBean.getCompanies()\n        );\n    }\n\n    @Override\n    protected void saveUserSpecificData(User user) {\n        recruiterDao.saveRecruiter((Recruiter) user);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/controller/registration/RegisterRecruiterController.java b/src/main/java/org/example/togetjob/controller/registration/RegisterRecruiterController.java
--- a/src/main/java/org/example/togetjob/controller/registration/RegisterRecruiterController.java	(revision fe6e287ffe6104328c1e6d2c33f77e6ea0d421cd)
+++ b/src/main/java/org/example/togetjob/controller/registration/RegisterRecruiterController.java	(date 1739452730223)
@@ -2,6 +2,7 @@
 
 import org.example.togetjob.bean.RecruiterInfoBean;
 import org.example.togetjob.bean.RegisterUserBean;
+import org.example.togetjob.exceptions.DatabaseException;
 import org.example.togetjob.model.dao.abstractfactorydao.AbstractFactoryDaoSingleton;
 import org.example.togetjob.model.dao.abstractobjects.RecruiterDao;
 import org.example.togetjob.model.entity.Recruiter;
@@ -13,7 +14,7 @@
     private final RecruiterDao recruiterDao;
     private final RecruiterInfoBean recruiterInfoBean;
 
-    public RegisterRecruiterController(RecruiterInfoBean recruiterInfoBean){
+    public RegisterRecruiterController(RecruiterInfoBean recruiterInfoBean) throws DatabaseException {
         this.recruiterDao = AbstractFactoryDaoSingleton.getFactoryDao().createRecruiterDao();
         this.recruiterInfoBean = recruiterInfoBean;
     }
Index: src/main/java/org/example/togetjob/controller/registration/AbstractRegisterController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.controller.registration;\n\nimport org.example.togetjob.bean.RegisterUserBean;\nimport org.example.togetjob.exceptions.UsernameTakeException;\nimport org.example.togetjob.model.dao.abstractfactorydao.AbstractFactoryDaoSingleton;\nimport org.example.togetjob.model.dao.abstractobjects.UserDao;\nimport org.example.togetjob.model.entity.User;\n\npublic abstract class AbstractRegisterController {\n\n    protected final UserDao userDao;\n\n    protected AbstractRegisterController(){\n        this.userDao = AbstractFactoryDaoSingleton.getFactoryDao().createUserDao();\n    }\n\n    public boolean registerUser(RegisterUserBean userBean) throws UsernameTakeException {\n        if(userDao.userExists(userBean.getUsername())){\n            throw new UsernameTakeException(\"Sorry, username \" + userBean.getUsername() + \" is already taken. Please select another one !\"); //User already exists\n        }\n\n        User user = createUser(userBean);\n        boolean saved = userDao.saveUser(user);\n\n        if(saved){\n            saveUserSpecificData(user);\n        }\n\n        return saved;\n    }\n\n    protected abstract User createUser(RegisterUserBean userBean);\n\n    protected abstract void saveUserSpecificData(User user);\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/controller/registration/AbstractRegisterController.java b/src/main/java/org/example/togetjob/controller/registration/AbstractRegisterController.java
--- a/src/main/java/org/example/togetjob/controller/registration/AbstractRegisterController.java	(revision fe6e287ffe6104328c1e6d2c33f77e6ea0d421cd)
+++ b/src/main/java/org/example/togetjob/controller/registration/AbstractRegisterController.java	(date 1739452730226)
@@ -1,6 +1,7 @@
 package org.example.togetjob.controller.registration;
 
 import org.example.togetjob.bean.RegisterUserBean;
+import org.example.togetjob.exceptions.DatabaseException;
 import org.example.togetjob.exceptions.UsernameTakeException;
 import org.example.togetjob.model.dao.abstractfactorydao.AbstractFactoryDaoSingleton;
 import org.example.togetjob.model.dao.abstractobjects.UserDao;
@@ -14,7 +15,7 @@
         this.userDao = AbstractFactoryDaoSingleton.getFactoryDao().createUserDao();
     }
 
-    public boolean registerUser(RegisterUserBean userBean) throws UsernameTakeException {
+    public boolean registerUser(RegisterUserBean userBean) throws UsernameTakeException , DatabaseException {
         if(userDao.userExists(userBean.getUsername())){
             throw new UsernameTakeException("Sorry, username " + userBean.getUsername() + " is already taken. Please select another one !"); //User already exists
         }
Index: src/main/java/org/example/togetjob/exceptions/JobAnnouncementNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.exceptions;\n\npublic class JobAnnouncementNotFoundException extends RuntimeException {\n\n  public JobAnnouncementNotFoundException(String message) {\n        super(message);\n    }\n\n    public JobAnnouncementNotFoundException(String message, Throwable cause) {\n    super(message, cause);\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/exceptions/JobAnnouncementNotFoundException.java b/src/main/java/org/example/togetjob/exceptions/JobAnnouncementNotFoundException.java
--- a/src/main/java/org/example/togetjob/exceptions/JobAnnouncementNotFoundException.java	(revision fe6e287ffe6104328c1e6d2c33f77e6ea0d421cd)
+++ b/src/main/java/org/example/togetjob/exceptions/JobAnnouncementNotFoundException.java	(date 1739437162175)
@@ -6,7 +6,4 @@
         super(message);
     }
 
-    public JobAnnouncementNotFoundException(String message, Throwable cause) {
-    super(message, cause);
-  }
 }
Index: src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationStudentBoundary.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.boundary;\n\nimport org.example.togetjob.bean.JobAnnouncementBean;\nimport org.example.togetjob.bean.JobAnnouncementSearchBean;\nimport org.example.togetjob.bean.JobApplicationBean;\nimport org.example.togetjob.controller.student.SendAJobApplication;\n\nimport java.util.List;\n\npublic class SendAJobApplicationStudentBoundary {\n\n    private final SendAJobApplication controller;\n\n    public SendAJobApplicationStudentBoundary(){\n        this.controller = new SendAJobApplication();\n    }\n\n    public List<JobAnnouncementBean> getJobAnnouncements(JobAnnouncementSearchBean jobAnnouncementSearchBean){\n        return controller.showFilteredJobAnnouncements(jobAnnouncementSearchBean);\n    }\n\n    public JobApplicationBean fillJobApplicationForm(JobAnnouncementBean jobAnnouncementBean){\n        return controller.showJobApplicationForm(jobAnnouncementBean);\n    }\n\n    public boolean sendAJobApplication(JobApplicationBean jobApplicationBean){\n        return controller.sendAJobApplication(jobApplicationBean);\n    }\n\n    public List<JobApplicationBean> getJobApplicationsByStudent() {\n        return controller.getAllJobApplication();\n    }\n\n    public boolean modifyAJobApplication(JobApplicationBean jobApplicationBean){\n        return controller.modifyJobApplication(jobApplicationBean);\n    }\n\n    public boolean deleteAJobApplication(JobApplicationBean jobApplicationBean){\n        return controller.deleteJobApplication(jobApplicationBean);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationStudentBoundary.java b/src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationStudentBoundary.java
--- a/src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationStudentBoundary.java	(revision fe6e287ffe6104328c1e6d2c33f77e6ea0d421cd)
+++ b/src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationStudentBoundary.java	(date 1739443985466)
@@ -4,6 +4,10 @@
 import org.example.togetjob.bean.JobAnnouncementSearchBean;
 import org.example.togetjob.bean.JobApplicationBean;
 import org.example.togetjob.controller.student.SendAJobApplication;
+import org.example.togetjob.exceptions.JobAnnouncementNotActiveException;
+import org.example.togetjob.exceptions.JobAnnouncementNotFoundException;
+import org.example.togetjob.exceptions.JobApplicationAlreadySentException;
+import org.example.togetjob.exceptions.RecruiterNotFoundException;
 
 import java.util.List;
 
@@ -23,7 +27,7 @@
         return controller.showJobApplicationForm(jobAnnouncementBean);
     }
 
-    public boolean sendAJobApplication(JobApplicationBean jobApplicationBean){
+    public boolean sendAJobApplication(JobApplicationBean jobApplicationBean) throws RecruiterNotFoundException , JobAnnouncementNotFoundException , JobAnnouncementNotActiveException , JobApplicationAlreadySentException {
         return controller.sendAJobApplication(jobApplicationBean);
     }
 
Index: src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationRecruiterBoundary.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.boundary;\n\nimport org.example.togetjob.bean.JobAnnouncementBean;\nimport org.example.togetjob.bean.JobApplicationBean;\nimport org.example.togetjob.controller.student.SendAJobApplication;\nimport org.example.togetjob.model.entity.Status;\n\nimport java.util.List;\n\npublic class SendAJobApplicationRecruiterBoundary {\n\n    private final SendAJobApplication controller;\n\n    public SendAJobApplicationRecruiterBoundary() {\n        this.controller = new SendAJobApplication();\n    }\n\n    public boolean acceptJobApplication(JobApplicationBean jobApplicationBean) {\n        return controller.updateJobApplicationStatus(jobApplicationBean, Status.ACCEPTED);\n    }\n\n    public boolean rejectJobApplication(JobApplicationBean jobApplicationBean) {\n        return controller.updateJobApplicationStatus(jobApplicationBean, Status.REJECTED);\n    }\n\n    public List<JobApplicationBean> getAllJobApplications(JobAnnouncementBean jobAnnouncementBean){\n        return controller.getJobApplicationsForRecruiter(jobAnnouncementBean);\n    }\n\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationRecruiterBoundary.java b/src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationRecruiterBoundary.java
--- a/src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationRecruiterBoundary.java	(revision fe6e287ffe6104328c1e6d2c33f77e6ea0d421cd)
+++ b/src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationRecruiterBoundary.java	(date 1739445507471)
@@ -3,6 +3,7 @@
 import org.example.togetjob.bean.JobAnnouncementBean;
 import org.example.togetjob.bean.JobApplicationBean;
 import org.example.togetjob.controller.student.SendAJobApplication;
+import org.example.togetjob.exceptions.JobApplicationNotFoundException;
 import org.example.togetjob.model.entity.Status;
 
 import java.util.List;
@@ -15,11 +16,11 @@
         this.controller = new SendAJobApplication();
     }
 
-    public boolean acceptJobApplication(JobApplicationBean jobApplicationBean) {
+    public boolean acceptJobApplication(JobApplicationBean jobApplicationBean) throws JobApplicationNotFoundException {
         return controller.updateJobApplicationStatus(jobApplicationBean, Status.ACCEPTED);
     }
 
-    public boolean rejectJobApplication(JobApplicationBean jobApplicationBean) {
+    public boolean rejectJobApplication(JobApplicationBean jobApplicationBean) throws JobApplicationNotFoundException {
         return controller.updateJobApplicationStatus(jobApplicationBean, Status.REJECTED);
     }
 
Index: src/main/java/org/example/togetjob/exceptions/DateNotValidException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/exceptions/DateNotValidException.java b/src/main/java/org/example/togetjob/exceptions/DateNotValidException.java
new file mode 100644
--- /dev/null	(date 1739437162151)
+++ b/src/main/java/org/example/togetjob/exceptions/DateNotValidException.java	(date 1739437162151)
@@ -0,0 +1,7 @@
+package org.example.togetjob.exceptions;
+
+public class DateNotValidException extends RuntimeException {
+    public DateNotValidException(String message) {
+        super(message);
+    }
+}
Index: src/main/java/org/example/togetjob/view/boundary/ContactAJobCandidateStudentBoundary.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.boundary;\n\n\nimport org.example.togetjob.bean.InterviewSchedulingStudentInfoBean;\nimport org.example.togetjob.controller.student.SendAJobApplication;\nimport org.example.togetjob.model.dao.abstractfactorydao.AbstractFactoryDaoSingleton;\nimport org.example.togetjob.pattern.adapter.ContactAJobCandidateAdapter;\nimport org.example.togetjob.pattern.adapter.ContactAJobCandidateController;\nimport org.example.togetjob.pattern.subject.SchedulingInterviewCollectionSubjectRecruiter;\n\nimport java.util.List;\n\npublic class ContactAJobCandidateStudentBoundary {\n\n    private final ContactAJobCandidateController contactAJobCandidateController;\n\n    public ContactAJobCandidateStudentBoundary() {\n        this.contactAJobCandidateController = new ContactAJobCandidateAdapter(\n                new SendAJobApplication(),\n                AbstractFactoryDaoSingleton.getFactoryDao().createStudentDao(),\n                AbstractFactoryDaoSingleton.getFactoryDao().createJobAnnouncementDao(),\n                AbstractFactoryDaoSingleton.getFactoryDao().createJobApplicationDao(),\n                AbstractFactoryDaoSingleton.getFactoryDao().createInterviewSchedulingDao(),\n                new SchedulingInterviewCollectionSubjectRecruiter()\n        );\n    }\n\n    public List<InterviewSchedulingStudentInfoBean> getAllInterviewSchedulingForStudent() {\n        return contactAJobCandidateController.getAllInterviewSchedulingsForStudent();\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/boundary/ContactAJobCandidateStudentBoundary.java b/src/main/java/org/example/togetjob/view/boundary/ContactAJobCandidateStudentBoundary.java
--- a/src/main/java/org/example/togetjob/view/boundary/ContactAJobCandidateStudentBoundary.java	(revision fe6e287ffe6104328c1e6d2c33f77e6ea0d421cd)
+++ b/src/main/java/org/example/togetjob/view/boundary/ContactAJobCandidateStudentBoundary.java	(date 1739438707368)
@@ -25,7 +25,7 @@
         );
     }
 
-    public List<InterviewSchedulingStudentInfoBean> getAllInterviewSchedulingForStudent() {
+    public List<InterviewSchedulingStudentInfoBean> getAllInterviewSchedulingForStudent() throws IllegalStateException {
         return contactAJobCandidateController.getAllInterviewSchedulingsForStudent();
     }
 
Index: src/main/java/org/example/togetjob/view/boundary/ContactAJobCandidateRecruiterBoundary.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.boundary;\n\nimport org.example.togetjob.bean.InterviewSchedulingBean;\nimport org.example.togetjob.bean.JobAnnouncementBean;\nimport org.example.togetjob.bean.StudentInfoBean;\nimport org.example.togetjob.bean.StudentInfoSearchBean;\nimport org.example.togetjob.controller.student.SendAJobApplication;\nimport org.example.togetjob.model.dao.abstractfactorydao.AbstractFactoryDaoSingleton;\nimport org.example.togetjob.pattern.adapter.ContactAJobCandidateAdapter;\nimport org.example.togetjob.pattern.adapter.ContactAJobCandidateController;\nimport org.example.togetjob.pattern.subject.SchedulingInterviewCollectionSubjectRecruiter;\n\nimport java.util.List;\n\npublic class ContactAJobCandidateRecruiterBoundary {\n\n    private final ContactAJobCandidateController contactAJobCandidateController;\n\n    public ContactAJobCandidateRecruiterBoundary() {\n        this.contactAJobCandidateController = new ContactAJobCandidateAdapter(\n                new SendAJobApplication(),\n                AbstractFactoryDaoSingleton.getFactoryDao().createStudentDao(),\n                AbstractFactoryDaoSingleton.getFactoryDao().createJobAnnouncementDao(),\n                AbstractFactoryDaoSingleton.getFactoryDao().createJobApplicationDao(),\n                AbstractFactoryDaoSingleton.getFactoryDao().createInterviewSchedulingDao(),\n                new SchedulingInterviewCollectionSubjectRecruiter()\n        );\n    }\n\n    public List<JobAnnouncementBean> getJobAnnouncementsByRecruiter() {\n        return contactAJobCandidateController.getJobAnnouncementsByRecruiter();\n    }\n\n    public List<StudentInfoBean> getFilteredCandidates(StudentInfoSearchBean searchCriteria, JobAnnouncementBean jobAnnouncement) {\n        return contactAJobCandidateController.showFilteredCandidates(searchCriteria, jobAnnouncement);\n    }\n\n    public InterviewSchedulingBean getInterviewSchedulingForm(StudentInfoBean candidate, JobAnnouncementBean jobAnnouncement) {\n        return contactAJobCandidateController.showInterviewSchedulingForm(candidate, jobAnnouncement);\n    }\n\n    public boolean inviteCandidateToInterview(InterviewSchedulingBean interviewDetails) {\n        return contactAJobCandidateController.sendInterviewInvitation(interviewDetails);\n    }\n\n    public List<InterviewSchedulingBean> getInterviewSchedules(JobAnnouncementBean jobAnnouncementBean){\n        return contactAJobCandidateController.getInterviewSchedules(jobAnnouncementBean);\n    }\n\n    public boolean modifyInterview(InterviewSchedulingBean interviewScheduling) {\n        return contactAJobCandidateController.modifyInterview(interviewScheduling);\n    }\n\n    public boolean deleteInterview(InterviewSchedulingBean interviewScheduling) {\n        return contactAJobCandidateController.deleteInterview(interviewScheduling);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/boundary/ContactAJobCandidateRecruiterBoundary.java b/src/main/java/org/example/togetjob/view/boundary/ContactAJobCandidateRecruiterBoundary.java
--- a/src/main/java/org/example/togetjob/view/boundary/ContactAJobCandidateRecruiterBoundary.java	(revision fe6e287ffe6104328c1e6d2c33f77e6ea0d421cd)
+++ b/src/main/java/org/example/togetjob/view/boundary/ContactAJobCandidateRecruiterBoundary.java	(date 1739440696012)
@@ -5,6 +5,7 @@
 import org.example.togetjob.bean.StudentInfoBean;
 import org.example.togetjob.bean.StudentInfoSearchBean;
 import org.example.togetjob.controller.student.SendAJobApplication;
+import org.example.togetjob.exceptions.*;
 import org.example.togetjob.model.dao.abstractfactorydao.AbstractFactoryDaoSingleton;
 import org.example.togetjob.pattern.adapter.ContactAJobCandidateAdapter;
 import org.example.togetjob.pattern.adapter.ContactAJobCandidateController;
@@ -39,19 +40,19 @@
         return contactAJobCandidateController.showInterviewSchedulingForm(candidate, jobAnnouncement);
     }
 
-    public boolean inviteCandidateToInterview(InterviewSchedulingBean interviewDetails) {
+    public boolean inviteCandidateToInterview(InterviewSchedulingBean interviewDetails) throws DateNotValidException, StudentNotFoundException , JobAnnouncementNotFoundException , JobApplicationNotFoundException , InterviewSchedulingAlreadyExistsException , NotificationException {
         return contactAJobCandidateController.sendInterviewInvitation(interviewDetails);
     }
 
-    public List<InterviewSchedulingBean> getInterviewSchedules(JobAnnouncementBean jobAnnouncementBean){
+    public List<InterviewSchedulingBean> getInterviewSchedules(JobAnnouncementBean jobAnnouncementBean) throws JobAnnouncementNotFoundException{
         return contactAJobCandidateController.getInterviewSchedules(jobAnnouncementBean);
     }
 
-    public boolean modifyInterview(InterviewSchedulingBean interviewScheduling) {
+    public boolean modifyInterview(InterviewSchedulingBean interviewScheduling) throws DateNotValidException , StudentNotFoundException , JobAnnouncementNotFoundException , InterviewSchedulingNotFoundException {
         return contactAJobCandidateController.modifyInterview(interviewScheduling);
     }
 
-    public boolean deleteInterview(InterviewSchedulingBean interviewScheduling) {
+    public boolean deleteInterview(InterviewSchedulingBean interviewScheduling) throws StudentNotFoundException , JobAnnouncementNotFoundException , InterviewSchedulingNotFoundException{
         return contactAJobCandidateController.deleteInterview(interviewScheduling);
     }
 }
Index: src/main/java/org/example/togetjob/exceptions/JobApplicationNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/exceptions/JobApplicationNotFoundException.java b/src/main/java/org/example/togetjob/exceptions/JobApplicationNotFoundException.java
new file mode 100644
--- /dev/null	(date 1739437399167)
+++ b/src/main/java/org/example/togetjob/exceptions/JobApplicationNotFoundException.java	(date 1739437399167)
@@ -0,0 +1,7 @@
+package org.example.togetjob.exceptions;
+
+public class JobApplicationNotFoundException extends RuntimeException {
+    public JobApplicationNotFoundException(String message) {
+        super(message);
+    }
+}
Index: src/main/java/org/example/togetjob/exceptions/InterviewSchedulingAlreadyExistsException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/exceptions/InterviewSchedulingAlreadyExistsException.java b/src/main/java/org/example/togetjob/exceptions/InterviewSchedulingAlreadyExistsException.java
new file mode 100644
--- /dev/null	(date 1739437686607)
+++ b/src/main/java/org/example/togetjob/exceptions/InterviewSchedulingAlreadyExistsException.java	(date 1739437686607)
@@ -0,0 +1,7 @@
+package org.example.togetjob.exceptions;
+
+public class InterviewSchedulingAlreadyExistsException extends RuntimeException {
+    public InterviewSchedulingAlreadyExistsException(String message) {
+        super(message);
+    }
+}
Index: src/main/java/org/example/togetjob/view/boundary/RegisterBoundary.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.boundary;\n\nimport org.example.togetjob.bean.RecruiterInfoBean;\nimport org.example.togetjob.bean.RegisterUserBean;\nimport org.example.togetjob.bean.StudentInfoBean;\nimport org.example.togetjob.controller.registration.AbstractRegisterController;\nimport org.example.togetjob.controller.registration.RegisterRecruiterController;\nimport org.example.togetjob.controller.registration.RegisterStudentController;\nimport org.example.togetjob.exceptions.UsernameTakeException;\n\npublic class RegisterBoundary {\n    //polymorphism\n    AbstractRegisterController registerController;\n\n    public boolean registerUser(RegisterUserBean userBean, Object infoBean) throws UsernameTakeException {\n\n        if (\"student\".equalsIgnoreCase(userBean.getRole())) {\n            registerController = new RegisterStudentController((StudentInfoBean) infoBean);\n        } else if (\"recruiter\".equalsIgnoreCase(userBean.getRole())) {\n            registerController = new RegisterRecruiterController((RecruiterInfoBean) infoBean);\n        } else {\n            return false;\n        }\n\n       return registerController.registerUser(userBean);\n\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/boundary/RegisterBoundary.java b/src/main/java/org/example/togetjob/view/boundary/RegisterBoundary.java
--- a/src/main/java/org/example/togetjob/view/boundary/RegisterBoundary.java	(revision fe6e287ffe6104328c1e6d2c33f77e6ea0d421cd)
+++ b/src/main/java/org/example/togetjob/view/boundary/RegisterBoundary.java	(date 1739452730228)
@@ -6,13 +6,14 @@
 import org.example.togetjob.controller.registration.AbstractRegisterController;
 import org.example.togetjob.controller.registration.RegisterRecruiterController;
 import org.example.togetjob.controller.registration.RegisterStudentController;
+import org.example.togetjob.exceptions.DatabaseException;
 import org.example.togetjob.exceptions.UsernameTakeException;
 
 public class RegisterBoundary {
     //polymorphism
     AbstractRegisterController registerController;
 
-    public boolean registerUser(RegisterUserBean userBean, Object infoBean) throws UsernameTakeException {
+    public boolean registerUser(RegisterUserBean userBean, Object infoBean) throws UsernameTakeException , DatabaseException {
 
         if ("student".equalsIgnoreCase(userBean.getRole())) {
             registerController = new RegisterStudentController((StudentInfoBean) infoBean);
Index: src/main/java/org/example/togetjob/view/cli/concretestate/RegisterState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.cli.concretestate;\n\nimport org.example.togetjob.bean.RecruiterInfoBean;\nimport org.example.togetjob.bean.RegisterUserBean;\nimport org.example.togetjob.bean.StudentInfoBean;\nimport org.example.togetjob.exceptions.UsernameTakeException;\nimport org.example.togetjob.view.boundary.RegisterBoundary;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.cli.abstractstate.CliState;\nimport org.example.togetjob.view.cli.contextstate.CliContext;\n\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class RegisterState implements CliState {\n\n    @Override\n    public void showMenu() {\n\n        Printer.print(\"\\n ---Register---\");\n\n    }\n\n    @Override\n    public void goNext(CliContext context, String input) {\n\n        Scanner scanner = context.getScanner();\n\n        Printer.print(\"Welcome to toGetJob! Fill the following fields: \");\n        Printer.print(\"Enter username: \");\n        String username = scanner.nextLine();\n        Printer.print(\"Enter password: \");\n        String password = scanner.nextLine();\n        Printer.print(\"Confirm password: \");\n        String checkPassword = scanner.nextLine();\n\n        if (!password.equals(checkPassword)) {\n            Printer.print(\"Passwords do not match. Please try again.\");\n            context.setState(new RegisterState());\n            return;\n        }\n\n        Printer.print(\"Enter name: \");\n        String name = scanner.nextLine();\n        Printer.print(\"Enter surname: \");\n        String surname = scanner.nextLine();\n        Printer.print(\"Enter email: \");\n        String email = scanner.nextLine();\n        Printer.print(\"Enter role (student/recruiter): \");\n        String roleInput = scanner.nextLine().trim().toLowerCase();\n\n        RegisterUserBean userBean = new RegisterUserBean(); // Empty\n\n        userBean.setUsername(username);\n        userBean.setPassword(password);\n        userBean.setName(name);\n        userBean.setSurname(surname);\n        userBean.setEmail(email);\n        userBean.setRoleInput(roleInput);\n\n        //polymorphism\n        Object infoBean;\n\n        if (\"student\".equals(roleInput)) {\n            infoBean = getStudentInfo(scanner);\n        } else if (\"recruiter\".equals(roleInput)) {\n            infoBean = getRecruiterInfo(scanner);\n        } else {\n            Printer.print(\"Invalid role. Please try again.\");\n            context.setState(new RegisterState());\n            return;\n        }\n\n        RegisterBoundary registerBoundary = new RegisterBoundary();\n        try {\n            // Attempt to register the user\n            boolean registrationSuccess = registerBoundary.registerUser(userBean, infoBean);\n\n            if (registrationSuccess) {\n                Printer.print(\"Registration successful!\");\n                context.setState(new MainMenuState()); // Main Menu\n            } else {\n                Printer.print(\"Username already exists. Please try again.\");\n                context.setState(new RegisterState()); // Retry registration\n            }\n\n        } catch (UsernameTakeException e) {\n            // Specific handling for the UsernameTakeException\n            Printer.print(\"Error: The username is already taken. Please choose a different username.\");\n            Printer.print(\"Would you like to try again with a different username? (yes/no)\");\n            String response = scanner.nextLine().trim().toLowerCase();\n\n            if (\"yes\".equalsIgnoreCase(response)) {\n                context.setState(new RegisterState()); // Retry registration with new username\n            } else {\n                context.setState(new MainMenuState()); // Go to Main Menu\n            }\n\n        } catch (Exception e) {\n            // Handle any other unexpected exceptions\n            Printer.print(\"An unexpected error occurred: \" + e.getMessage());\n            context.setState(new MainMenuState()); // Go to Main Menu\n        }\n\n    }\n\n    private StudentInfoBean getStudentInfo(Scanner scanner) {\n        Printer.print(\"Please, complete your student profile:\");\n\n        Printer.print(\"Enter date of birth (yyyy-mm-dd): \");\n        LocalDate dateOfBirth = LocalDate.parse(scanner.nextLine());\n        Printer.print(\"Enter phone number: \");\n        String phoneNumber = scanner.nextLine();\n        Printer.print(\"Enter degrees (comma-separated): \");\n        List<String> degrees = List.of(scanner.nextLine().split(\",\"));\n        Printer.print(\"Enter courses attended (comma-separated): \");\n        List<String> courses = List.of(scanner.nextLine().split(\",\"));\n        Printer.print(\"Enter certifications (comma-separated): \");\n        List<String> certifications = List.of(scanner.nextLine().split(\",\"));\n        Printer.print(\"Enter work experiences (comma-separated): \");\n        List<String> workExperiences = List.of(scanner.nextLine().split(\",\"));\n        Printer.print(\"Enter skills (comma-separated): \");\n        List<String> skills = List.of(scanner.nextLine().split(\",\"));\n        Printer.print(\"Enter availability: \");\n        String availability = scanner.nextLine();\n\n        StudentInfoBean studentInfoBean = new StudentInfoBean();\n\n        studentInfoBean.setDateOfBirth(dateOfBirth);\n        studentInfoBean.setPhoneNumber(phoneNumber);\n        studentInfoBean.setDegrees(degrees);\n        studentInfoBean.setCoursesAttended(courses);\n        studentInfoBean.setCertifications(certifications);\n        studentInfoBean.setWorkExperiences(workExperiences);\n        studentInfoBean.setSkills(skills);\n        studentInfoBean.setAvailability(availability);\n        return studentInfoBean;\n    }\n\n    private RecruiterInfoBean getRecruiterInfo(Scanner scanner) {\n        Printer.print(\"Please, complete your recruiter profile:\");\n\n        Printer.print(\"Enter the companies you work for (comma-separated): \");\n        List<String> companies = List.of(scanner.nextLine().split(\",\"));\n\n        RecruiterInfoBean recruiterInfoBean = new RecruiterInfoBean();\n        recruiterInfoBean.setCompanies(companies);\n\n        return recruiterInfoBean;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/cli/concretestate/RegisterState.java b/src/main/java/org/example/togetjob/view/cli/concretestate/RegisterState.java
--- a/src/main/java/org/example/togetjob/view/cli/concretestate/RegisterState.java	(revision fe6e287ffe6104328c1e6d2c33f77e6ea0d421cd)
+++ b/src/main/java/org/example/togetjob/view/cli/concretestate/RegisterState.java	(date 1739452730218)
@@ -3,6 +3,7 @@
 import org.example.togetjob.bean.RecruiterInfoBean;
 import org.example.togetjob.bean.RegisterUserBean;
 import org.example.togetjob.bean.StudentInfoBean;
+import org.example.togetjob.exceptions.DatabaseException;
 import org.example.togetjob.exceptions.UsernameTakeException;
 import org.example.togetjob.view.boundary.RegisterBoundary;
 import org.example.togetjob.printer.Printer;
@@ -97,6 +98,9 @@
                 context.setState(new MainMenuState()); // Go to Main Menu
             }
 
+        } catch (DatabaseException e){
+            Printer.print(e.getMessage());
+            context.setState(new ExitState());
         } catch (Exception e) {
             // Handle any other unexpected exceptions
             Printer.print("An unexpected error occurred: " + e.getMessage());

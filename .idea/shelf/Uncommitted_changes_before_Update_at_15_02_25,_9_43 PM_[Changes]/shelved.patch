Index: src/main/java/org/example/togetjob/view/gui/concretestate/RecruiterDisplayFiltersState.java
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/concretestate/RecruiterDisplayFiltersState.java b/src/main/java/org/example/togetjob/view/gui/concretestate/RecruiterDisplayFiltersState.java
deleted file mode 100644
--- a/src/main/java/org/example/togetjob/view/gui/concretestate/RecruiterDisplayFiltersState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ /dev/null	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
@@ -1,66 +0,0 @@
-package org.example.togetjob.view.gui.concretestate;
-
-import javafx.application.Platform;
-import javafx.fxml.FXMLLoader;
-import javafx.scene.Scene;
-import javafx.stage.Stage;
-import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
-import org.example.togetjob.view.GUIContext;
-import org.example.togetjob.view.gui.controllergrafico.CreateJobAnnouncementController;
-
-import java.io.IOException;
-
-public class RecruiterDisplayFiltersState implements State {
-
-    GUIContext context;
-
-    public RecruiterDisplayFiltersState(GUIContext context ){
-
-        this.context = context ;
-
-    }
-
-    @Override
-    public void showMenu() {
-
-        try {
-            Printer.print("Showing RecruiterDisplayFiltersState...");
-            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/org/example/togetjob/fxml/filterjobcandidatesrecruiter.fxml"));
-            Scene scene = new Scene(fxmlLoader.load(), 600, 500);
-
-            CreateJobAnnouncementController controller = fxmlLoader.getController();
-            controller.setContext(context);
-
-            Stage stage = context.getStage();
-
-            if (stage == null) {
-                stage = new Stage();
-                context.setStage(stage);
-            }
-
-            stage.setTitle("Display Filters");
-            stage.setScene(scene);
-
-            stage.setOnCloseRequest(event -> {
-                Platform.exit();  // JavaFX
-                System.exit(0);   // process
-            });
-
-            stage.show();
-
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-    }
-
-    @Override
-    public void goNext(Context context, String event) {
-        //**//
-    }
-    public GUIContext getContext() {
-        return context;
-    }
-
-}
Index: src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationStudentBoundary.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.boundary;\n\nimport org.example.togetjob.bean.JobAnnouncementBean;\nimport org.example.togetjob.bean.JobAnnouncementSearchBean;\nimport org.example.togetjob.bean.JobApplicationBean;\nimport org.example.togetjob.controller.student.SendAJobApplication;\nimport org.example.togetjob.exceptions.JobAnnouncementNotActiveException;\nimport org.example.togetjob.exceptions.JobAnnouncementNotFoundException;\nimport org.example.togetjob.exceptions.JobApplicationAlreadySentException;\nimport org.example.togetjob.exceptions.RecruiterNotFoundException;\n\nimport java.util.List;\n\npublic class SendAJobApplicationStudentBoundary {\n\n    private final SendAJobApplication controller;\n\n    public SendAJobApplicationStudentBoundary(){\n        this.controller = new SendAJobApplication();\n    }\n\n    public List<JobAnnouncementBean> getJobAnnouncements(JobAnnouncementSearchBean jobAnnouncementSearchBean){\n        return controller.showFilteredJobAnnouncements(jobAnnouncementSearchBean);\n    }\n\n    public JobApplicationBean fillJobApplicationForm(JobAnnouncementBean jobAnnouncementBean){\n        return controller.showJobApplicationForm(jobAnnouncementBean);\n    }\n\n    public boolean sendAJobApplication(JobApplicationBean jobApplicationBean) throws RecruiterNotFoundException , JobAnnouncementNotFoundException , JobAnnouncementNotActiveException , JobApplicationAlreadySentException {\n        return controller.sendAJobApplication(jobApplicationBean);\n    }\n\n    public List<JobApplicationBean> getJobApplicationsByStudent() {\n        return controller.getAllJobApplication();\n    }\n\n    public boolean modifyAJobApplication(JobApplicationBean jobApplicationBean){\n        return controller.modifyJobApplication(jobApplicationBean);\n    }\n\n    public boolean deleteAJobApplication(JobApplicationBean jobApplicationBean){\n        return controller.deleteJobApplication(jobApplicationBean);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationStudentBoundary.java b/src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationStudentBoundary.java
--- a/src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationStudentBoundary.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationStudentBoundary.java	(date 1739639214801)
@@ -4,10 +4,7 @@
 import org.example.togetjob.bean.JobAnnouncementSearchBean;
 import org.example.togetjob.bean.JobApplicationBean;
 import org.example.togetjob.controller.student.SendAJobApplication;
-import org.example.togetjob.exceptions.JobAnnouncementNotActiveException;
-import org.example.togetjob.exceptions.JobAnnouncementNotFoundException;
-import org.example.togetjob.exceptions.JobApplicationAlreadySentException;
-import org.example.togetjob.exceptions.RecruiterNotFoundException;
+import org.example.togetjob.exceptions.*;
 
 import java.util.List;
 
@@ -27,7 +24,7 @@
         return controller.showJobApplicationForm(jobAnnouncementBean);
     }
 
-    public boolean sendAJobApplication(JobApplicationBean jobApplicationBean) throws RecruiterNotFoundException , JobAnnouncementNotFoundException , JobAnnouncementNotActiveException , JobApplicationAlreadySentException {
+    public boolean sendAJobApplication(JobApplicationBean jobApplicationBean) throws RecruiterNotFoundException , JobAnnouncementNotFoundException , JobAnnouncementNotActiveException , JobApplicationAlreadySentException, UnauthorizedAccessException {
         return controller.sendAJobApplication(jobApplicationBean);
     }
 
Index: src/main/java/org/example/togetjob/view/cli/concretestate/ContactAJobCandidateRecruiterState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/cli/concretestate/ContactAJobCandidateRecruiterState.java b/src/main/java/org/example/togetjob/view/cli/ContactAJobCandidateRecruiterState.java
rename from src/main/java/org/example/togetjob/view/cli/concretestate/ContactAJobCandidateRecruiterState.java
rename to src/main/java/org/example/togetjob/view/cli/ContactAJobCandidateRecruiterState.java
--- a/src/main/java/org/example/togetjob/view/cli/concretestate/ContactAJobCandidateRecruiterState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/cli/ContactAJobCandidateRecruiterState.java	(date 1739642737306)
@@ -1,15 +1,15 @@
-package org.example.togetjob.view.cli.concretestate;
+package org.example.togetjob.view.cli;
 
 import org.example.togetjob.bean.InterviewSchedulingBean;
 import org.example.togetjob.bean.JobAnnouncementBean;
 import org.example.togetjob.bean.StudentInfoBean;
 import org.example.togetjob.bean.StudentInfoSearchBean;
 import org.example.togetjob.exceptions.*;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
 import org.example.togetjob.view.boundary.ContactAJobCandidateRecruiterBoundary;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.CliContext;
+import org.example.togetjob.state.CliContext;
 
 import java.util.List;
 import java.util.Scanner;
Index: src/main/java/org/example/togetjob/controller/recruiter/PublishAJobAnnouncementController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.controller.recruiter;\n\nimport org.example.togetjob.bean.JobAnnouncementBean;\nimport org.example.togetjob.controller.LoginController;\nimport org.example.togetjob.exceptions.*;\nimport org.example.togetjob.dao.abstractfactorydao.AbstractFactoryDaoSingleton;\nimport org.example.togetjob.dao.abstractobjects.JobAnnouncementDao;\nimport org.example.togetjob.model.entity.JobAnnouncement;\nimport org.example.togetjob.model.entity.Recruiter;\nimport org.example.togetjob.model.factory.JobAnnouncementFactory;\nimport org.example.togetjob.session.SessionManager;\n\nimport java.util.*;\n\npublic class PublishAJobAnnouncementController {\n\n    private final JobAnnouncementDao jobAnnouncementDao;\n    private final LoginController loginController;\n\n    public PublishAJobAnnouncementController(){\n      this.jobAnnouncementDao = AbstractFactoryDaoSingleton.getFactoryDao().createJobAnnouncementDao();\n      this.loginController = new LoginController();\n    }\n\n    public boolean publishJobAnnouncement(JobAnnouncementBean jobAnnouncementBean)throws DatabaseException,JobAnnouncementAlreadyExists,InvalidSalaryException,InvalidWorkingHourException {\n\n        Recruiter recruiter = getRecruiterFromSession();\n        int workingHours ;\n        double salary ;\n\n        if(isUserLogged()){\n            throw new UserNotLoggedException();\n        }\n\n        if (jobAnnouncementDao.jobAnnouncementExists(jobAnnouncementBean.getJobTitle(), recruiter)) {\n            throw new JobAnnouncementAlreadyExists(\"A job announcement with this title already exists.\");  // false if job announcement exists\n        }\n\n        try {\n            workingHours = Integer.parseInt(jobAnnouncementBean.getWorkingHours());\n        } catch (NumberFormatException e) {\n            throw new InvalidWorkingHourException(\"Working hours must be greater than 0.\");\n        }\n\n        try {\n            salary = Double.parseDouble(jobAnnouncementBean.getSalary());\n        } catch (NumberFormatException e) {\n            throw new InvalidSalaryException(\"Working hours must be greater than 0.\");\n        }\n\n        JobAnnouncement jobAnnouncement = JobAnnouncementFactory.createJobAnnouncement(\n                jobAnnouncementBean.getJobTitle(),\n                jobAnnouncementBean.getJobType(),\n                jobAnnouncementBean.getRole(),\n                jobAnnouncementBean.getLocation(),\n                workingHours,\n                jobAnnouncementBean.getCompanyName(),\n                salary\n        );\n\n        JobAnnouncementFactory.completeJobAnnouncement(\n                jobAnnouncement,\n                jobAnnouncementBean.getDescription(),\n                recruiter,\n                true\n        ); //default\n\n        return jobAnnouncementDao.saveJobAnnouncement(jobAnnouncement);\n    }\n\n    private Recruiter getRecruiterFromSession() {\n        return SessionManager.getInstance().getRecruiterFromSession();\n    }\n\n    public boolean changeJobAnnouncementStatus(JobAnnouncementBean jobAnnouncementBean, boolean isActive) throws DatabaseException{\n\n        if(isUserLogged()){\n            throw new UserNotLoggedException();\n        }\n\n        Recruiter recruiter = getRecruiterFromSession();\n        Optional<JobAnnouncement> jobAnnouncementOptional = jobAnnouncementDao.getJobAnnouncement(jobAnnouncementBean.getJobTitle(), recruiter);\n\n        if(jobAnnouncementOptional.isPresent()){\n            JobAnnouncement jobAnnouncement = jobAnnouncementOptional.get();\n            jobAnnouncement.setActive(isActive);\n            return jobAnnouncementDao.updateJobAnnouncement(jobAnnouncement);\n        }\n\n        return false;\n    }\n\n    public boolean deleteJobAnnouncement(JobAnnouncementBean jobAnnouncementBean){\n\n        if(isUserLogged()){\n            throw new UserNotLoggedException();\n        }\n\n        Recruiter recruiter = getRecruiterFromSession();\n        Optional<JobAnnouncement> jobAnnouncementOptional = jobAnnouncementDao.getJobAnnouncement(jobAnnouncementBean.getJobTitle(), recruiter);\n\n        return jobAnnouncementOptional.filter(jobAnnouncementDao::deleteJobAnnouncement).isPresent();\n    }\n\n    public List<JobAnnouncementBean> getJobAnnouncement() {\n\n        if(isUserLogged()){\n            throw new UserNotLoggedException();\n        }\n\n        JobAnnouncementService jobAnnouncementService = new JobAnnouncementService(jobAnnouncementDao);\n\n        List<JobAnnouncementBean> jobAnnouncements = jobAnnouncementService.getJobAnnouncementsForCurrentRecruiter();\n\n        return Objects.requireNonNullElse(jobAnnouncements, Collections.emptyList());\n\n    }\n\n    public boolean isUserLogged() throws UserNotLoggedException {\n        if (!loginController.isUserLogged()) {\n            throw new UserNotLoggedException();\n        }\n        return false;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/controller/recruiter/PublishAJobAnnouncementController.java b/src/main/java/org/example/togetjob/controller/recruiter/PublishAJobAnnouncementController.java
--- a/src/main/java/org/example/togetjob/controller/recruiter/PublishAJobAnnouncementController.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/controller/recruiter/PublishAJobAnnouncementController.java	(date 1739638237395)
@@ -32,8 +32,9 @@
             throw new UserNotLoggedException();
         }
 
-        if (jobAnnouncementDao.jobAnnouncementExists(jobAnnouncementBean.getJobTitle(), recruiter)) {
-            throw new JobAnnouncementAlreadyExists("A job announcement with this title already exists.");  // false if job announcement exists
+        Optional<JobAnnouncement> existingJobAnnouncement = jobAnnouncementDao.getJobAnnouncement(jobAnnouncementBean.getJobTitle(), recruiter);
+        if (existingJobAnnouncement.isPresent()) {
+            throw new JobAnnouncementAlreadyExists("A job announcement with this title already exists.");
         }
 
         try {
@@ -45,7 +46,7 @@
         try {
             salary = Double.parseDouble(jobAnnouncementBean.getSalary());
         } catch (NumberFormatException e) {
-            throw new InvalidSalaryException("Working hours must be greater than 0.");
+            throw new InvalidSalaryException("Salary must be a double.");
         }
 
         JobAnnouncement jobAnnouncement = JobAnnouncementFactory.createJobAnnouncement(
Index: src/main/java/org/example/togetjob/view/gui/concretestate/FilteredJobAnnouncementsState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.concretestate;\n\nimport javafx.application.Platform;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Scene;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\nimport org.example.togetjob.bean.JobAnnouncementSearchBean;\nimport org.example.togetjob.view.Context;\nimport org.example.togetjob.view.State;\nimport org.example.togetjob.view.GUIContext;\nimport org.example.togetjob.view.gui.controllergrafico.SendAJobApplicationByStudentController;\n\nimport java.io.IOException;\n\npublic class FilteredJobAnnouncementsState implements State {\n\n    private final GUIContext context;\n    private final JobAnnouncementSearchBean jobAnnouncementSearchBean;\n\n    public FilteredJobAnnouncementsState(GUIContext context, JobAnnouncementSearchBean jobAnnouncementSearchBean) {\n        this.context = context;\n        this.jobAnnouncementSearchBean = jobAnnouncementSearchBean;\n    }\n\n    @Override\n    public void showMenu() {\n\n        try {\n\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/org/example/togetjob/fxml/filteredjobannouncements.fxml\"));\n\n            VBox root = fxmlLoader.load();\n            Scene scene = new Scene(root, 600, 500);\n\n            SendAJobApplicationByStudentController controller = fxmlLoader.getController();\n            controller.setContext(context);\n            controller.setJobAnnouncementSearchBean(jobAnnouncementSearchBean);\n\n            Stage stage = context.getStage();\n\n            if(stage == null){\n                stage = new Stage();\n                context.setStage(stage);\n            }\n\n            stage.setTitle(\"Filtered Job Announcements by Student\");\n            stage.setScene(scene);\n\n            //listener to close the application\n            stage.setOnCloseRequest(event -> {\n                Platform.exit();  // JavaFX\n                System.exit(0);   // process\n            });\n\n            stage.show();\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    @Override\n    public void goNext(Context context, String event) {\n        //**//\n    }\n    public GUIContext getContext() {\n        return context;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/concretestate/FilteredJobAnnouncementsState.java b/src/main/java/org/example/togetjob/view/gui/concretestate/FilteredJobAnnouncementsState.java
--- a/src/main/java/org/example/togetjob/view/gui/concretestate/FilteredJobAnnouncementsState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/concretestate/FilteredJobAnnouncementsState.java	(date 1739643968238)
@@ -6,10 +6,12 @@
 import javafx.scene.layout.VBox;
 import javafx.stage.Stage;
 import org.example.togetjob.bean.JobAnnouncementSearchBean;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.printer.Printer;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
+import org.example.togetjob.state.GUIContext;
 import org.example.togetjob.view.gui.controllergrafico.SendAJobApplicationByStudentController;
+import org.example.togetjob.view.gui.concretestate.HomeStudentState;
 
 import java.io.IOException;
 
@@ -25,9 +27,7 @@
 
     @Override
     public void showMenu() {
-
         try {
-
             FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/org/example/togetjob/fxml/filteredjobannouncements.fxml"));
 
             VBox root = fxmlLoader.load();
@@ -38,8 +38,7 @@
             controller.setJobAnnouncementSearchBean(jobAnnouncementSearchBean);
 
             Stage stage = context.getStage();
-
-            if(stage == null){
+            if (stage == null) {
                 stage = new Stage();
                 context.setStage(stage);
             }
@@ -47,10 +46,10 @@
             stage.setTitle("Filtered Job Announcements by Student");
             stage.setScene(scene);
 
-            //listener to close the application
+            // Listener per chiudere l'applicazione
             stage.setOnCloseRequest(event -> {
-                Platform.exit();  // JavaFX
-                System.exit(0);   // process
+                Platform.exit();
+                System.exit(0);
             });
 
             stage.show();
@@ -58,13 +57,27 @@
         } catch (IOException e) {
             e.printStackTrace();
         }
-
     }
 
     @Override
     public void goNext(Context context, String event) {
-        //**//
+        GUIContext guiContext = (GUIContext) context;
+
+        switch (event) {
+            case "viewJobDetails":
+                Printer.print("Navigating to Job Details...");
+                break;
+            case "goBack":
+                Printer.print("Going back to Student Home...");
+                guiContext.setState(new HomeStudentState(guiContext));
+                break;
+            default:
+                Printer.print("Event not recognized: " + event);
+        }
+
+        guiContext.showMenu();
     }
+
     public GUIContext getContext() {
         return context;
     }
Index: src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationRecruiterState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationRecruiterState.java b/src/main/java/org/example/togetjob/view/cli/SendAJobApplicationRecruiterState.java
rename from src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationRecruiterState.java
rename to src/main/java/org/example/togetjob/view/cli/SendAJobApplicationRecruiterState.java
--- a/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationRecruiterState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/cli/SendAJobApplicationRecruiterState.java	(date 1739642737311)
@@ -1,15 +1,15 @@
-package org.example.togetjob.view.cli.concretestate;
+package org.example.togetjob.view.cli;
 
 import org.example.togetjob.bean.InterviewSchedulingBean;
 import org.example.togetjob.bean.JobAnnouncementBean;
 import org.example.togetjob.bean.JobApplicationBean;
 import org.example.togetjob.exceptions.*;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
 import org.example.togetjob.view.boundary.ContactAJobCandidateRecruiterBoundary;
 import org.example.togetjob.view.boundary.SendAJobApplicationRecruiterBoundary;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.CliContext;
+import org.example.togetjob.state.CliContext;
 
 import java.util.List;
 import java.util.Scanner;
Index: src/main/java/org/example/togetjob/view/cli/concretestate/LoginState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/cli/concretestate/LoginState.java b/src/main/java/org/example/togetjob/view/cli/LoginState.java
rename from src/main/java/org/example/togetjob/view/cli/concretestate/LoginState.java
rename to src/main/java/org/example/togetjob/view/cli/LoginState.java
--- a/src/main/java/org/example/togetjob/view/cli/concretestate/LoginState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/cli/LoginState.java	(date 1739642737249)
@@ -1,12 +1,12 @@
-package org.example.togetjob.view.cli.concretestate;
+package org.example.togetjob.view.cli;
 
 import org.example.togetjob.exceptions.UserNotFoundException;
 import org.example.togetjob.exceptions.WrongPasswordException;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
 import org.example.togetjob.view.boundary.LoginBoundary;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.CliContext;
+import org.example.togetjob.state.CliContext;
 
 import java.util.Scanner;
 
Index: src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationStudentState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationStudentState.java b/src/main/java/org/example/togetjob/view/cli/SendAJobApplicationStudentState.java
rename from src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationStudentState.java
rename to src/main/java/org/example/togetjob/view/cli/SendAJobApplicationStudentState.java
--- a/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationStudentState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/cli/SendAJobApplicationStudentState.java	(date 1739642737236)
@@ -1,15 +1,15 @@
-package org.example.togetjob.view.cli.concretestate;
+package org.example.togetjob.view.cli;
 
 import org.example.togetjob.bean.JobAnnouncementBean;
 import org.example.togetjob.bean.JobAnnouncementSearchBean;
 import org.example.togetjob.bean.JobApplicationBean;
 import org.example.togetjob.exceptions.*;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
 import org.example.togetjob.view.boundary.SendAJobApplicationStudentBoundary;
 import org.example.togetjob.model.entity.Status;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.CliContext;
+import org.example.togetjob.state.CliContext;
 
 import java.util.List;
 import java.util.Scanner;
@@ -283,8 +283,8 @@
             // Proceed to the job application process
             applyForJob(scanner, selectedJob, jobAnnouncements);
         } else if (choice.equals("2")) {
-            // Go back to job announcements list
-            showJobAnnouncementDetails(scanner, jobAnnouncements);
+            // Go back to job announcements filters
+            applyFiltersAndShowJobAnnouncements(scanner);
         } else {
             Printer.print("Invalid choice. Please try again.");
             showJobAnnouncementDetails(scanner, jobAnnouncements);
Index: src/main/resources/org/example/togetjob/fxml/homestudent.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import javafx.scene.control.Button?>\n<?import javafx.scene.control.Label?>\n<?import javafx.scene.control.ListView?>\n<?import javafx.scene.control.Separator?>\n<?import javafx.scene.control.TitledPane?>\n<?import javafx.scene.effect.DropShadow?>\n<?import javafx.scene.effect.Glow?>\n<?import javafx.scene.image.Image?>\n<?import javafx.scene.image.ImageView?>\n<?import javafx.scene.layout.AnchorPane?>\n<?import javafx.scene.layout.VBox?>\n<?import javafx.scene.paint.Color?>\n<?import javafx.scene.text.Font?>\n\n<AnchorPane onMouseMoved=\"#handleAcceptedApplications\" prefHeight=\"500.0\" prefWidth=\"600.0\" style=\"-fx-background-color: linear-gradient(from 0% 0% to 0% 100%, rgba(255,255,255,1) 85%, rgba(240,248,255,0.8) 95%, rgba(220,240,255,0.7) 100%); -fx-border-color: lightgray;\" xmlns=\"http://javafx.com/javafx/23.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"org.example.togetjob.view.gui.controllergrafico.HomeStudentController\">\n   <children>\n      <Button layoutX=\"243.0\" layoutY=\"437.0\" mnemonicParsing=\"false\" onAction=\"#sendAJobApplication\" onMouseClicked=\"#sendAJobApplication\" prefHeight=\"67.0\" prefWidth=\"246.0\" style=\"-fx-background-color: #b3d9ff; -fx-text-fill: #2980b9; -fx-border-radius: 5; -fx-background-radius: 15; -fx-border-color: #2980b9; -fx-border-width: 2; -fx-cursor: hand;\" text=\"Send a Job Application\" AnchorPane.bottomAnchor=\"14.0\" AnchorPane.leftAnchor=\"242.0\" AnchorPane.topAnchor=\"436.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"18.0\" />\n         </font>\n      </Button>\n      <ImageView fitHeight=\"113.0\" fitWidth=\"126.0\" layoutX=\"16.0\" layoutY=\"35.0\" pickOnBounds=\"true\" preserveRatio=\"true\" AnchorPane.bottomAnchor=\"240.0\" AnchorPane.leftAnchor=\"16.0\" AnchorPane.rightAnchor=\"323.0\" AnchorPane.topAnchor=\"50.0\">\n         <effect>\n            <DropShadow blurType=\"ONE_PASS_BOX\" height=\"20.0\" radius=\"9.5\" width=\"20.0\">\n               <color>\n                  <Color red=\"0.16078431904315948\" green=\"0.501960813999176\" blue=\"0.7254902124404907\" />\n               </color>\n            </DropShadow>\n         </effect>\n         <image>\n            <Image url=\"@../imagestudentprofile.png\" />\n         </image>\n      </ImageView>\n      <Button layoutX=\"16.0\" layoutY=\"192.0\" mnemonicParsing=\"false\" prefHeight=\"41.0\" prefWidth=\"113.0\" style=\"-fx-background-color: #b3d9ff; -fx-text-fill: #2980b9; -fx-border-radius: 5; -fx-background-radius: 15; -fx-border-color: #2980b9; -fx-border-width: 2; -fx-cursor: hand;\" text=\"View Profile\" AnchorPane.topAnchor=\"200.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"14.0\" />\n         </font>\n      </Button>\n      <Button layoutX=\"16.0\" layoutY=\"250.0\" mnemonicParsing=\"false\" onAction=\"#handleViewNotifications\" prefHeight=\"41.0\" prefWidth=\"113.0\" style=\"-fx-background-color: #b3d9ff; -fx-text-fill: #2980b9; -fx-border-radius: 5; -fx-background-radius: 15; -fx-border-color: #2980b9; -fx-border-width: 2; -fx-cursor: hand;\" text=\"Notifications\" AnchorPane.topAnchor=\"250.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"14.0\" />\n         </font>\n      </Button>\n      <Button layoutX=\"16.0\" layoutY=\"310.0\" mnemonicParsing=\"false\" onAction=\"#handleLogout\" onMouseClicked=\"#handleLogout\" prefHeight=\"41.0\" prefWidth=\"113.0\" style=\"-fx-background-color: #b3d9ff; -fx-text-fill: #2980b9; -fx-border-radius: 5; -fx-background-radius: 15; -fx-border-color: #2980b9; -fx-border-width: 2; -fx-cursor: hand;\" text=\"Logout\" AnchorPane.topAnchor=\"300.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"14.0\" />\n         </font>\n      </Button>\n      <Label layoutX=\"237.0\" layoutY=\"400.0\" style=\"-fx-text-fill: #2980b9;\" text=\"Do you want to send a job application? \" AnchorPane.bottomAnchor=\"94.0\" AnchorPane.leftAnchor=\"237.0\" AnchorPane.topAnchor=\"400.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"14.0\" />\n         </font>\n      </Label>\n      <VBox fx:id=\"applicationsVBox\" layoutX=\"155.0\" layoutY=\"8.0\" prefHeight=\"381.0\" prefWidth=\"440.0\">\n         <children>\n            <TitledPane fx:id=\"pendingApplicationsPane\" animated=\"false\" onMouseClicked=\"#handlePendingApplications\" prefHeight=\"95.0\" prefWidth=\"340.0\" style=\"-fx-background-color: #b3d9ff; -fx-text-fill: #2980b9; -fx-border-color: #b3d9ff;\" text=\"Pending Job Applications\">\n               <font>\n                  <Font name=\"AppleGothic Regular\" size=\"14.0\" />\n               </font>\n               <content>\n                  <ListView fx:id=\"pendingApplicationsList\" onMouseClicked=\"#handleAcceptedApplications\" prefHeight=\"200.0\" prefWidth=\"200.0\" />\n               </content>\n            </TitledPane>\n            <TitledPane fx:id=\"acceptedApplicationsPane\" animated=\"false\" onMouseClicked=\"#handleAcceptedApplications\" prefHeight=\"159.0\" prefWidth=\"440.0\" style=\"-fx-background-color: #b3d9ff; -fx-text-fill: #2980b9; -fx-border-color: #b3d9ff;\" text=\"Accepted Job Applications\">\n               <font>\n                  <Font name=\"AppleGothic Regular\" size=\"14.0\" />\n               </font>\n               <content>\n                  <ListView fx:id=\"acceptedApplicationsList\" onMouseClicked=\"#handleAcceptedApplications\" prefHeight=\"200.0\" prefWidth=\"436.0\" />\n               </content>\n            </TitledPane>\n            <TitledPane fx:id=\"rejectedApplicationsPane\" onMouseClicked=\"#handleRejectedApplications\" onMouseDragEntered=\"#handleRejectedApplications\" prefHeight=\"160.0\" prefWidth=\"440.0\" style=\"-fx-background-color: #b3d9ff; -fx-text-fill: #2980b9; -fx-border-color: #b3d9ff;\" text=\"Rejected Job Applications\">\n               <font>\n                  <Font name=\"AppleGothic Regular\" size=\"14.0\" />\n               </font>\n               <content>\n                  <ListView fx:id=\"rejectedApplicationsList\" onMouseClicked=\"#handleRejectedApplications\" prefHeight=\"96.0\" prefWidth=\"436.0\" />\n               </content>\n            </TitledPane>\n         </children>\n      </VBox>\n      <Separator layoutX=\"145.0\" layoutY=\"2.0\" opacity=\"0.5\" orientation=\"VERTICAL\" prefHeight=\"500.0\" prefWidth=\"1.0\" style=\"-fx-background-color: #2980b9;\">\n         <effect>\n            <Glow />\n         </effect>\n      </Separator>\n   </children>\n</AnchorPane>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/org/example/togetjob/fxml/homestudent.fxml b/src/main/resources/org/example/togetjob/fxml/homestudent.fxml
--- a/src/main/resources/org/example/togetjob/fxml/homestudent.fxml	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/resources/org/example/togetjob/fxml/homestudent.fxml	(date 1739643485071)
@@ -48,7 +48,7 @@
             <Font name="AppleGothic Regular" size="14.0" />
          </font>
       </Button>
-      <Label layoutX="237.0" layoutY="400.0" style="-fx-text-fill: #2980b9;" text="Do you want to send a job application? " AnchorPane.bottomAnchor="94.0" AnchorPane.leftAnchor="237.0" AnchorPane.topAnchor="400.0">
+      <Label layoutX="238.0" layoutY="403.0" style="-fx-text-fill: #2980b9;" text="Do you want to send a job application? " AnchorPane.bottomAnchor="93.0" AnchorPane.leftAnchor="238.0" AnchorPane.topAnchor="403.0">
          <font>
             <Font name="AppleGothic Regular" size="14.0" />
          </font>
Index: src/main/java/org/example/togetjob/view/cli/concretestate/ExitState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/cli/concretestate/ExitState.java b/src/main/java/org/example/togetjob/view/cli/ExitState.java
rename from src/main/java/org/example/togetjob/view/cli/concretestate/ExitState.java
rename to src/main/java/org/example/togetjob/view/cli/ExitState.java
--- a/src/main/java/org/example/togetjob/view/cli/concretestate/ExitState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/cli/ExitState.java	(date 1739642737268)
@@ -1,9 +1,9 @@
-package org.example.togetjob.view.cli.concretestate;
+package org.example.togetjob.view.cli;
 
 import org.example.togetjob.connection.DatabaseConfig;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
 
 public class ExitState implements State {
     @Override
Index: src/main/resources/org/example/togetjob/fxml/homerecruiter.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import javafx.geometry.Insets?>\n<?import javafx.scene.Cursor?>\n<?import javafx.scene.control.Button?>\n<?import javafx.scene.control.Label?>\n<?import javafx.scene.control.ListView?>\n<?import javafx.scene.control.Separator?>\n<?import javafx.scene.control.TitledPane?>\n<?import javafx.scene.effect.DropShadow?>\n<?import javafx.scene.effect.Glow?>\n<?import javafx.scene.image.Image?>\n<?import javafx.scene.image.ImageView?>\n<?import javafx.scene.layout.AnchorPane?>\n<?import javafx.scene.layout.VBox?>\n<?import javafx.scene.paint.Color?>\n<?import javafx.scene.text.Font?>\n\n<VBox alignment=\"CENTER\" prefHeight=\"500.0\" prefWidth=\"600.0\" spacing=\"20.0\" xmlns=\"http://javafx.com/javafx/23.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"org.example.togetjob.view.gui.controllergrafico.HomeRecruiterController\">\n   <padding>\n      <Insets bottom=\"20.0\" left=\"20.0\" right=\"20.0\" top=\"20.0\" />\n   </padding>\n   <cursor>\n      <Cursor fx:constant=\"SE_RESIZE\" />\n   </cursor>\n   <children>\n      <AnchorPane prefHeight=\"500.0\" prefWidth=\"600.0\" style=\"-fx-background-color: linear-gradient(from 0% 0% to 0% 100%, rgba(255,255,255,1) 85%, rgba(240,248,255,0.8) 95%, rgba(220,240,255,0.7) 100%); -fx-border-color: lightgray;\">\n         <children>\n            <ImageView fitHeight=\"113.0\" fitWidth=\"126.0\" layoutX=\"16.0\" layoutY=\"35.0\" pickOnBounds=\"true\" preserveRatio=\"true\" AnchorPane.bottomAnchor=\"240.0\" AnchorPane.leftAnchor=\"16.0\" AnchorPane.rightAnchor=\"323.0\" AnchorPane.topAnchor=\"50.0\">\n               <image>\n                  <Image url=\"@../imagerecruiterprogile.jpg\" />\n               </image>\n               <effect>\n                  <DropShadow blurType=\"ONE_PASS_BOX\" height=\"20.0\" radius=\"9.5\" width=\"20.0\">\n                     <color>\n                        <Color red=\"0.16078431904315948\" green=\"0.501960813999176\" blue=\"0.7254902124404907\" />\n                     </color>\n                  </DropShadow>\n               </effect>\n            </ImageView>\n            <Button layoutX=\"16.0\" layoutY=\"192.0\" mnemonicParsing=\"false\" prefHeight=\"41.0\" prefWidth=\"113.0\" style=\"-fx-background-color: #b3d9ff; -fx-text-fill: #2980b9; -fx-border-radius: 5; -fx-background-radius: 15; -fx-border-color: #2980b9; -fx-border-width: 2; -fx-cursor: hand;\" text=\"View Profile\" AnchorPane.topAnchor=\"200.0\">\n               <font>\n                  <Font name=\"AppleGothic Regular\" size=\"14.0\" />\n               </font>\n            </Button>\n            <Button layoutX=\"16.0\" layoutY=\"250.0\" mnemonicParsing=\"false\" onAction=\"#handleViewNotifications\" prefHeight=\"41.0\" prefWidth=\"113.0\" style=\"-fx-background-color: #b3d9ff; -fx-text-fill: #2980b9; -fx-border-radius: 5; -fx-background-radius: 15; -fx-border-color: #2980b9; -fx-border-width: 2; -fx-cursor: hand;\" text=\"Notifications\" AnchorPane.topAnchor=\"250.0\">\n               <font>\n                  <Font name=\"AppleGothic Regular\" size=\"14.0\" />\n               </font>\n            </Button>\n            <Button layoutX=\"16.0\" layoutY=\"310.0\" mnemonicParsing=\"false\" onAction=\"#handleLogout\" prefHeight=\"41.0\" prefWidth=\"113.0\" style=\"-fx-background-color: #b3d9ff; -fx-text-fill: #2980b9; -fx-border-radius: 5; -fx-background-radius: 15; -fx-border-color: #2980b9; -fx-border-width: 2; -fx-cursor: hand;\" text=\"Logout\" AnchorPane.topAnchor=\"300.0\">\n               <font>\n                  <Font name=\"AppleGothic Regular\" size=\"14.0\" />\n               </font>\n            </Button>\n            <TitledPane fx:id=\"jobAnnouncement\" animated=\"false\" layoutX=\"170.0\" layoutY=\"16.0\" prefHeight=\"345.0\" prefWidth=\"377.0\" style=\"-fx-background-color: #b3d9ff; -fx-text-fill: #2980b9; -fx-border-color: #b3d9ff;\" text=\"Job Announcements Published\">\n               <font>\n                  <Font name=\"AppleGothic Regular\" size=\"14.0\" />\n               </font>\n               <content>\n                  <ListView fx:id=\"jobAnnouncementBeanListView\" prefHeight=\"291.0\" prefWidth=\"373.0\" />\n               </content>\n            </TitledPane>\n            <Separator layoutX=\"143.0\" layoutY=\"-3.0\" opacity=\"0.5\" orientation=\"VERTICAL\" prefHeight=\"473.0\" prefWidth=\"11.0\" style=\"-fx-background-color: #2980b9;\">\n               <effect>\n                  <Glow />\n               </effect>\n            </Separator>\n            <Label layoutX=\"211.0\" layoutY=\"301.0\" style=\"-fx-text-fill: #2980b9;\" text=\"Do you want to publish a job announcement? \" AnchorPane.bottomAnchor=\"80.0\" AnchorPane.leftAnchor=\"220.0\">\n               <font>\n                  <Font name=\"AppleGothic Regular\" size=\"14.0\" />\n               </font>\n            </Label>\n            <Button layoutX=\"236.0\" layoutY=\"344.0\" mnemonicParsing=\"false\" onAction=\"#handlePublishJobAnnouncementButton\" prefHeight=\"41.0\" prefWidth=\"246.0\" style=\"-fx-background-color: #b3d9ff; -fx-text-fill: #2980b9; -fx-border-radius: 5; -fx-background-radius: 15; -fx-border-color: #2980b9; -fx-border-width: 2; -fx-cursor: hand;\" text=\"Publish a Job Announcement\" AnchorPane.bottomAnchor=\"12.0\" AnchorPane.leftAnchor=\"240.0\" AnchorPane.topAnchor=\"398.0\">\n               <font>\n                  <Font name=\"AppleGothic Regular\" size=\"14.0\" />\n               </font>\n            </Button>\n         </children>\n      </AnchorPane>\n   </children>\n</VBox>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/org/example/togetjob/fxml/homerecruiter.fxml b/src/main/resources/org/example/togetjob/fxml/homerecruiter.fxml
--- a/src/main/resources/org/example/togetjob/fxml/homerecruiter.fxml	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/resources/org/example/togetjob/fxml/homerecruiter.fxml	(date 1739621490355)
@@ -53,12 +53,12 @@
                   <Font name="AppleGothic Regular" size="14.0" />
                </font>
             </Button>
-            <TitledPane fx:id="jobAnnouncement" animated="false" layoutX="170.0" layoutY="16.0" prefHeight="345.0" prefWidth="377.0" style="-fx-background-color: #b3d9ff; -fx-text-fill: #2980b9; -fx-border-color: #b3d9ff;" text="Job Announcements Published">
+            <TitledPane fx:id="jobAnnouncement" animated="false" layoutX="170.0" layoutY="16.0" prefHeight="338.0" prefWidth="377.0" style="-fx-background-color: #b3d9ff; -fx-text-fill: #2980b9; -fx-border-color: #b3d9ff;" text="Job Announcements Published">
                <font>
                   <Font name="AppleGothic Regular" size="14.0" />
                </font>
                <content>
-                  <ListView fx:id="jobAnnouncementBeanListView" prefHeight="291.0" prefWidth="373.0" />
+                  <ListView fx:id="jobAnnouncementBeanListView" prefHeight="295.0" prefWidth="373.0" />
                </content>
             </TitledPane>
             <Separator layoutX="143.0" layoutY="-3.0" opacity="0.5" orientation="VERTICAL" prefHeight="473.0" prefWidth="11.0" style="-fx-background-color: #2980b9;">
Index: src/main/java/org/example/togetjob/dao/concretefactorydao/FileSystemFactoryDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concretefactorydao;\n\nimport org.example.togetjob.dao.abstractfactorydao.AbstractFactoryDaoSingleton;\nimport org.example.togetjob.dao.abstractobjects.*;\nimport org.example.togetjob.dao.concreteobjects.*;\nimport org.example.togetjob.model.dao.abstractobjects.*;\nimport org.example.togetjob.model.dao.concreteobjects.*;\n\npublic class FileSystemFactoryDao extends AbstractFactoryDaoSingleton {\n\n    @Override\n    public UserDao createUserDao() { return new FileSystemUserDao(); }\n\n    @Override\n    public JobAnnouncementDao createJobAnnouncementDao() { return new FileSystemJobAnnouncementDao(); }\n\n    @Override\n    public StudentDao createStudentDao() { return new FileSystemStudentDao(); }\n\n    @Override\n    public RecruiterDao createRecruiterDao() { return new FileSystemRecruiterDao(); }\n\n    @Override\n    public JobApplicationDao createJobApplicationDao() { return new FileSystemJobApplicationDao(); }\n\n    @Override\n    public InterviewSchedulingDao createInterviewSchedulingDao() { return new FileSystemInterviewSchedulingDao(); }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concretefactorydao/FileSystemFactoryDao.java b/src/main/java/org/example/togetjob/dao/concretefactorydao/FileSystemFactoryDao.java
--- a/src/main/java/org/example/togetjob/dao/concretefactorydao/FileSystemFactoryDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concretefactorydao/FileSystemFactoryDao.java	(date 1739608745950)
@@ -3,8 +3,6 @@
 import org.example.togetjob.dao.abstractfactorydao.AbstractFactoryDaoSingleton;
 import org.example.togetjob.dao.abstractobjects.*;
 import org.example.togetjob.dao.concreteobjects.*;
-import org.example.togetjob.model.dao.abstractobjects.*;
-import org.example.togetjob.model.dao.concreteobjects.*;
 
 public class FileSystemFactoryDao extends AbstractFactoryDaoSingleton {
 
Index: src/main/java/org/example/togetjob/dao/concretefactorydao/InMemoryFactoryDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concretefactorydao;\n\nimport org.example.togetjob.dao.abstractfactorydao.AbstractFactoryDaoSingleton;\nimport org.example.togetjob.dao.abstractobjects.*;\nimport org.example.togetjob.dao.concreteobjects.*;\nimport org.example.togetjob.model.dao.abstractobjects.*;\nimport org.example.togetjob.model.dao.concreteobjects.*;\n\npublic class InMemoryFactoryDao extends AbstractFactoryDaoSingleton {\n\n    @Override\n    public UserDao createUserDao() { return new InMemoryUserDao(); }\n\n    @Override\n    public JobAnnouncementDao createJobAnnouncementDao() { return new InMemoryJobAnnouncementDao(); }\n\n    @Override\n    public StudentDao createStudentDao() { return new InMemoryStudentDao(); }\n\n    @Override\n    public RecruiterDao createRecruiterDao() { return new InMemoryRecruiterDao(); }\n\n    @Override\n    public JobApplicationDao createJobApplicationDao() { return new InMemoryJobApplicationDao(); }\n\n    @Override\n    public InterviewSchedulingDao createInterviewSchedulingDao() { return new InMemoryInterviewSchedulingDao(); }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concretefactorydao/InMemoryFactoryDao.java b/src/main/java/org/example/togetjob/dao/concretefactorydao/InMemoryFactoryDao.java
--- a/src/main/java/org/example/togetjob/dao/concretefactorydao/InMemoryFactoryDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concretefactorydao/InMemoryFactoryDao.java	(date 1739608755294)
@@ -3,8 +3,6 @@
 import org.example.togetjob.dao.abstractfactorydao.AbstractFactoryDaoSingleton;
 import org.example.togetjob.dao.abstractobjects.*;
 import org.example.togetjob.dao.concreteobjects.*;
-import org.example.togetjob.model.dao.abstractobjects.*;
-import org.example.togetjob.model.dao.concreteobjects.*;
 
 public class InMemoryFactoryDao extends AbstractFactoryDaoSingleton {
 
Index: src/main/java/org/example/togetjob/view/cli/concretestate/HomeRecruiterState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/cli/concretestate/HomeRecruiterState.java b/src/main/java/org/example/togetjob/view/cli/HomeRecruiterState.java
rename from src/main/java/org/example/togetjob/view/cli/concretestate/HomeRecruiterState.java
rename to src/main/java/org/example/togetjob/view/cli/HomeRecruiterState.java
--- a/src/main/java/org/example/togetjob/view/cli/concretestate/HomeRecruiterState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/cli/HomeRecruiterState.java	(date 1739642737309)
@@ -1,10 +1,10 @@
-package org.example.togetjob.view.cli.concretestate;
+package org.example.togetjob.view.cli;
 
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
 import org.example.togetjob.view.boundary.LoginBoundary;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.CliContext;
+import org.example.togetjob.state.CliContext;
 
 import java.util.Scanner;
 
Index: src/main/java/org/example/togetjob/view/gui/concretestate/FilterJobCandidateState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.concretestate;\n\nimport javafx.application.Platform;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\nimport org.example.togetjob.bean.JobAnnouncementBean;\nimport org.example.togetjob.bean.StudentInfoSearchBean;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.Context;\nimport org.example.togetjob.view.State;\nimport org.example.togetjob.view.GUIContext;\nimport org.example.togetjob.view.gui.controllergrafico.FilterJobCandidateRecruiterController;\n\nimport java.io.IOException;\n\npublic class FilterJobCandidateState implements State {\n\n    private final GUIContext context;\n\n    public FilterJobCandidateState(GUIContext context, JobAnnouncementBean jobAnnouncementBean) {\n        this.context = context;\n        this.context.set(\"jobAnnouncement\", jobAnnouncementBean); // Memorizza la bean nel context\n    }\n\n    @Override\n    public void showMenu() {\n        Printer.print(\"Showing Filter Job Candidate by Recruiter...\");\n\n        try {\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/org/example/togetjob/fxml/filterjobcandidatesrecruiter.fxml\"));\n            Scene scene = new Scene(fxmlLoader.load(), 600, 500);\n\n            FilterJobCandidateRecruiterController controller = fxmlLoader.getController();\n            controller.setContext(context);\n\n            Stage stage = context.getStage();\n            if (stage == null) {\n                stage = new Stage();\n                context.setStage(stage);\n            }\n\n            stage.setTitle(\"Filter Job Announcements\");\n            stage.setScene(scene);\n\n            stage.setOnCloseRequest(event -> {\n                Platform.exit();\n                System.exit(0);\n            });\n\n            stage.show();\n\n        } catch (IOException e) {\n            e.printStackTrace();\n            Printer.print(\"Error loading FXML: \" + e.getMessage());\n        }\n    }\n\n    @Override\n    public void goNext(Context context, String event) {\n        GUIContext guiContext = (GUIContext) context;\n\n        switch (event) {\n            case \"contactJobCandidate\":\n                StudentInfoSearchBean studentInfoSearchBean = (StudentInfoSearchBean) guiContext.get(\"studentInfoSearch\");\n                JobAnnouncementBean jobAnnouncementBean = (JobAnnouncementBean) guiContext.get(\"jobAnnouncement\");\n\n                guiContext.setState(new ContactAJobCandidateState(guiContext, studentInfoSearchBean, jobAnnouncementBean));\n                break;\n\n            case \"homeRecruiter\":\n                guiContext.setState(new HomeRecruiterState(guiContext));\n                break;\n\n            default:\n                Printer.print(\"Event not managed.\");\n        }\n    }\n\n    public GUIContext getContext() {\n        return context;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/concretestate/FilterJobCandidateState.java b/src/main/java/org/example/togetjob/view/gui/concretestate/FilterJobCandidateState.java
--- a/src/main/java/org/example/togetjob/view/gui/concretestate/FilterJobCandidateState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/concretestate/FilterJobCandidateState.java	(date 1739642737194)
@@ -4,12 +4,10 @@
 import javafx.fxml.FXMLLoader;
 import javafx.scene.Scene;
 import javafx.stage.Stage;
-import org.example.togetjob.bean.JobAnnouncementBean;
-import org.example.togetjob.bean.StudentInfoSearchBean;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
+import org.example.togetjob.state.GUIContext;
 import org.example.togetjob.view.gui.controllergrafico.FilterJobCandidateRecruiterController;
 
 import java.io.IOException;
@@ -18,15 +16,12 @@
 
     private final GUIContext context;
 
-    public FilterJobCandidateState(GUIContext context, JobAnnouncementBean jobAnnouncementBean) {
+    public FilterJobCandidateState(GUIContext context) {
         this.context = context;
-        this.context.set("jobAnnouncement", jobAnnouncementBean); // Memorizza la bean nel context
     }
 
     @Override
     public void showMenu() {
-        Printer.print("Showing Filter Job Candidate by Recruiter...");
-
         try {
             FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/org/example/togetjob/fxml/filterjobcandidatesrecruiter.fxml"));
             Scene scene = new Scene(fxmlLoader.load(), 600, 500);
@@ -44,7 +39,7 @@
             stage.setScene(scene);
 
             stage.setOnCloseRequest(event -> {
-                Platform.exit();
+                Platform.exit();  // JavaFX
                 System.exit(0);
             });
 
@@ -61,11 +56,8 @@
         GUIContext guiContext = (GUIContext) context;
 
         switch (event) {
-            case "contactJobCandidate":
-                StudentInfoSearchBean studentInfoSearchBean = (StudentInfoSearchBean) guiContext.get("studentInfoSearch");
-                JobAnnouncementBean jobAnnouncementBean = (JobAnnouncementBean) guiContext.get("jobAnnouncement");
-
-                guiContext.setState(new ContactAJobCandidateState(guiContext, studentInfoSearchBean, jobAnnouncementBean));
+            case "filterJobCandidates":
+                guiContext.setState(new ContactAJobCandidateState(guiContext));
                 break;
 
             case "homeRecruiter":
Index: src/main/java/org/example/togetjob/view/cli/concretestate/MainMenuState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/cli/concretestate/MainMenuState.java b/src/main/java/org/example/togetjob/view/cli/MainMenuState.java
rename from src/main/java/org/example/togetjob/view/cli/concretestate/MainMenuState.java
rename to src/main/java/org/example/togetjob/view/cli/MainMenuState.java
--- a/src/main/java/org/example/togetjob/view/cli/concretestate/MainMenuState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/cli/MainMenuState.java	(date 1739642737179)
@@ -1,9 +1,9 @@
-package org.example.togetjob.view.cli.concretestate;
+package org.example.togetjob.view.cli;
 
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
-import org.example.togetjob.view.CliContext;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
+import org.example.togetjob.state.CliContext;
 
 public class MainMenuState implements State{
 
Index: src/main/java/org/example/togetjob/dao/concretefactorydao/DataBaseFactoryDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concretefactorydao;\n\nimport org.example.togetjob.dao.abstractfactorydao.AbstractFactoryDaoSingleton;\nimport org.example.togetjob.dao.abstractobjects.*;\nimport org.example.togetjob.dao.concreteobjects.*;\nimport org.example.togetjob.model.dao.abstractobjects.*;\nimport org.example.togetjob.model.dao.concreteobjects.*;\n\npublic class DataBaseFactoryDao extends AbstractFactoryDaoSingleton {\n\n    private final DataBaseUserDao userDao;\n    private final DataBaseJobAnnouncementDao jobAnnouncementDao;\n    private final DataBaseStudentDao studentDao;\n    private final DataBaseRecruiterDao recruiterDao;\n    private final DataBaseJobApplicationDao jobApplicationDao;\n    private final DataBaseInterviewSchedulingDao interviewSchedulingDao;\n\n    public DataBaseFactoryDao() {\n        this.userDao = new DataBaseUserDao();\n        this.recruiterDao = new DataBaseRecruiterDao(userDao);\n        this.studentDao = new DataBaseStudentDao(userDao, null);\n        this.jobAnnouncementDao = new DataBaseJobAnnouncementDao(recruiterDao);\n        this.jobApplicationDao = new DataBaseJobApplicationDao(jobAnnouncementDao, studentDao);\n        this.interviewSchedulingDao = new DataBaseInterviewSchedulingDao(jobAnnouncementDao, studentDao);\n\n        //loop so:\n        (studentDao).setJobApplicationDao(jobApplicationDao);\n\n    }\n\n    @Override\n    public UserDao createUserDao() { return userDao; }\n\n    @Override\n    public JobAnnouncementDao createJobAnnouncementDao() { return jobAnnouncementDao; }\n\n    @Override\n    public StudentDao createStudentDao() { return studentDao; }\n\n    @Override\n    public DataBaseRecruiterDao createRecruiterDao() { return recruiterDao; }\n\n    @Override\n    public JobApplicationDao createJobApplicationDao() { return jobApplicationDao; }\n\n    @Override\n    public InterviewSchedulingDao createInterviewSchedulingDao() { return interviewSchedulingDao; }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concretefactorydao/DataBaseFactoryDao.java b/src/main/java/org/example/togetjob/dao/concretefactorydao/DataBaseFactoryDao.java
--- a/src/main/java/org/example/togetjob/dao/concretefactorydao/DataBaseFactoryDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concretefactorydao/DataBaseFactoryDao.java	(date 1739608763090)
@@ -3,8 +3,6 @@
 import org.example.togetjob.dao.abstractfactorydao.AbstractFactoryDaoSingleton;
 import org.example.togetjob.dao.abstractobjects.*;
 import org.example.togetjob.dao.concreteobjects.*;
-import org.example.togetjob.model.dao.abstractobjects.*;
-import org.example.togetjob.model.dao.concreteobjects.*;
 
 public class DataBaseFactoryDao extends AbstractFactoryDaoSingleton {
 
Index: src/main/java/org/example/togetjob/view/cli/concretestate/RegisterState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/cli/concretestate/RegisterState.java b/src/main/java/org/example/togetjob/view/cli/RegisterState.java
rename from src/main/java/org/example/togetjob/view/cli/concretestate/RegisterState.java
rename to src/main/java/org/example/togetjob/view/cli/RegisterState.java
--- a/src/main/java/org/example/togetjob/view/cli/concretestate/RegisterState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/cli/RegisterState.java	(date 1739642737314)
@@ -1,15 +1,15 @@
-package org.example.togetjob.view.cli.concretestate;
+package org.example.togetjob.view.cli;
 
 import org.example.togetjob.bean.RecruiterInfoBean;
 import org.example.togetjob.bean.RegisterUserBean;
 import org.example.togetjob.bean.StudentInfoBean;
 import org.example.togetjob.exceptions.DatabaseException;
 import org.example.togetjob.exceptions.UsernameTakeException;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
 import org.example.togetjob.view.boundary.RegisterBoundary;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.CliContext;
+import org.example.togetjob.state.CliContext;
 
 import java.time.LocalDate;
 import java.time.format.DateTimeFormatter;
@@ -77,7 +77,13 @@
 
             if (registrationSuccess) {
                 Printer.print("Registration successful!");
-                context.setState(new MainMenuState());
+
+                if (STUDENT.equalsIgnoreCase(roleInput)) {
+                    context.setState(new HomeStudentState());
+                } else {
+                    context.setState(new HomeRecruiterState());
+                }
+
             } else {
                 Printer.print("Username already exists. Please try again.");
                 context.setState(new RegisterState());
Index: src/main/java/org/example/togetjob/view/cli/concretestate/PublishAJobAnnouncementRecruiterState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/cli/concretestate/PublishAJobAnnouncementRecruiterState.java b/src/main/java/org/example/togetjob/view/cli/PublishAJobAnnouncementRecruiterState.java
rename from src/main/java/org/example/togetjob/view/cli/concretestate/PublishAJobAnnouncementRecruiterState.java
rename to src/main/java/org/example/togetjob/view/cli/PublishAJobAnnouncementRecruiterState.java
--- a/src/main/java/org/example/togetjob/view/cli/concretestate/PublishAJobAnnouncementRecruiterState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/cli/PublishAJobAnnouncementRecruiterState.java	(date 1739642737260)
@@ -1,12 +1,12 @@
-package org.example.togetjob.view.cli.concretestate;
+package org.example.togetjob.view.cli;
 
 import org.example.togetjob.bean.JobAnnouncementBean;
 import org.example.togetjob.exceptions.*;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
 import org.example.togetjob.view.boundary.PublishAJobAnnouncementRecruiterBoundary;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.CliContext;
+import org.example.togetjob.state.CliContext;
 
 import java.util.Scanner;
 
Index: src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.controllergrafico;\n\nimport javafx.fxml.FXML;\nimport javafx.scene.control.TextField;\nimport org.example.togetjob.bean.RegisterUserBean;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.GUIContext;\n\npublic class RegisterController {\n\n    @FXML\n    private TextField usernameField;\n    @FXML\n    private TextField passwordField;\n    @FXML\n    private TextField confirmPasswordField;\n    @FXML\n    private TextField nameField;\n    @FXML\n    private TextField surnameField;\n    @FXML\n    private TextField emailField;\n    @FXML\n    private TextField roleField;\n\n    private GUIContext context;\n\n    public RegisterController() {\n        Printer.print(\"RegisterController created, but context is not yet set!\");\n    }\n\n    public void setContext(GUIContext context) {\n        this.context = context;\n        Printer.print(\"Context set in RegisterController: \" + context);\n    }\n\n    @FXML\n    private void handleBackButton() {\n        if (context != null) {\n            Printer.print(\"Going back to Home...\");\n            context.goNext(\"go_home\");\n        } else {\n            Printer.print(\"Context is NOT initialized in RegisterController!\");\n        }\n    }\n\n    @FXML\n    private void handleHomeButton() {\n        if (context != null) {\n            Printer.print(\"Going to Home screen...\");\n            context.goNext(\"go_home\");\n        } else {\n            Printer.print(\"Context is NOT initialized in RegisterController!\");\n        }\n    }\n\n    @FXML\n    private void handleContinue() {\n        if (context == null) {\n            Printer.print(\"Cannot continue, context is NULL!\");\n            return;\n        }\n\n        String username = usernameField.getText();\n        String password = passwordField.getText();\n        String confirmPassword = confirmPasswordField.getText();\n        String name = nameField.getText();\n        String surname = surnameField.getText();\n        String email = emailField.getText();\n        String role = roleField.getText();\n\n        if (username.isEmpty() || password.isEmpty() || confirmPassword.isEmpty() || name.isEmpty() || surname.isEmpty() || email.isEmpty() || role.isEmpty()) {\n            Printer.print(\"All fields must be filled out!\");\n            return;\n        }\n\n        if (!password.equals(confirmPassword)) {\n            Printer.print(\"Passwords do not match!\");\n            return;\n        }\n\n        RegisterUserBean user = new RegisterUserBean();\n        user.setUsername(username);\n        user.setPassword(password);\n        user.setName(name);\n        user.setSurname(surname);\n        user.setRole(role);\n        user.setEmail(email);\n        Printer.print(\"User created: \" + user);\n\n        context.set(\"user\", user);\n\n        if (role.equalsIgnoreCase(\"student\")) {\n            Printer.print(\"Redirecting to Student registration...\");\n            context.goNext(\"register_student\");\n        } else if (role.equalsIgnoreCase(\"recruiter\")) {\n            Printer.print(\"Redirecting to Recruiter registration...\");\n            context.goNext(\"register_recruiter\");\n        } else {\n            Printer.print(\"Invalid role selected!\");\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterController.java b/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterController.java
--- a/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterController.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterController.java	(date 1739642737256)
@@ -4,7 +4,7 @@
 import javafx.scene.control.TextField;
 import org.example.togetjob.bean.RegisterUserBean;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.GUIContext;
 
 public class RegisterController {
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"0f1658da-9e89-4eda-8f6e-64bb18bca7ca\" name=\"Changes\" comment=\"Registrazione e Login interfacce ok\">\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/config/AppConfig.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/Context.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/GUIContext.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/State.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/module-info.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/module-info.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/Main.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/model/dao/abstractfactorydao/AbstractFactoryDaoSingleton.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/model/dao/abstractfactorydao/AbstractFactoryDaoSingleton.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/model/dao/concreteobjects/DataBaseRecruiterDao.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/model/dao/concreteobjects/DataBaseRecruiterDao.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/abstractstate/CliState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/CliState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/ContactAJobCandidateRecruiterState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/ContactAJobCandidateRecruiterState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/ExitState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/ExitState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/HomeRecruiterState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/HomeRecruiterState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/HomeStudentState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/HomeStudentState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/LoginState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/LoginState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/MainMenuState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/MainMenuState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/PublishAJobAnnouncementRecruiterState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/PublishAJobAnnouncementRecruiterState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/RegisterState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/RegisterState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationRecruiterState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationRecruiterState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationStudentState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationStudentState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/contextstate/CliContext.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/CliContext.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/GUIContext.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/GUIState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/GUIState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/JavaFXApplication.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/ContactAJobCandidateState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/ContactAJobCandidateState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/CreateJobAnnouncementState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/CreateJobAnnouncementState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/FilterJobAnnouncementStudentState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/FilterJobAnnouncementStudentState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/FilterJobCandidateState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/FilterJobCandidateState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/FilteredJobAnnouncementsState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/FilteredJobAnnouncementsState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/HomeRecruiterState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/HomeRecruiterState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/HomeState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/HomeState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/HomeStudentState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/HomeStudentState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RecruiterDisplayFiltersState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RecruiterDisplayFiltersState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterRecruiterState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterRecruiterState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterStudentState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterStudentState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterUserState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterUserState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/SendAJobApplicationRecruiterState.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/SendAJobApplicationRecruiterState.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/ContactAJobCandidateController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/ContactAJobCandidateController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/CreateJobAnnouncementController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/CreateJobAnnouncementController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/FilterJobAnnouncementStudentController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/FilterJobAnnouncementStudentController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/FilterJobCandidateRecruiterController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/FilterJobCandidateRecruiterController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeRecruiterController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeRecruiterController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeStudentController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeStudentController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterRecruiterController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterRecruiterController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterStudentController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterStudentController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/SendAJobApplicationByStudentController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/SendAJobApplicationByStudentController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/SendAJobApplicationRecruiterController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/SendAJobApplicationRecruiterController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/homerecruiter.fxml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/homerecruiter.fxml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/homestudent.fxml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/homestudent.fxml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/ui.config.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/ui.config.properties\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Enum\" />\n        <option value=\"FxmlFile\" />\n        <option value=\"Exception\" />\n        <option value=\"JavaFXApplication\" />\n        <option value=\"Interface\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"RESET_MODE\" value=\"HARD\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;GaiaMeola&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/GaiaMeola/toGetJob.git&quot;,\n    &quot;accountId&quot;: &quot;10ff2728-a55b-45dc-b4f1-a35abedc973c&quot;\n  }\n}</component>\n  <component name=\"HighlightingSettingsPerFile\">\n    <setting file=\"file://$PROJECT_DIR$/src/main/java/org/example/togetjob/Main.java\" root0=\"FORCE_HIGHLIGHTING\" />\n  </component>\n  <component name=\"MavenImportPreferences\">\n    <option name=\"generalSettings\">\n      <MavenGeneralSettings>\n        <option name=\"mavenHomeTypeForPersistence\" value=\"WRAPPER\" />\n      </MavenGeneralSettings>\n    </option>\n  </component>\n  <component name=\"ProblemsViewState\">\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 5\n}</component>\n  <component name=\"ProjectId\" id=\"2nypPqqlu30o2C6FKHNbd1EkQVy\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;Application.HelloApplication.executor&quot;: &quot;Run&quot;,\n    &quot;Application.Main.executor&quot;: &quot;Run&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\n    &quot;SONARLINT_PRECOMMIT_ANALYSIS&quot;: &quot;true&quot;,\n    &quot;extract.method.default.visibility&quot;: &quot;private&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/Users/gaiameola/Desktop/ISPW/toGetJob/src/main/resources/org/example/togetjob&quot;,\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.externalResources&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CreateClassDialog.RecentsKey\">\n      <recent name=\"org.example.togetjob.model.dao.concretefactorydao\" />\n    </key>\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/src/main/resources/org/example/togetjob\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml\" />\n      <recent name=\"$PROJECT_DIR$/src/main/resources/org/example/togetjob\" />\n      <recent name=\"$PROJECT_DIR$/target/classes/org/example/togetjob\" />\n      <recent name=\"$PROJECT_DIR$/target/classes/org/example/togetjob/view\" />\n      <recent name=\"$PROJECT_DIR$/src/main/resources\" />\n    </key>\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\n      <recent name=\"org.example.togetjob\" />\n    </key>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"0f1658da-9e89-4eda-8f6e-64bb18bca7ca\" name=\"Changes\" comment=\"\" />\n      <created>1729955148511</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1729955148511</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"Quinto Commit: Fine Db\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738157742126</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738157742126</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"Sesto Commit: Pattern State CLI prova\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738179850232</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738179850233</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"Settimo Commit: prova Caso d'uso Registrazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738233820826</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738233820826</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"Settimo Commit: prova Caso d'uso Registrazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738234210460</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738234210460</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"Settimo Commit: prova Caso d'uso Registrazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738234584655</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738234584655</updated>\n    </task>\n    <task id=\"LOCAL-00017\" summary=\"Settimo Commit: Caso d'uso Registrazione e Login iniziati\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738255911165</created>\n      <option name=\"number\" value=\"00017\" />\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738255911165</updated>\n    </task>\n    <task id=\"LOCAL-00018\" summary=\"Settimo Commit: Caso d'uso Registrazione e Login completati\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738320033356</created>\n      <option name=\"number\" value=\"00018\" />\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738320033356</updated>\n    </task>\n    <task id=\"LOCAL-00019\" summary=\"Settimo Commit: Aggiunta di HomePageStudent, HomePageRecruiter in modalità cli\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738323917280</created>\n      <option name=\"number\" value=\"00019\" />\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738323917280</updated>\n    </task>\n    <task id=\"LOCAL-00020\" summary=\"Settimo Commit: Inizio del caso d'uso Send A Job Application\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738534877519</created>\n      <option name=\"number\" value=\"00020\" />\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738534877519</updated>\n    </task>\n    <task id=\"LOCAL-00021\" summary=\"Settimo Commit: Inizio del caso d'uso Send A Job Application\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738591871116</created>\n      <option name=\"number\" value=\"00021\" />\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738591871116</updated>\n    </task>\n    <task id=\"LOCAL-00022\" summary=\"Settimo Commit: Prima parte del caso d'uso funzionante\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738602095720</created>\n      <option name=\"number\" value=\"00022\" />\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738602095720</updated>\n    </task>\n    <task id=\"LOCAL-00023\" summary=\"Settimo Commit: Prima parte del caso d'uso funzionante\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738602224321</created>\n      <option name=\"number\" value=\"00023\" />\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738602224321</updated>\n    </task>\n    <task id=\"LOCAL-00024\" summary=\"Settimo Commit: Prima parte del caso d'uso funzionante\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738602353802</created>\n      <option name=\"number\" value=\"00024\" />\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738602353802</updated>\n    </task>\n    <task id=\"LOCAL-00025\" summary=\"Send a Job Application ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738847054568</created>\n      <option name=\"number\" value=\"00025\" />\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738847054568</updated>\n    </task>\n    <task id=\"LOCAL-00026\" summary=\"Send a Job Application ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738859623269</created>\n      <option name=\"number\" value=\"00026\" />\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738859623269</updated>\n    </task>\n    <task id=\"LOCAL-00027\" summary=\"Send a Job Application ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738859799273</created>\n      <option name=\"number\" value=\"00027\" />\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738859799273</updated>\n    </task>\n    <task id=\"LOCAL-00028\" summary=\"Send a Job Application ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738925235487</created>\n      <option name=\"number\" value=\"00028\" />\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738925235487</updated>\n    </task>\n    <task id=\"LOCAL-00029\" summary=\"Send a Job Application ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738935926115</created>\n      <option name=\"number\" value=\"00029\" />\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738935926115</updated>\n    </task>\n    <task id=\"LOCAL-00030\" summary=\"Send a Job Application ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738935935523</created>\n      <option name=\"number\" value=\"00030\" />\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738935935523</updated>\n    </task>\n    <task id=\"LOCAL-00031\" summary=\"Implementazione DATABASE DAO\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738943912969</created>\n      <option name=\"number\" value=\"00031\" />\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738943912969</updated>\n    </task>\n    <task id=\"LOCAL-00032\" summary=\"Implementazione DATABASE DAO\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738945190532</created>\n      <option name=\"number\" value=\"00032\" />\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738945190532</updated>\n    </task>\n    <task id=\"LOCAL-00033\" summary=\"Fine DAO DB che va da testare\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738945926667</created>\n      <option name=\"number\" value=\"00033\" />\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738945926667</updated>\n    </task>\n    <task id=\"LOCAL-00034\" summary=\"Fine DAO DB che va da testare\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739051085131</created>\n      <option name=\"number\" value=\"00034\" />\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739051085131</updated>\n    </task>\n    <task id=\"LOCAL-00035\" summary=\"Interfacce\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739175835404</created>\n      <option name=\"number\" value=\"00035\" />\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739175835404</updated>\n    </task>\n    <task id=\"LOCAL-00036\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739220286799</created>\n      <option name=\"number\" value=\"00036\" />\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739220286800</updated>\n    </task>\n    <task id=\"LOCAL-00037\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739221026328</created>\n      <option name=\"number\" value=\"00037\" />\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739221026328</updated>\n    </task>\n    <task id=\"LOCAL-00038\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739221891152</created>\n      <option name=\"number\" value=\"00038\" />\n      <option name=\"presentableId\" value=\"LOCAL-00038\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739221891152</updated>\n    </task>\n    <task id=\"LOCAL-00039\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739222169196</created>\n      <option name=\"number\" value=\"00039\" />\n      <option name=\"presentableId\" value=\"LOCAL-00039\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739222169196</updated>\n    </task>\n    <task id=\"LOCAL-00040\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739223095546</created>\n      <option name=\"number\" value=\"00040\" />\n      <option name=\"presentableId\" value=\"LOCAL-00040\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739223095546</updated>\n    </task>\n    <task id=\"LOCAL-00041\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739223296491</created>\n      <option name=\"number\" value=\"00041\" />\n      <option name=\"presentableId\" value=\"LOCAL-00041\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739223296491</updated>\n    </task>\n    <task id=\"LOCAL-00042\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739223373958</created>\n      <option name=\"number\" value=\"00042\" />\n      <option name=\"presentableId\" value=\"LOCAL-00042\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739223373958</updated>\n    </task>\n    <task id=\"LOCAL-00043\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739224722991</created>\n      <option name=\"number\" value=\"00043\" />\n      <option name=\"presentableId\" value=\"LOCAL-00043\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739224722991</updated>\n    </task>\n    <task id=\"LOCAL-00044\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739224907675</created>\n      <option name=\"number\" value=\"00044\" />\n      <option name=\"presentableId\" value=\"LOCAL-00044\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739224907675</updated>\n    </task>\n    <task id=\"LOCAL-00045\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739225182526</created>\n      <option name=\"number\" value=\"00045\" />\n      <option name=\"presentableId\" value=\"LOCAL-00045\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739225182526</updated>\n    </task>\n    <task id=\"LOCAL-00046\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739227822961</created>\n      <option name=\"number\" value=\"00046\" />\n      <option name=\"presentableId\" value=\"LOCAL-00046\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739227822961</updated>\n    </task>\n    <task id=\"LOCAL-00047\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739228938425</created>\n      <option name=\"number\" value=\"00047\" />\n      <option name=\"presentableId\" value=\"LOCAL-00047\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739228938425</updated>\n    </task>\n    <task id=\"LOCAL-00048\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739229738949</created>\n      <option name=\"number\" value=\"00048\" />\n      <option name=\"presentableId\" value=\"LOCAL-00048\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739229738949</updated>\n    </task>\n    <task id=\"LOCAL-00049\" summary=\"Duplicazione\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739230414467</created>\n      <option name=\"number\" value=\"00049\" />\n      <option name=\"presentableId\" value=\"LOCAL-00049\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739230414467</updated>\n    </task>\n    <task id=\"LOCAL-00050\" summary=\"commit\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739286252185</created>\n      <option name=\"number\" value=\"00050\" />\n      <option name=\"presentableId\" value=\"LOCAL-00050\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739286252186</updated>\n    </task>\n    <task id=\"LOCAL-00051\" summary=\"commit\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739286944297</created>\n      <option name=\"number\" value=\"00051\" />\n      <option name=\"presentableId\" value=\"LOCAL-00051\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739286944297</updated>\n    </task>\n    <task id=\"LOCAL-00052\" summary=\"commit\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739287156849</created>\n      <option name=\"number\" value=\"00052\" />\n      <option name=\"presentableId\" value=\"LOCAL-00052\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739287156850</updated>\n    </task>\n    <task id=\"LOCAL-00053\" summary=\"Prova: aggiunta di alcune eccezioni\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739296769628</created>\n      <option name=\"number\" value=\"00053\" />\n      <option name=\"presentableId\" value=\"LOCAL-00053\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739296769628</updated>\n    </task>\n    <task id=\"LOCAL-00054\" summary=\"Registrazione e Login interfacce ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739356293943</created>\n      <option name=\"number\" value=\"00054\" />\n      <option name=\"presentableId\" value=\"LOCAL-00054\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739356293944</updated>\n    </task>\n    <task id=\"LOCAL-00055\" summary=\"Registrazione e Login interfacce ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739360362489</created>\n      <option name=\"number\" value=\"00055\" />\n      <option name=\"presentableId\" value=\"LOCAL-00055\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739360362489</updated>\n    </task>\n    <task id=\"LOCAL-00056\" summary=\"Registrazione e Login interfacce ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739360704403</created>\n      <option name=\"number\" value=\"00056\" />\n      <option name=\"presentableId\" value=\"LOCAL-00056\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739360704404</updated>\n    </task>\n    <task id=\"LOCAL-00057\" summary=\"Registrazione e Login interfacce ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739374755923</created>\n      <option name=\"number\" value=\"00057\" />\n      <option name=\"presentableId\" value=\"LOCAL-00057\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739374755923</updated>\n    </task>\n    <task id=\"LOCAL-00058\" summary=\"Registrazione e Login interfacce ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739397926768</created>\n      <option name=\"number\" value=\"00058\" />\n      <option name=\"presentableId\" value=\"LOCAL-00058\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739397926768</updated>\n    </task>\n    <task id=\"LOCAL-00059\" summary=\"Registrazione e Login interfacce ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739533506543</created>\n      <option name=\"number\" value=\"00059\" />\n      <option name=\"presentableId\" value=\"LOCAL-00059\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739533506544</updated>\n    </task>\n    <task id=\"LOCAL-00060\" summary=\"Registrazione e Login interfacce ok\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739540030937</created>\n      <option name=\"number\" value=\"00060\" />\n      <option name=\"presentableId\" value=\"LOCAL-00060\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739540030938</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"61\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Primo Commit\" />\n    <MESSAGE value=\"Secondo Commit: bozza Abstract Factory\" />\n    <MESSAGE value=\"Secondo Commit: Abstract Factory + Singleton completo\" />\n    <MESSAGE value=\"Terzo Commit: Aggiunta Entity\" />\n    <MESSAGE value=\"Terzo Commit: Prova Database\" />\n    <MESSAGE value=\"Quarto Commit: Connection prova\" />\n    <MESSAGE value=\"Quarto Commit: Connection riuscita\" />\n    <MESSAGE value=\"Quinto Commit: Fine Db\" />\n    <MESSAGE value=\"Sesto Commit: Pattern State CLI prova\" />\n    <MESSAGE value=\"Settimo Commit: prova Caso d'uso Registrazione\" />\n    <MESSAGE value=\"Settimo Commit: Caso d'uso Registrazione e Login iniziati\" />\n    <MESSAGE value=\"Settimo Commit: Caso d'uso Registrazione e Login completati\" />\n    <MESSAGE value=\"Settimo Commit: Aggiunta di HomePageStudent, HomePageRecruiter in modalità cli\" />\n    <MESSAGE value=\"Settimo Commit: Inizio del caso d'uso Send A Job Application\" />\n    <MESSAGE value=\"Settimo Commit: Prima parte del caso d'uso funzionante\" />\n    <MESSAGE value=\"Send a Job Application ok\" />\n    <MESSAGE value=\"Implementazione DATABASE DAO\" />\n    <MESSAGE value=\"Fine DAO DB che va da testare\" />\n    <MESSAGE value=\"Interfacce\" />\n    <MESSAGE value=\"Duplicazione\" />\n    <MESSAGE value=\"commit\" />\n    <MESSAGE value=\"Prova: aggiunta di alcune eccezioni\" />\n    <MESSAGE value=\"Registrazione e Login interfacce ok\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Registrazione e Login interfacce ok\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\">\n          <properties class=\"java.lang.NullPointerException\" package=\"java.lang\" />\n          <option name=\"timeStamp\" value=\"14\" />\n        </breakpoint>\n        <breakpoint enabled=\"true\" type=\"java-exception\">\n          <properties class=\"java.sql.SQLException\" package=\"java.sql\" />\n          <option name=\"timeStamp\" value=\"31\" />\n        </breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/.idea/workspace.xml	(date 1739651979171)
@@ -5,30 +5,61 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="0f1658da-9e89-4eda-8f6e-64bb18bca7ca" name="Changes" comment="Registrazione e Login interfacce ok">
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/config/AppConfig.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/Context.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/GUIContext.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/State.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/exceptions/JobApplicationAlreadyProcessedException.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/exceptions/UnauthorizedAccessException.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/inspectionProfiles/Project_Default.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/inspectionProfiles/Project_Default.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/module-info.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/module-info.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/Main.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/model/dao/abstractfactorydao/AbstractFactoryDaoSingleton.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/model/dao/abstractfactorydao/AbstractFactoryDaoSingleton.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/model/dao/concreteobjects/DataBaseRecruiterDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/model/dao/concreteobjects/DataBaseRecruiterDao.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/abstractstate/CliState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/CliState.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/ContactAJobCandidateRecruiterState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/ContactAJobCandidateRecruiterState.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/ExitState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/ExitState.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/HomeRecruiterState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/HomeRecruiterState.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/HomeStudentState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/HomeStudentState.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/LoginState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/LoginState.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/MainMenuState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/MainMenuState.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/PublishAJobAnnouncementRecruiterState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/PublishAJobAnnouncementRecruiterState.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/RegisterState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/RegisterState.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationRecruiterState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationRecruiterState.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationStudentState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationStudentState.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/contextstate/CliContext.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/CliContext.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/GUIContext.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/GUIState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/GUIState.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/JavaFXApplication.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/controller/LoginController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/controller/LoginController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/controller/recruiter/PublishAJobAnnouncementController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/controller/recruiter/PublishAJobAnnouncementController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/controller/registration/AbstractRegisterController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/controller/registration/AbstractRegisterController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/controller/student/SendAJobApplication.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/controller/student/SendAJobApplication.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/abstractfactorydao/AbstractFactoryDaoSingleton.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/abstractfactorydao/AbstractFactoryDaoSingleton.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/abstractobjects/InterviewSchedulingDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/abstractobjects/InterviewSchedulingDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/abstractobjects/JobAnnouncementDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/abstractobjects/JobAnnouncementDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/abstractobjects/JobApplicationDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/abstractobjects/JobApplicationDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/abstractobjects/RecruiterDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/abstractobjects/RecruiterDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/abstractobjects/StudentDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/abstractobjects/StudentDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/abstractobjects/UserDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/abstractobjects/UserDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concretefactorydao/DataBaseFactoryDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concretefactorydao/DataBaseFactoryDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concretefactorydao/FileSystemFactoryDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concretefactorydao/FileSystemFactoryDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concretefactorydao/InMemoryFactoryDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concretefactorydao/InMemoryFactoryDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseInterviewSchedulingDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseInterviewSchedulingDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseJobAnnouncementDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseJobAnnouncementDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseJobApplicationDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseJobApplicationDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseRecruiterDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseRecruiterDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseStudentDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseStudentDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseUserDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseUserDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemInterviewSchedulingDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemInterviewSchedulingDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemJobAnnouncementDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemJobAnnouncementDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemJobApplicationDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemJobApplicationDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemRecruiterDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemRecruiterDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemStudentDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemStudentDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemUserDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemUserDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryInterviewSchedulingDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryInterviewSchedulingDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryJobAnnouncementDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryJobAnnouncementDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryJobApplicationDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryJobApplicationDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryRecruiterDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryRecruiterDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryStudentDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryStudentDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryUserDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryUserDao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/CliContext.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/state/CliContext.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/CliState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/state/CliState.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/Context.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/state/Context.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/GUIContext.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/state/GUIContext.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/GUIState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/state/GUIState.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/State.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/state/State.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationStudentBoundary.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/boundary/SendAJobApplicationStudentBoundary.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/ContactAJobCandidateRecruiterState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/ContactAJobCandidateRecruiterState.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/ExitState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/ExitState.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/HomeRecruiterState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/HomeRecruiterState.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/HomeStudentState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/HomeStudentState.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/LoginState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/LoginState.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/MainMenuState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/MainMenuState.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/PublishAJobAnnouncementRecruiterState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/PublishAJobAnnouncementRecruiterState.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/RegisterState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/RegisterState.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationRecruiterState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/SendAJobApplicationRecruiterState.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/concretestate/SendAJobApplicationStudentState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/cli/SendAJobApplicationStudentState.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/ContactAJobCandidateState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/ContactAJobCandidateState.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/CreateJobAnnouncementState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/CreateJobAnnouncementState.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/FilterJobAnnouncementStudentState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/FilterJobAnnouncementStudentState.java" afterDir="false" />
@@ -37,7 +68,7 @@
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/HomeRecruiterState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/HomeRecruiterState.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/HomeState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/HomeState.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/HomeStudentState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/HomeStudentState.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RecruiterDisplayFiltersState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RecruiterDisplayFiltersState.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RecruiterDisplayFiltersState.java" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterRecruiterState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterRecruiterState.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterStudentState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterStudentState.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterUserState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterUserState.java" afterDir="false" />
@@ -54,8 +85,10 @@
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterStudentController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterStudentController.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/SendAJobApplicationByStudentController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/SendAJobApplicationByStudentController.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/SendAJobApplicationRecruiterController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/SendAJobApplicationRecruiterController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/filteredjobcandidates.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/filteredjobcandidates.fxml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/homerecruiter.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/homerecruiter.fxml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/homestudent.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/homestudent.fxml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/recruitercreatejobannouncement.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/org/example/togetjob/fxml/recruitercreatejobannouncement.fxml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/resources/ui.config.properties" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/ui.config.properties" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -68,10 +101,10 @@
       <list>
         <option value="Enum" />
         <option value="FxmlFile" />
-        <option value="Exception" />
         <option value="JavaFXApplication" />
         <option value="Interface" />
         <option value="Class" />
+        <option value="Exception" />
       </list>
     </option>
   </component>
@@ -88,11 +121,12 @@
   <component name="GithubPullRequestsUISettings">{
   &quot;selectedUrlAndAccountId&quot;: {
     &quot;url&quot;: &quot;https://github.com/GaiaMeola/toGetJob.git&quot;,
-    &quot;accountId&quot;: &quot;10ff2728-a55b-45dc-b4f1-a35abedc973c&quot;
+    &quot;accountId&quot;: &quot;0a1af48d-9cff-4190-bde9-bd5096772376&quot;
   }
 }</component>
   <component name="HighlightingSettingsPerFile">
     <setting file="file://$PROJECT_DIR$/src/main/java/org/example/togetjob/Main.java" root0="FORCE_HIGHLIGHTING" />
+    <setting file="file://$PROJECT_DIR$/src/main/java/org/example/togetjob/view/gui/controllergrafico/FilterJobAnnouncementStudentController.java" root0="FORCE_HIGHLIGHTING" />
   </component>
   <component name="MavenImportPreferences">
     <option name="generalSettings">
@@ -115,6 +149,7 @@
   </component>
   <component name="PropertiesComponent">{
   &quot;keyToString&quot;: {
+    &quot;Application.GUIContext.executor&quot;: &quot;Run&quot;,
     &quot;Application.HelloApplication.executor&quot;: &quot;Run&quot;,
     &quot;Application.Main.executor&quot;: &quot;Run&quot;,
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
@@ -157,14 +192,6 @@
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
       <updated>1729955148511</updated>
-    </task>
-    <task id="LOCAL-00012" summary="Quinto Commit: Fine Db">
-      <option name="closed" value="true" />
-      <created>1738157742126</created>
-      <option name="number" value="00012" />
-      <option name="presentableId" value="LOCAL-00012" />
-      <option name="project" value="LOCAL" />
-      <updated>1738157742126</updated>
     </task>
     <task id="LOCAL-00013" summary="Sesto Commit: Pattern State CLI prova">
       <option name="closed" value="true" />
@@ -550,7 +577,15 @@
       <option name="project" value="LOCAL" />
       <updated>1739540030938</updated>
     </task>
-    <option name="localTasksCounter" value="61" />
+    <task id="LOCAL-00061" summary="Registrazione e Login interfacce ok">
+      <option name="closed" value="true" />
+      <created>1739566090327</created>
+      <option name="number" value="00061" />
+      <option name="presentableId" value="LOCAL-00061" />
+      <option name="project" value="LOCAL" />
+      <updated>1739566090327</updated>
+    </task>
+    <option name="localTasksCounter" value="62" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -603,5 +638,11 @@
         </breakpoint>
       </breakpoints>
     </breakpoint-manager>
+    <watches-manager>
+      <configuration name="Application">
+        <watch expression="context" language="JAVA" />
+        <watch expression="this.currentStage" language="JAVA" />
+      </configuration>
+    </watches-manager>
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/org/example/togetjob/view/gui/concretestate/RegisterStudentState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.concretestate;\n\nimport javafx.application.Platform;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\nimport org.example.togetjob.bean.RegisterUserBean;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.Context;\nimport org.example.togetjob.view.State;\nimport org.example.togetjob.view.GUIContext;\nimport org.example.togetjob.view.gui.controllergrafico.RegisterStudentController;\n\nimport java.io.IOException;\n\npublic class RegisterStudentState implements State {\n\n    private final RegisterUserBean userBean;\n    private final GUIContext context;\n\n    public RegisterStudentState(RegisterUserBean userBean, GUIContext context) {\n        this.userBean = userBean;\n        this.context = context;\n    }\n\n    @Override\n    public void showMenu() {\n        try {\n            Printer.print(\"Showing RegisterStudentState...\");\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/org/example/togetjob/fxml/registerstudent.fxml\"));\n            Parent root = fxmlLoader.load();\n\n            RegisterStudentController registerStudentController = fxmlLoader.getController();\n            registerStudentController.setContext(context);\n            registerStudentController.setUserBean(userBean);\n\n            Scene scene = new Scene(root);\n            Stage stage = context.getStage();\n\n            if (stage == null) {\n                stage = new Stage();\n                context.setStage(stage);\n            }\n\n            stage.setTitle(\"Register Student\");\n            stage.setScene(scene);\n\n            // listener to close the application\n            stage.setOnCloseRequest(event -> {\n                Platform.exit();  // JavaFX\n                System.exit(0);   // process\n            });\n\n            stage.show();\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void goNext(Context context, String event) {\n\n        GUIContext guiContext = (GUIContext) context;\n\n        switch (event) {\n            case \"register_student_complete\":\n                Printer.print(\"Student registration complete, showing HomeStudentState.\");\n                guiContext.setState(new HomeStudentState(guiContext));\n                guiContext.showMenu();\n                break;\n\n            case \"go_home\":\n                Printer.print(\"Going back to HomeState.\");\n                guiContext.setState(new HomeState(guiContext));\n                guiContext.showMenu();\n                break;\n\n            default:\n                Printer.print(\"Unknown event: \" + event);\n                break;\n        }\n    }\n\n    public GUIContext getContext() {\n        return context;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterStudentState.java b/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterStudentState.java
--- a/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterStudentState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterStudentState.java	(date 1739642737200)
@@ -7,9 +7,9 @@
 import javafx.stage.Stage;
 import org.example.togetjob.bean.RegisterUserBean;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
+import org.example.togetjob.state.GUIContext;
 import org.example.togetjob.view.gui.controllergrafico.RegisterStudentController;
 
 import java.io.IOException;
Index: src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterStudentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.controllergrafico;\n\nimport javafx.fxml.FXML;\nimport javafx.scene.control.DatePicker;\nimport javafx.scene.control.TextField;\nimport org.example.togetjob.bean.StudentInfoBean;\nimport org.example.togetjob.bean.RegisterUserBean;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.boundary.RegisterBoundary;\nimport org.example.togetjob.view.GUIContext;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.List;\n\npublic class RegisterStudentController {\n\n    @FXML private TextField phoneField;\n    @FXML private DatePicker birthDateField;\n    @FXML private TextField availabilityField;\n    @FXML private TextField degreesField;\n    @FXML private TextField coursesField;\n    @FXML private TextField certificationsField;\n    @FXML private TextField workExperienceField;\n    @FXML private TextField skillsField;\n\n    private GUIContext context;\n    private RegisterUserBean userBean;\n    private final RegisterBoundary registerBoundary = new RegisterBoundary();\n\n    public void setContext(GUIContext context) {\n        this.context = context;\n    }\n\n    public void setUserBean(RegisterUserBean userBean) {\n        this.userBean = userBean;\n    }\n\n    @FXML\n    private void handleContinue() {\n        String phone = phoneField.getText();\n        String availability = availabilityField.getText();\n\n        if (phone.isEmpty() || availability.isEmpty()) {\n            Printer.print(\"Phone and availability fields must be filled out!\");\n            return;\n        }\n\n        StudentInfoBean studentInfoBean = getStudentInfoBean(phone, availability);\n\n        boolean registrationSuccess = registerBoundary.registerUser(userBean, studentInfoBean);\n\n        if (registrationSuccess) {\n            Printer.print(\"Student successfully registered: \" + studentInfoBean);\n            context.goNext(\"register_student_complete\");\n        } else {\n            Printer.print(\"Registration failed!\");\n        }\n    }\n\n    @NotNull\n    private StudentInfoBean getStudentInfoBean(String phone, String availability) {\n        List<String> degrees = List.of(degreesField.getText().split(\",\"));\n        List<String> coursesAttended = List.of(coursesField.getText().split(\",\"));\n        List<String> certifications = List.of(certificationsField.getText().split(\",\"));\n        List<String> workExperiences = List.of(workExperienceField.getText().split(\",\"));\n        List<String> skills = List.of(skillsField.getText().split(\",\"));\n\n        StudentInfoBean studentInfoBean = new StudentInfoBean();\n        studentInfoBean.setUsername(userBean.getUsername());\n        studentInfoBean.setDateOfBirth(birthDateField.getValue());\n        studentInfoBean.setPhoneNumber(phone);\n        studentInfoBean.setAvailability(availability);\n        studentInfoBean.setDegrees(degrees);\n        studentInfoBean.setCoursesAttended(coursesAttended);\n        studentInfoBean.setCertifications(certifications);\n        studentInfoBean.setWorkExperiences(workExperiences);\n        studentInfoBean.setSkills(skills);\n        return studentInfoBean;\n    }\n\n    @FXML\n    private void handleBackButton() {\n        if (context != null) {\n            Printer.print(\"Going back to Home...\");\n            context.goNext(\"go_home\");\n        } else {\n            Printer.print(\"Context is NOT initialized in RegisterStudentController!\");\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterStudentController.java b/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterStudentController.java
--- a/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterStudentController.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterStudentController.java	(date 1739642737219)
@@ -7,7 +7,7 @@
 import org.example.togetjob.bean.RegisterUserBean;
 import org.example.togetjob.printer.Printer;
 import org.example.togetjob.view.boundary.RegisterBoundary;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.GUIContext;
 import org.jetbrains.annotations.NotNull;
 
 import java.util.List;
Index: src/main/java/org/example/togetjob/controller/registration/AbstractRegisterController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.controller.registration;\n\nimport org.example.togetjob.bean.RegisterUserBean;\nimport org.example.togetjob.exceptions.DatabaseException;\nimport org.example.togetjob.exceptions.UsernameTakeException;\nimport org.example.togetjob.dao.abstractfactorydao.AbstractFactoryDaoSingleton;\nimport org.example.togetjob.dao.abstractobjects.UserDao;\nimport org.example.togetjob.model.entity.User;\n\npublic abstract class AbstractRegisterController {\n\n    protected final UserDao userDao;\n\n    protected AbstractRegisterController(){\n        this.userDao = AbstractFactoryDaoSingleton.getFactoryDao().createUserDao();\n    }\n\n    public boolean registerUser(RegisterUserBean userBean) throws UsernameTakeException , DatabaseException {\n        if(userDao.userExists(userBean.getUsername())){\n            throw new UsernameTakeException(\"Sorry, username \" + userBean.getUsername() + \" is already taken. Please select another one !\"); //User already exists\n        }\n\n        User user = createUser(userBean);\n        boolean saved = userDao.saveUser(user);\n\n        if(saved){\n            saveUserSpecificData(user);\n        }\n\n        return saved;\n    }\n\n    protected abstract User createUser(RegisterUserBean userBean);\n\n    protected abstract void saveUserSpecificData(User user);\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/controller/registration/AbstractRegisterController.java b/src/main/java/org/example/togetjob/controller/registration/AbstractRegisterController.java
--- a/src/main/java/org/example/togetjob/controller/registration/AbstractRegisterController.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/controller/registration/AbstractRegisterController.java	(date 1739641059402)
@@ -7,6 +7,8 @@
 import org.example.togetjob.dao.abstractobjects.UserDao;
 import org.example.togetjob.model.entity.User;
 
+import java.util.Optional;
+
 public abstract class AbstractRegisterController {
 
     protected final UserDao userDao;
@@ -15,15 +17,18 @@
         this.userDao = AbstractFactoryDaoSingleton.getFactoryDao().createUserDao();
     }
 
-    public boolean registerUser(RegisterUserBean userBean) throws UsernameTakeException , DatabaseException {
-        if(userDao.userExists(userBean.getUsername())){
-            throw new UsernameTakeException("Sorry, username " + userBean.getUsername() + " is already taken. Please select another one !"); //User already exists
+    public boolean registerUser(RegisterUserBean userBean) throws UsernameTakeException, DatabaseException {
+
+        Optional<User> existingUser = userDao.getUser(userBean.getUsername());
+
+        if (existingUser.isPresent()) {
+            throw new UsernameTakeException("Sorry, username " + userBean.getUsername() + " is already taken. Please select another one !"); // User already exists
         }
 
         User user = createUser(userBean);
         boolean saved = userDao.saveUser(user);
 
-        if(saved){
+        if (saved) {
             saveUserSpecificData(user);
         }
 
Index: src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemInterviewSchedulingDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concreteobjects;\n\nimport org.example.togetjob.dao.abstractobjects.InterviewSchedulingDao;\nimport org.example.togetjob.model.entity.InterviewScheduling;\nimport org.example.togetjob.model.entity.JobAnnouncement;\nimport org.example.togetjob.model.entity.Student;\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic class FileSystemInterviewSchedulingDao implements InterviewSchedulingDao {\n\n    @Override\n    public void saveInterviewScheduling(InterviewScheduling interviewScheduling) {\n        /* not implemented  */\n    }\n\n    @Override\n    public Optional<InterviewScheduling> getInterviewScheduling(Student student, JobAnnouncement jobAnnouncement) {\n        return Optional.empty();\n    }\n\n    @Override\n    public List<InterviewScheduling> getAllInterviewScheduling(JobAnnouncement jobAnnouncement) {\n        return List.of();\n    }\n\n    @Override\n    public boolean interviewSchedulingExists(Student student, JobAnnouncement jobAnnouncement) {\n        return false;\n    }\n\n    @Override\n    public List<InterviewScheduling> getAllInterviewScheduling(Student student) {\n        return List.of();\n    }\n\n    @Override\n    public void deleteInterviewScheduling(InterviewScheduling interviewScheduling) {\n        /* not implemented */\n    }\n\n    @Override\n    public void updateInterviewScheduling(InterviewScheduling interviewScheduling) {\n        /* not implemented */\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemInterviewSchedulingDao.java b/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemInterviewSchedulingDao.java
--- a/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemInterviewSchedulingDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemInterviewSchedulingDao.java	(date 1739641365341)
@@ -25,11 +25,6 @@
         return List.of();
     }
 
-    @Override
-    public boolean interviewSchedulingExists(Student student, JobAnnouncement jobAnnouncement) {
-        return false;
-    }
-
     @Override
     public List<InterviewScheduling> getAllInterviewScheduling(Student student) {
         return List.of();
Index: src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryUserDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concreteobjects;\n\nimport org.example.togetjob.dao.abstractobjects.UserDao;\nimport org.example.togetjob.model.entity.User;\n\nimport java.util.*;\n\npublic class InMemoryUserDao implements UserDao {\n\n    private static final Map<String, User> users = new HashMap<>();\n\n    @Override\n    public boolean saveUser(User user) {\n        if (users.containsKey(user.obtainUsername())) {\n            return false; // Username exists\n        }\n        users.put(user.obtainUsername(), user);\n        return true;\n    }\n\n    @Override\n    public Optional<User> getUser(String username) {\n        return Optional.ofNullable(users.get(username));\n    }\n\n    @Override\n    public List<User> getAllUsers() {\n        return new ArrayList<>(users.values());\n    }\n\n    @Override\n    public boolean updateUser(User user) {\n        if (!users.containsKey(user.obtainUsername())) {\n            return false; // User does not exist\n        }\n\n        users.put(user.obtainUsername(), user);\n        return true;\n    }\n\n    @Override\n    public boolean deleteUser(String username) {\n        return users.remove(username) != null;\n    }\n\n    @Override\n    public boolean userExists(String username) {\n        return users.containsKey(username);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryUserDao.java b/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryUserDao.java
--- a/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryUserDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryUserDao.java	(date 1739641084109)
@@ -28,23 +28,4 @@
         return new ArrayList<>(users.values());
     }
 
-    @Override
-    public boolean updateUser(User user) {
-        if (!users.containsKey(user.obtainUsername())) {
-            return false; // User does not exist
-        }
-
-        users.put(user.obtainUsername(), user);
-        return true;
-    }
-
-    @Override
-    public boolean deleteUser(String username) {
-        return users.remove(username) != null;
-    }
-
-    @Override
-    public boolean userExists(String username) {
-        return users.containsKey(username);
-    }
 }
Index: src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryRecruiterDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concreteobjects;\n\nimport org.example.togetjob.dao.abstractobjects.RecruiterDao;\nimport org.example.togetjob.model.entity.Recruiter;\n\nimport java.util.*;\n\npublic class InMemoryRecruiterDao implements RecruiterDao {\n\n    private static final Map<String, Recruiter> recruiters = new HashMap<>();\n\n    @Override\n    public void saveRecruiter(Recruiter recruiter) {\n        if (recruiters.containsKey(recruiter.obtainUsername())) {\n            return;\n        }\n        recruiters.put(recruiter.obtainUsername(), recruiter);\n    }\n\n    @Override\n    public Optional<Recruiter> getRecruiter(String username) {\n        return Optional.ofNullable(recruiters.get(username));\n    }\n\n    @Override\n    public boolean updateRecruiter(Recruiter recruiter) {\n        if (!recruiters.containsKey(recruiter.obtainUsername())) {\n            return false;\n        }\n        recruiters.put(recruiter.obtainUsername(), recruiter);\n        return true;\n    }\n\n    @Override\n    public boolean deleteRecruiter(String username) {\n        return recruiters.remove(username) != null;\n    }\n\n    @Override\n    public boolean recruiterExists(String username) {\n        return recruiters.containsKey(username);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryRecruiterDao.java b/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryRecruiterDao.java
--- a/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryRecruiterDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryRecruiterDao.java	(date 1739640841072)
@@ -22,22 +22,4 @@
         return Optional.ofNullable(recruiters.get(username));
     }
 
-    @Override
-    public boolean updateRecruiter(Recruiter recruiter) {
-        if (!recruiters.containsKey(recruiter.obtainUsername())) {
-            return false;
-        }
-        recruiters.put(recruiter.obtainUsername(), recruiter);
-        return true;
-    }
-
-    @Override
-    public boolean deleteRecruiter(String username) {
-        return recruiters.remove(username) != null;
-    }
-
-    @Override
-    public boolean recruiterExists(String username) {
-        return recruiters.containsKey(username);
-    }
 }
Index: src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemJobAnnouncementDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concreteobjects;\n\nimport org.example.togetjob.dao.abstractobjects.JobAnnouncementDao;\nimport org.example.togetjob.model.entity.JobAnnouncement;\nimport org.example.togetjob.model.entity.Recruiter;\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic class FileSystemJobAnnouncementDao implements JobAnnouncementDao {\n\n    @Override\n    public boolean saveJobAnnouncement(JobAnnouncement jobAnnouncement) {\n        return false;\n    }\n\n    @Override\n    public Optional<JobAnnouncement> getJobAnnouncement(String jobTitle, Recruiter recruiter) {\n        return Optional.empty();\n    }\n\n    @Override\n    public boolean updateJobAnnouncement(JobAnnouncement jobAnnouncement) {\n        return false;\n    }\n\n    @Override\n    public boolean deleteJobAnnouncement(JobAnnouncement jobAnnouncement) {\n        return false;\n    }\n\n    @Override\n    public boolean jobAnnouncementExists(String jobTitle, Recruiter recruiter) {\n        return false;\n    }\n\n    @Override\n    public List<JobAnnouncement> getAllJobAnnouncements(Recruiter recruiter) {\n        return List.of();\n    }\n\n    @Override\n    public List<JobAnnouncement> getAllJobAnnouncements() {\n        return List.of();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemJobAnnouncementDao.java b/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemJobAnnouncementDao.java
--- a/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemJobAnnouncementDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemJobAnnouncementDao.java	(date 1739641396823)
@@ -29,11 +29,6 @@
         return false;
     }
 
-    @Override
-    public boolean jobAnnouncementExists(String jobTitle, Recruiter recruiter) {
-        return false;
-    }
-
     @Override
     public List<JobAnnouncement> getAllJobAnnouncements(Recruiter recruiter) {
         return List.of();
Index: src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryInterviewSchedulingDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concreteobjects;\n\nimport org.example.togetjob.dao.abstractobjects.InterviewSchedulingDao;\nimport org.example.togetjob.model.entity.InterviewScheduling;\nimport org.example.togetjob.model.entity.JobAnnouncement;\nimport org.example.togetjob.model.entity.Student;\n\nimport java.util.*;\n\npublic class InMemoryInterviewSchedulingDao implements InterviewSchedulingDao {\n\n    private static final Map<String, Map<JobAnnouncement, InterviewScheduling>> interviewSchedulingMap = new HashMap<>();\n\n    @Override\n    public void saveInterviewScheduling(InterviewScheduling interviewScheduling) {\n\n        String key = generateKey(interviewScheduling.getCandidate());\n\n        Map<JobAnnouncement, InterviewScheduling> jobAnnouncementMap = interviewSchedulingMap.getOrDefault(key, new HashMap<>());\n\n        if (jobAnnouncementMap.containsKey(interviewScheduling.getJobAnnouncement())) {\n            throw new IllegalArgumentException(\"Interview already scheduled for this candidate and job announcement.\");\n        } //Interview Scheduling exists\n\n        // Save\n        jobAnnouncementMap.put(interviewScheduling.getJobAnnouncement(), interviewScheduling);\n        interviewSchedulingMap.put(key, jobAnnouncementMap);\n\n    }\n\n    @Override\n    public Optional<InterviewScheduling> getInterviewScheduling(Student student, JobAnnouncement jobAnnouncement) {\n\n        String key = generateKey(student);\n\n        Map<JobAnnouncement, InterviewScheduling> jobAnnouncementMap = interviewSchedulingMap.get(key);\n        if (jobAnnouncementMap != null) {\n            return Optional.ofNullable(jobAnnouncementMap.get(jobAnnouncement));\n        }\n        return Optional.empty();\n\n    }\n\n    @Override\n    public List<InterviewScheduling> getAllInterviewScheduling(JobAnnouncement jobAnnouncement) {\n        List<InterviewScheduling> result = new ArrayList<>();\n\n        // all the scheduling interview sent\n        for (Map<JobAnnouncement, InterviewScheduling> jobAnnouncementMap : interviewSchedulingMap.values()) {\n            jobAnnouncementMap.values().stream()\n                    .filter(interviewScheduling -> interviewScheduling.getJobAnnouncement().equals(jobAnnouncement))\n                    .forEach(result::add);\n        }\n        return result;\n    }\n\n    @Override\n    public boolean interviewSchedulingExists(Student student, JobAnnouncement jobAnnouncement) {\n        String key = generateKey(student);\n\n        Map<JobAnnouncement, InterviewScheduling> jobAnnouncementMap = interviewSchedulingMap.get(key);\n        return jobAnnouncementMap != null && jobAnnouncementMap.containsKey(jobAnnouncement);\n    }\n\n    @Override\n    public List<InterviewScheduling> getAllInterviewScheduling(Student student) {\n        String key = generateKey(student);\n\n        Map<JobAnnouncement, InterviewScheduling> jobAnnouncementMap = interviewSchedulingMap.get(key);\n\n        if (jobAnnouncementMap != null) {\n            return new ArrayList<>(jobAnnouncementMap.values());\n        }\n        return new ArrayList<>();\n    }\n\n    @Override\n    public void deleteInterviewScheduling(InterviewScheduling interviewScheduling) {\n        String key = generateKey(interviewScheduling.getCandidate());\n\n        Map<JobAnnouncement, InterviewScheduling> jobAnnouncementMap = interviewSchedulingMap.get(key);\n        if (jobAnnouncementMap != null) {\n            jobAnnouncementMap.remove(interviewScheduling.getJobAnnouncement());\n            if (jobAnnouncementMap.isEmpty()) {\n                interviewSchedulingMap.remove(key);\n            }\n        }\n    }\n\n    @Override\n    public void updateInterviewScheduling(InterviewScheduling interviewScheduling) {\n        String key = generateKey(interviewScheduling.getCandidate());\n\n        Map<JobAnnouncement, InterviewScheduling> jobAnnouncementMap = interviewSchedulingMap.get(key);\n        if (jobAnnouncementMap != null && jobAnnouncementMap.containsKey(interviewScheduling.getJobAnnouncement())) {\n            // Update the interview scheduling in the map\n            jobAnnouncementMap.put(interviewScheduling.getJobAnnouncement(), interviewScheduling);\n        } else {\n            throw new IllegalArgumentException(\"Interview scheduling not found for this candidate and job announcement.\");\n        }\n    }\n\n    private String generateKey(Student student) {\n        return student.obtainUsername();\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryInterviewSchedulingDao.java b/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryInterviewSchedulingDao.java
--- a/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryInterviewSchedulingDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryInterviewSchedulingDao.java	(date 1739641355043)
@@ -54,14 +54,6 @@
         return result;
     }
 
-    @Override
-    public boolean interviewSchedulingExists(Student student, JobAnnouncement jobAnnouncement) {
-        String key = generateKey(student);
-
-        Map<JobAnnouncement, InterviewScheduling> jobAnnouncementMap = interviewSchedulingMap.get(key);
-        return jobAnnouncementMap != null && jobAnnouncementMap.containsKey(jobAnnouncement);
-    }
-
     @Override
     public List<InterviewScheduling> getAllInterviewScheduling(Student student) {
         String key = generateKey(student);
Index: src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemRecruiterDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concreteobjects;\n\nimport org.example.togetjob.dao.abstractobjects.RecruiterDao;\nimport org.example.togetjob.model.entity.Recruiter;\nimport org.example.togetjob.model.entity.Role;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class FileSystemRecruiterDao implements RecruiterDao {\n    private static final String PATH_NAME = \"src/main/resources/files_txt/Recruiter.txt\";\n    private static final String DELIMITER = \";\";\n    private static final String COMPANY_SEPARATOR = \",\";\n\n    @Override\n    public void saveRecruiter(Recruiter recruiter) {\n        if (recruiterExists(recruiter.obtainUsername())) {\n            return;\n        }\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(PATH_NAME, true))) {\n            writer.write(formatRecruiterData(recruiter));\n            writer.newLine();\n        } catch (IOException e) {\n            // Handle exception\n        }\n    }\n\n    @Override\n    public Optional<Recruiter> getRecruiter(String username) {\n        return getRecruitersFromFile().stream()\n                .filter(recruiter -> recruiter.obtainUsername().equals(username))\n                .findFirst();\n    }\n\n    @Override\n    public boolean updateRecruiter(Recruiter recruiter) {\n        List<Recruiter> recruiters = getRecruitersFromFile();\n        boolean updated = false;\n\n        for (int i = 0; i < recruiters.size(); i++) {\n            if (recruiters.get(i).obtainUsername().equals(recruiter.obtainUsername())) {\n                recruiters.set(i, recruiter);\n                updated = true;\n                break;\n            }\n        }\n\n        return updated && rewriteRecruitersFile(recruiters);\n    }\n\n    @Override\n    public boolean deleteRecruiter(String username) {\n        List<Recruiter> recruiters = getRecruitersFromFile();\n        boolean removed = recruiters.removeIf(r -> r.obtainUsername().equals(username));\n        return removed && rewriteRecruitersFile(recruiters);\n    }\n\n    @Override\n    public boolean recruiterExists(String username) {\n        return getRecruitersFromFile().stream()\n                .anyMatch(recruiter -> recruiter.obtainUsername().equals(username));\n    }\n\n    private List<Recruiter> getRecruitersFromFile() {\n        List<Recruiter> recruiters = new ArrayList<>();\n        try (BufferedReader reader = new BufferedReader(new FileReader(PATH_NAME))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                parseRecruiterData(line).ifPresent(recruiters::add);\n            }\n        } catch (IOException e) {\n            // Handle exception\n        }\n        return recruiters;\n    }\n\n    private Optional<Recruiter> parseRecruiterData(String line) {\n        String[] data = line.split(DELIMITER);\n        if (data.length >= 7) {\n            try {\n                Role role = Role.valueOf(data[5].trim());\n                if (role == Role.RECRUITER) {\n                    List<String> companies = Arrays.asList(data[6].split(COMPANY_SEPARATOR));\n                    return Optional.of(new Recruiter(\n                            data[0].trim(), data[1].trim(), data[2].trim(),\n                            data[3].trim(), data[4].trim(), role, companies));\n                }\n            } catch (IllegalArgumentException e) {\n                // Handle invalid role exception\n            }\n        }\n        return Optional.empty();\n    }\n\n    private String formatRecruiterData(Recruiter recruiter) {\n        return String.join(DELIMITER,\n                recruiter.obtainName(),\n                recruiter.obtainSurname(),\n                recruiter.obtainUsername(),\n                recruiter.obtainEmailAddress(),\n                recruiter.obtainPassword(),\n                recruiter.obtainRole().toString(),\n                String.join(COMPANY_SEPARATOR, recruiter.obtainCompanies()));\n    }\n\n    private boolean rewriteRecruitersFile(List<Recruiter> recruiters) {\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(PATH_NAME))) {\n            for (Recruiter recruiter : recruiters) {\n                writer.write(formatRecruiterData(recruiter));\n                writer.newLine();\n            }\n            return true;\n        } catch (IOException e) {\n            // Handle exception\n            return false;\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemRecruiterDao.java b/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemRecruiterDao.java
--- a/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemRecruiterDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemRecruiterDao.java	(date 1739640757902)
@@ -32,31 +32,7 @@
                 .findFirst();
     }
 
-    @Override
-    public boolean updateRecruiter(Recruiter recruiter) {
-        List<Recruiter> recruiters = getRecruitersFromFile();
-        boolean updated = false;
-
-        for (int i = 0; i < recruiters.size(); i++) {
-            if (recruiters.get(i).obtainUsername().equals(recruiter.obtainUsername())) {
-                recruiters.set(i, recruiter);
-                updated = true;
-                break;
-            }
-        }
-
-        return updated && rewriteRecruitersFile(recruiters);
-    }
-
-    @Override
-    public boolean deleteRecruiter(String username) {
-        List<Recruiter> recruiters = getRecruitersFromFile();
-        boolean removed = recruiters.removeIf(r -> r.obtainUsername().equals(username));
-        return removed && rewriteRecruitersFile(recruiters);
-    }
-
-    @Override
-    public boolean recruiterExists(String username) {
+    private boolean recruiterExists(String username) {
         return getRecruitersFromFile().stream()
                 .anyMatch(recruiter -> recruiter.obtainUsername().equals(username));
     }
@@ -103,16 +79,4 @@
                 String.join(COMPANY_SEPARATOR, recruiter.obtainCompanies()));
     }
 
-    private boolean rewriteRecruitersFile(List<Recruiter> recruiters) {
-        try (BufferedWriter writer = new BufferedWriter(new FileWriter(PATH_NAME))) {
-            for (Recruiter recruiter : recruiters) {
-                writer.write(formatRecruiterData(recruiter));
-                writer.newLine();
-            }
-            return true;
-        } catch (IOException e) {
-            // Handle exception
-            return false;
-        }
-    }
 }
Index: src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseJobApplicationDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concreteobjects;\n\nimport org.example.togetjob.connection.DatabaseConfig;\nimport org.example.togetjob.exceptions.DatabaseException;\nimport org.example.togetjob.dao.abstractobjects.JobApplicationDao;\nimport org.example.togetjob.model.entity.JobAnnouncement;\nimport org.example.togetjob.model.entity.JobApplication;\nimport org.example.togetjob.model.entity.Status;\nimport org.example.togetjob.model.entity.Student;\n\nimport java.sql.*;\nimport java.sql.Date;\nimport java.time.LocalDate;\nimport java.util.*;\n\npublic class DataBaseJobApplicationDao implements JobApplicationDao {\n\n    // Column names as constants\n    private static final String COLUMN_APPLICATION_DATE = \"ApplicationDate\";\n    private static final String COLUMN_STATUS = \"Status\";\n    private static final String COLUMN_COVER_LETTER = \"CoverLetter\";\n    private static final String COLUMN_JOB_ANNOUNCEMENT_ID = \"JobAnnouncementID\";\n    private static final String COLUMN_USERNAME_STUDENT = \"UsernameStudent\";\n\n    // Error message constants\n    private static final String ERROR_JOB_ANNOUNCEMENT_NOT_FOUND = \"Job Announcement not found\";\n    private static final String ERROR_DATABASE = \"Database error while saving job application\";\n    private static final String ERROR_DATABASE_EXECUTION_FAILED = \"Error executing the insert query\";\n    private static final String ERROR_UNEXPECTED_ERROR = \"Unexpected error occurred while saving the job application\";\n    private static final String ERROR_STUDENT_NOT_FOUND = \"Student not found in the database.\";\n\n\n    // SQL query constants\n    private static final String SQL_INSERT_JOB_APPLICATION = \"INSERT INTO JOBAPPLICATION (ApplicationDate, UsernameStudent, Status, CoverLetter, JobAnnouncementID) VALUES (?, ?, ?, ?, ?)\";\n\n    private static final String SQL_SELECT_JOB_APPLICATION = \"SELECT ApplicationDate, Status, CoverLetter FROM JOBAPPLICATION WHERE UsernameStudent = ? AND JobAnnouncementID = ?\";\n\n    private static final String SQL_UPDATE_JOB_APPLICATION = \"UPDATE JOBAPPLICATION SET Status = ?, CoverLetter = ? WHERE UsernameStudent = ? AND JobAnnouncementID = ?\";\n\n    private static final String SQL_DELETE_JOB_APPLICATION = \"DELETE FROM JOBAPPLICATION WHERE UsernameStudent = ? AND JobAnnouncementID = ?\";\n\n    private static final String SQL_CHECK_JOB_APPLICATION_EXISTS = \"SELECT 1 FROM JOBAPPLICATION WHERE UsernameStudent = ? AND JobAnnouncementID = ? LIMIT 1\";\n\n    private static final String SQL_SELECT_ALL_JOB_APPLICATIONS = \"SELECT ApplicationDate, Status, CoverLetter, JobAnnouncementID, UsernameStudent \"\n            + \"FROM JOBAPPLICATION \"\n            + \"JOIN JobAnnouncement ON JOBAPPLICATION.JobAnnouncementID = JobAnnouncement.ID \"\n            + \"WHERE UsernameStudent = ?\";\n\n    private static final String SQL_SELECT_JOB_APPLICATIONS_BY_ANNOUNCEMENT = \"SELECT ApplicationDate, Status, CoverLetter, UsernameStudent \"\n            + \"FROM `JOBAPPLICATION` \"\n            + \"WHERE `JobAnnouncementID` = ?\";\n\n    private final DataBaseJobAnnouncementDao jobAnnouncementDao;\n    private final DataBaseStudentDao studentDao;\n\n    public DataBaseJobApplicationDao(DataBaseJobAnnouncementDao jobAnnouncementDao, DataBaseStudentDao StudentDao) {\n        this.jobAnnouncementDao = jobAnnouncementDao;\n        this.studentDao = StudentDao;\n    }\n\n    @Override\n    public void saveJobApplication(JobApplication jobApplication) throws DatabaseException{\n        // Retrieve the JobAnnouncement ID\n        int jobAnnouncementIdValue = getJobAnnouncementId(jobApplication);\n\n        // Save the job application using the retrieved ID\n        saveJobApplicationToDatabase(jobApplication, jobAnnouncementIdValue);\n    }\n\n    private int getJobAnnouncementId(JobApplication jobApplication) {\n        try {\n            // Retrieve JobAnnouncement ID\n            Optional<Integer> jobAnnouncementId = jobAnnouncementDao.getJobAnnouncementId(\n                    jobApplication.getJobAnnouncement().obtainJobTitle(),\n                    jobApplication.getJobAnnouncement().getRecruiter().obtainUsername()\n            );\n\n            return jobAnnouncementId.orElseThrow(() ->\n                    new DatabaseException(ERROR_JOB_ANNOUNCEMENT_NOT_FOUND)\n            );\n        } catch (DatabaseException e) {\n            throw e; // Rethrow the specific DatabaseException if caught\n        } catch (Exception e) {\n            throw new DatabaseException(ERROR_UNEXPECTED_ERROR, e); // Catch all other exceptions\n        }\n    }\n\n    private void saveJobApplicationToDatabase(JobApplication jobApplication, int jobAnnouncementIdValue) {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SQL_INSERT_JOB_APPLICATION)) {\n\n            // Set the values in the PreparedStatement\n            stmt.setDate(1, Date.valueOf(jobApplication.obtainApplicationDate()));  // Application Date\n            stmt.setString(2, jobApplication.getStudent().obtainUsername());       // Student Username\n            stmt.setString(3, jobApplication.obtainStatus().toString());           // Status\n            stmt.setString(4, jobApplication.obtainCoverLetter());                 // Cover Letter\n            stmt.setInt(5, jobAnnouncementIdValue);                             // Job Announcement ID\n\n            // Execute the query\n            stmt.executeUpdate();\n\n        } catch (SQLException e) {\n            throw new DatabaseException(ERROR_DATABASE_EXECUTION_FAILED, e);\n        }\n    }\n\n\n    @Override\n    public Optional<JobApplication> getJobApplication(Student student, JobAnnouncement jobAnnouncement)throws DatabaseException {\n        try {\n            Optional<Integer> jobAnnouncementId = jobAnnouncementDao.getJobAnnouncementId(\n                    jobAnnouncement.obtainJobTitle(),\n                    jobAnnouncement.getRecruiter().obtainUsername()\n            );\n\n            int jobAnnouncementIdValue = jobAnnouncementId.orElseThrow(() -> new DatabaseException(ERROR_JOB_ANNOUNCEMENT_NOT_FOUND));\n\n            // Use try-with-resources for both Connection and PreparedStatement\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(SQL_SELECT_JOB_APPLICATION)) {\n\n                stmt.setString(1, student.obtainUsername());\n                stmt.setInt(2, jobAnnouncementIdValue);\n\n                try (ResultSet rs = stmt.executeQuery()) {\n                    if (rs.next()) {\n                        LocalDate applicationDate = rs.getDate(COLUMN_APPLICATION_DATE).toLocalDate();\n                        Status status = Status.valueOf(rs.getString(COLUMN_STATUS).toUpperCase());\n                        String coverLetter = rs.getString(COLUMN_COVER_LETTER);\n\n                        JobApplication jobApplication = new JobApplication(applicationDate, student, status, coverLetter, jobAnnouncement);\n                        return Optional.of(jobApplication);\n                    }\n                }\n            }\n        } catch (SQLException | DatabaseException e) {\n            throw new DatabaseException(ERROR_UNEXPECTED_ERROR, e);\n        }\n\n        // Return Optional.empty() if no job application found\n        return Optional.empty();\n    }\n\n\n    @Override\n    public boolean updateJobApplication(JobApplication jobApplication) throws DatabaseException {\n        try {\n            Optional<Integer> jobAnnouncementId = jobAnnouncementDao.getJobAnnouncementId(\n                    jobApplication.getJobAnnouncement().obtainJobTitle(),\n                    jobApplication.getJobAnnouncement().getRecruiter().obtainUsername()\n            );\n\n            int jobAnnouncementIdValue = jobAnnouncementId.orElseThrow(() -> new DatabaseException(ERROR_JOB_ANNOUNCEMENT_NOT_FOUND));\n\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(SQL_UPDATE_JOB_APPLICATION)) {\n\n                stmt.setString(1, jobApplication.obtainStatus().toString());\n                stmt.setString(2, jobApplication.obtainCoverLetter());\n                stmt.setString(3, jobApplication.getStudent().obtainUsername());\n                stmt.setInt(4, jobAnnouncementIdValue);\n\n                stmt.executeUpdate();\n            }\n        } catch (SQLException | DatabaseException e) {\n            throw new DatabaseException(ERROR_DATABASE);\n        }\n\n        return true;\n    }\n\n    @Override\n    public boolean deleteJobApplication(JobApplication jobApplication) throws DatabaseException {\n        try {\n            Optional<Integer> jobAnnouncementId = jobAnnouncementDao.getJobAnnouncementId(\n                    jobApplication.getJobAnnouncement().obtainJobTitle(),\n                    jobApplication.getJobAnnouncement().getRecruiter().obtainUsername()\n            );\n\n            int jobAnnouncementIdValue = jobAnnouncementId.orElseThrow(() -> new DatabaseException(ERROR_JOB_ANNOUNCEMENT_NOT_FOUND));\n\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(SQL_DELETE_JOB_APPLICATION)) {\n\n                stmt.setString(1, jobApplication.getStudent().obtainUsername());\n                stmt.setInt(2, jobAnnouncementIdValue);\n                stmt.executeUpdate();\n            }\n        } catch (SQLException | DatabaseException e) {\n            throw new DatabaseException(ERROR_DATABASE);\n        }\n\n        return true;\n    }\n\n    @Override\n    public boolean jobApplicationExists(Student student, JobAnnouncement jobAnnouncement) {\n        try {\n            Optional<Integer> jobAnnouncementId = jobAnnouncementDao.getJobAnnouncementId(\n                    jobAnnouncement.obtainJobTitle(),\n                    jobAnnouncement.getRecruiter().obtainUsername()\n            );\n\n            int jobAnnouncementIdValue = jobAnnouncementId.orElseThrow(() -> new DatabaseException(ERROR_JOB_ANNOUNCEMENT_NOT_FOUND));\n\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(SQL_CHECK_JOB_APPLICATION_EXISTS)) {\n\n                stmt.setString(1, student.obtainUsername());\n                stmt.setInt(2, jobAnnouncementIdValue);\n\n                try (ResultSet rs = stmt.executeQuery()) {\n                    return rs.next(); // If a row is returned, the job application exists\n                }\n            }\n        } catch (SQLException | DatabaseException e) {\n            throw new DatabaseException(ERROR_DATABASE);\n        }\n    }\n\n    @Override\n    public List<JobApplication> getAllJobApplications(Student student) throws DatabaseException {\n        List<JobApplication> jobApplications = new ArrayList<>();\n        String username = student.obtainUsername();\n        Map<JobApplication, Integer> jobApplicationToAnnouncementId = new HashMap<>();\n\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SQL_SELECT_ALL_JOB_APPLICATIONS)) {\n\n            stmt.setString(1, username);\n\n            try (ResultSet rs = stmt.executeQuery()) {\n                while (rs.next()) {\n                    LocalDate applicationDate = rs.getDate(COLUMN_APPLICATION_DATE).toLocalDate();\n                    Status status = Status.valueOf(rs.getString(COLUMN_STATUS).toUpperCase());\n                    String coverLetter = rs.getString(COLUMN_COVER_LETTER);\n                    int jobAnnouncementId = rs.getInt(COLUMN_JOB_ANNOUNCEMENT_ID);\n\n                    JobApplication jobApplication = new JobApplication(applicationDate, student, status, coverLetter);\n\n                    jobApplicationToAnnouncementId.put(jobApplication, jobAnnouncementId);\n\n                    jobApplications.add(jobApplication);\n                }\n            }\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error retrieving job applications from the database\", e);\n        }\n\n        if (jobApplicationToAnnouncementId.isEmpty()) {\n            return jobApplications;\n        }\n\n        Map<Integer, JobAnnouncement> jobAnnouncementMap = new HashMap<>();\n        for (int jobAnnouncementId : new HashSet<>(jobApplicationToAnnouncementId.values())) {\n            jobAnnouncementDao.getJobAnnouncementById(jobAnnouncementId)\n                    .ifPresent(jobAnnouncement -> jobAnnouncementMap.put(jobAnnouncementId, jobAnnouncement));\n        }\n\n        for (Map.Entry<JobApplication, Integer> entry : jobApplicationToAnnouncementId.entrySet()) {\n            JobApplication jobApplication = entry.getKey();\n            int jobAnnouncementId = entry.getValue();\n            jobApplication.setJobAnnouncement(jobAnnouncementMap.get(jobAnnouncementId));\n        }\n\n        return jobApplications;\n    }\n\n\n\n    @Override\n    public List<JobApplication> getJobApplicationsByJobAnnouncement(JobAnnouncement jobAnnouncement) throws DatabaseException {\n        List<JobApplication> jobApplications = new ArrayList<>();\n        Set<String> studentUsernames = new HashSet<>();\n\n\n        int jobAnnouncementId = jobAnnouncementDao.getJobAnnouncementId(\n                jobAnnouncement.obtainJobTitle(),\n                jobAnnouncement.getRecruiter().obtainUsername()\n        ).orElseThrow(() -> new DatabaseException(ERROR_JOB_ANNOUNCEMENT_NOT_FOUND));\n\n\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SQL_SELECT_JOB_APPLICATIONS_BY_ANNOUNCEMENT)) {\n\n            stmt.setInt(1, jobAnnouncementId);\n\n            try (ResultSet rs = stmt.executeQuery()) {\n                while (rs.next()) {\n                    LocalDate applicationDate = rs.getDate(COLUMN_APPLICATION_DATE).toLocalDate();\n                    Status status = Status.valueOf(rs.getString(COLUMN_STATUS).toUpperCase());\n                    String coverLetter = rs.getString(COLUMN_COVER_LETTER);\n                    String studentUsername = rs.getString(COLUMN_USERNAME_STUDENT);\n\n\n                    studentUsernames.add(studentUsername);\n\n\n                    JobApplication jobApplication = new JobApplication(applicationDate, status, coverLetter, jobAnnouncement);\n                    jobApplications.add(jobApplication);\n                }\n            }\n        } catch (SQLException e) {\n            throw new DatabaseException(ERROR_DATABASE, e);\n        }\n\n\n        Map<String, Student> studentCache = getStudentsByUsernames(studentUsernames);\n\n\n        int i = 0;\n        for (String studentUsername : studentUsernames) {\n            Student student = studentCache.get(studentUsername);\n\n            if (student != null) {\n                jobApplications.get(i).setStudent(student);\n            } else {\n                throw new DatabaseException(ERROR_STUDENT_NOT_FOUND);\n            }\n            i++;\n        }\n        return jobApplications;\n    }\n\n\n    private Map<String, Student> getStudentsByUsernames(Set<String> studentUsernames) throws DatabaseException {\n        Map<String, Student> studentCache = new HashMap<>();\n\n        for (String username : studentUsernames) {\n            Optional<Student> studentOpt = studentDao.getStudent(username);\n            if (studentOpt.isPresent()) {\n                studentCache.put(username, studentOpt.get());\n            } else {\n                throw new DatabaseException(ERROR_STUDENT_NOT_FOUND);\n            }\n        }\n\n        return studentCache;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseJobApplicationDao.java b/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseJobApplicationDao.java
--- a/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseJobApplicationDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseJobApplicationDao.java	(date 1739641321661)
@@ -39,8 +39,6 @@
 
     private static final String SQL_DELETE_JOB_APPLICATION = "DELETE FROM JOBAPPLICATION WHERE UsernameStudent = ? AND JobAnnouncementID = ?";
 
-    private static final String SQL_CHECK_JOB_APPLICATION_EXISTS = "SELECT 1 FROM JOBAPPLICATION WHERE UsernameStudent = ? AND JobAnnouncementID = ? LIMIT 1";
-
     private static final String SQL_SELECT_ALL_JOB_APPLICATIONS = "SELECT ApplicationDate, Status, CoverLetter, JobAnnouncementID, UsernameStudent "
             + "FROM JOBAPPLICATION "
             + "JOIN JobAnnouncement ON JOBAPPLICATION.JobAnnouncementID = JobAnnouncement.ID "
@@ -143,7 +141,7 @@
 
 
     @Override
-    public boolean updateJobApplication(JobApplication jobApplication) throws DatabaseException {
+    public void updateJobApplication(JobApplication jobApplication) throws DatabaseException {
         try {
             Optional<Integer> jobAnnouncementId = jobAnnouncementDao.getJobAnnouncementId(
                     jobApplication.getJobAnnouncement().obtainJobTitle(),
@@ -166,11 +164,10 @@
             throw new DatabaseException(ERROR_DATABASE);
         }
 
-        return true;
     }
 
     @Override
-    public boolean deleteJobApplication(JobApplication jobApplication) throws DatabaseException {
+    public void deleteJobApplication(JobApplication jobApplication) throws DatabaseException {
         try {
             Optional<Integer> jobAnnouncementId = jobAnnouncementDao.getJobAnnouncementId(
                     jobApplication.getJobAnnouncement().obtainJobTitle(),
@@ -190,32 +187,6 @@
             throw new DatabaseException(ERROR_DATABASE);
         }
 
-        return true;
-    }
-
-    @Override
-    public boolean jobApplicationExists(Student student, JobAnnouncement jobAnnouncement) {
-        try {
-            Optional<Integer> jobAnnouncementId = jobAnnouncementDao.getJobAnnouncementId(
-                    jobAnnouncement.obtainJobTitle(),
-                    jobAnnouncement.getRecruiter().obtainUsername()
-            );
-
-            int jobAnnouncementIdValue = jobAnnouncementId.orElseThrow(() -> new DatabaseException(ERROR_JOB_ANNOUNCEMENT_NOT_FOUND));
-
-            try (Connection conn = DatabaseConfig.getInstance().getConnection();
-                 PreparedStatement stmt = conn.prepareStatement(SQL_CHECK_JOB_APPLICATION_EXISTS)) {
-
-                stmt.setString(1, student.obtainUsername());
-                stmt.setInt(2, jobAnnouncementIdValue);
-
-                try (ResultSet rs = stmt.executeQuery()) {
-                    return rs.next(); // If a row is returned, the job application exists
-                }
-            }
-        } catch (SQLException | DatabaseException e) {
-            throw new DatabaseException(ERROR_DATABASE);
-        }
     }
 
     @Override
Index: src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseJobAnnouncementDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concreteobjects;\n\nimport org.example.togetjob.connection.DatabaseConfig;\nimport org.example.togetjob.exceptions.DatabaseConnectionException;\nimport org.example.togetjob.exceptions.DatabaseException;\nimport org.example.togetjob.dao.abstractobjects.JobAnnouncementDao;\nimport org.example.togetjob.model.entity.JobAnnouncement;\nimport org.example.togetjob.model.entity.Recruiter;\nimport org.example.togetjob.model.factory.JobAnnouncementFactory;\n\nimport java.sql.*;\nimport java.util.*;\n\npublic class DataBaseJobAnnouncementDao implements JobAnnouncementDao {\n\n    private static final String INSERT_JOB_ANNOUNCEMENT =\n            \"INSERT INTO JOBANNOUNCEMENT (JobTitle, JobType, RoleJob, Location, WorkingHours, CompanyName, Salary, Description, isActive, RecruiterName) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n\n    private static final String SELECT_JOB_ANNOUNCEMENT_BY_ID =\n            \"SELECT ID, JobTitle, JobType, RoleJob, Location, WorkingHours, CompanyName, Salary, Description, isActive, RecruiterName FROM JOBANNOUNCEMENT WHERE ID = ?\";\n\n    private static final String SELECT_ALL_JOB_ANNOUNCEMENTS =\n            \"SELECT ID, JobTitle, JobType, RoleJob, Location, WorkingHours, CompanyName, Salary, Description, isActive, RecruiterName FROM JOBANNOUNCEMENT\";\n\n    private static final String DELETE_JOB_ANNOUNCEMENT =\n            \"DELETE FROM JOBANNOUNCEMENT WHERE ID = ?\";\n\n    private static final String SELECT_JOB_ID =\n            \"SELECT ID FROM JOBANNOUNCEMENT WHERE JobTitle = ? AND RecruiterName = ?\";\n\n    private static final String CHECK_EXISTENCE =\n            \"SELECT COUNT(*) FROM JOBANNOUNCEMENT WHERE JobTitle = ? AND RecruiterName = ?\";\n\n    private static final String SELECT_JOB_ANNOUNCEMENTS_BY_RECRUITER =\n            \"SELECT ID, JobTitle, JobType, RoleJob, Location, WorkingHours, CompanyName, Salary, Description, isActive, RecruiterName \" +\n                    \"FROM JOBANNOUNCEMENT WHERE RecruiterName = ?\";\n\n    private static final String COLUMN_JOB_TITLE = \"JobTitle\";\n    private static final String COLUMN_JOB_TYPE = \"JobType\";\n    private static final String COLUMN_ROLE = \"RoleJob\";\n    private static final String COLUMN_LOCATION = \"Location\";\n    private static final String COLUMN_WORKING_HOURS = \"WorkingHours\";\n    private static final String COLUMN_COMPANY_NAME = \"CompanyName\";\n    private static final String COLUMN_SALARY = \"Salary\";\n    private static final String COLUMN_DESCRIPTION = \"Description\";\n    private static final String COLUMN_IS_ACTIVE = \"isActive\";\n    private static final String COLUMN_RECRUITER_NAME = \"RecruiterName\";\n\n    private final DataBaseRecruiterDao recruiterDao;\n\n    public DataBaseJobAnnouncementDao(DataBaseRecruiterDao recruiterDao) {\n        this.recruiterDao = recruiterDao;\n    }\n\n    @Override\n    public boolean saveJobAnnouncement(JobAnnouncement jobAnnouncement) throws DatabaseException {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(INSERT_JOB_ANNOUNCEMENT)) {\n\n            stmt.setString(1, jobAnnouncement.obtainJobTitle());\n            stmt.setString(2, jobAnnouncement.obtainJobType());\n            stmt.setString(3, jobAnnouncement.obtainJobRole());\n            stmt.setString(4, jobAnnouncement.obtainLocation());\n            stmt.setInt(5, jobAnnouncement.obtainWorkingHours());\n            stmt.setString(6, jobAnnouncement.obtainCompanyName());\n            stmt.setDouble(7, jobAnnouncement.obtainSalary());\n            stmt.setString(8, jobAnnouncement.obtainDescription());\n            stmt.setBoolean(9, jobAnnouncement.isJobActive());\n            stmt.setString(10, jobAnnouncement.getRecruiter().obtainUsername());\n\n            return stmt.executeUpdate() > 0;\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error saving job announcement to the database\");\n        }\n    }\n\n    @Override\n    public boolean updateJobAnnouncement(JobAnnouncement jobAnnouncement) throws DatabaseException {\n        return false ;\n    }\n\n    @Override\n    public boolean deleteJobAnnouncement(JobAnnouncement jobAnnouncement) throws DatabaseException {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(DELETE_JOB_ANNOUNCEMENT)) {\n\n            int jobId = getJobAnnouncementId(jobAnnouncement.obtainJobTitle(), jobAnnouncement.getRecruiter().obtainUsername())\n                    .orElseThrow(() -> new DatabaseException(\"Job announcement not found\"));\n\n            stmt.setInt(1, jobId);\n            return stmt.executeUpdate() > 0;\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error deleting job announcement\");\n        }\n    }\n\n    @Override\n    public boolean jobAnnouncementExists(String jobTitle, Recruiter recruiter) throws DatabaseException {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(CHECK_EXISTENCE)) {\n\n            stmt.setString(1, jobTitle);\n            stmt.setString(2, recruiter.obtainUsername());\n            ResultSet rs = stmt.executeQuery();\n            return rs.next() && rs.getInt(1) > 0;\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error checking job announcement existence\");\n        }\n    }\n\n    @Override\n    public List<JobAnnouncement> getAllJobAnnouncements(Recruiter recruiter) {\n        List<JobAnnouncement> jobAnnouncements = new ArrayList<>();\n\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SELECT_JOB_ANNOUNCEMENTS_BY_RECRUITER)) {\n\n            stmt.setString(1, recruiter.obtainUsername());\n            try (ResultSet rs = stmt.executeQuery()) {\n                while (rs.next()) {\n                    jobAnnouncements.add(createJobAnnouncementFromResultSet(rs, recruiter));\n                }\n            }\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error retrieving job announcements for recruiter: \" + recruiter.obtainUsername());\n        }\n\n        return jobAnnouncements;\n    }\n\n\n    @Override\n    public List<JobAnnouncement> getAllJobAnnouncements() throws DatabaseConnectionException {\n        List<JobAnnouncement> jobAnnouncements = new ArrayList<>();\n        List<String> recruiterUsernames = new ArrayList<>();\n\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SELECT_ALL_JOB_ANNOUNCEMENTS);\n             ResultSet rs = stmt.executeQuery()) {\n\n            while (rs.next()) {\n                String jobTitle = rs.getString(COLUMN_JOB_TITLE);\n                String jobType = rs.getString(COLUMN_JOB_TYPE);\n                String role = rs.getString(COLUMN_ROLE);\n                String location = rs.getString(COLUMN_LOCATION);\n                int workingHours = rs.getInt(COLUMN_WORKING_HOURS);\n                String companyName = rs.getString(COLUMN_COMPANY_NAME);\n                double salary = rs.getDouble(COLUMN_SALARY);\n                String description = rs.getString(COLUMN_DESCRIPTION);\n                boolean isActive = rs.getBoolean(COLUMN_IS_ACTIVE);\n                String recruiterName = rs.getString(COLUMN_RECRUITER_NAME);\n\n                JobAnnouncement jobAnnouncement = JobAnnouncementFactory.createJobAnnouncement(\n                        jobTitle, jobType, role, location, workingHours, companyName, salary);\n                JobAnnouncementFactory.completeJobAnnouncement(jobAnnouncement, description, null, isActive);\n                jobAnnouncements.add(jobAnnouncement);\n                recruiterUsernames.add(recruiterName);\n            }\n\n        } catch (SQLException e) {\n            throw new DatabaseConnectionException(\"Error retrieving job announcements from the database\");\n        }\n\n        for (int i = 0; i < jobAnnouncements.size(); i++) {\n            String recruiterName = recruiterUsernames.get(i);\n\n            Optional<Recruiter> recruiterOptional = recruiterDao.getRecruiter(recruiterName);\n            if (recruiterOptional.isPresent()) {\n                Recruiter recruiter = recruiterOptional.get();\n                jobAnnouncements.get(i).setRecruiter(recruiter);\n            } else {\n                jobAnnouncements.get(i).setRecruiter(null);\n            }\n        }\n\n        return jobAnnouncements;\n    }\n\n    @Override\n    public Optional<JobAnnouncement> getJobAnnouncement(String jobTitle, Recruiter recruiter) throws DatabaseException {\n        return getJobAnnouncementId(jobTitle, recruiter.obtainUsername())\n                .flatMap(this::getJobAnnouncementById);\n    }\n\n    public Optional<Integer> getJobAnnouncementId(String jobTitle, String recruiterName) throws DatabaseException {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SELECT_JOB_ID)) {\n\n            stmt.setString(1, jobTitle);\n            stmt.setString(2, recruiterName);\n            ResultSet rs = stmt.executeQuery();\n            if (rs.next()) {\n                return Optional.of(rs.getInt(\"ID\"));\n            }\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error retrieving job announcement ID\");\n        }\n        return Optional.empty();\n    }\n\n    public Optional<JobAnnouncement> getJobAnnouncementById(int jobAnnouncementId) throws DatabaseException {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SELECT_JOB_ANNOUNCEMENT_BY_ID)) {\n\n            stmt.setInt(1, jobAnnouncementId);\n            ResultSet rs = stmt.executeQuery();\n\n            if (rs.next()) {\n\n                String jobTitle = rs.getString(COLUMN_JOB_TITLE);\n                String jobType = rs.getString(COLUMN_JOB_TYPE);\n                String role = rs.getString(COLUMN_ROLE);\n                String location = rs.getString(COLUMN_LOCATION);\n                int workingHours = rs.getInt(COLUMN_WORKING_HOURS);\n                String companyName = rs.getString(COLUMN_COMPANY_NAME);\n                double salary = rs.getDouble(COLUMN_SALARY);\n                String description = rs.getString(COLUMN_DESCRIPTION);\n                boolean isActive = rs.getBoolean(COLUMN_IS_ACTIVE);\n                String recruiterName = rs.getString(COLUMN_RECRUITER_NAME);\n\n                JobAnnouncement jobAnnouncement = JobAnnouncementFactory.createJobAnnouncement(\n                        jobTitle, jobType, role, location, workingHours, companyName, salary);\n                JobAnnouncementFactory.completeJobAnnouncement(jobAnnouncement, description, null, isActive);\n\n                Optional<Recruiter> recruiterOpt = recruiterDao.getRecruiter(recruiterName);\n                if (recruiterOpt.isPresent()) {\n                    jobAnnouncement.setRecruiter(recruiterOpt.get());\n                } else {\n                    jobAnnouncement.setRecruiter(null);\n                }\n\n                return Optional.of(jobAnnouncement);\n            } else {\n                return Optional.empty();\n            }\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error retrieving job announcement by ID\", e);\n        }\n    }\n\n    private JobAnnouncement createJobAnnouncementFromResultSet(ResultSet rs, Recruiter recruiter) throws SQLException {\n\n        JobAnnouncement jobAnnouncement = JobAnnouncementFactory.createJobAnnouncement(rs.getString(COLUMN_JOB_TITLE), rs.getString(COLUMN_JOB_TYPE), rs.getString(COLUMN_ROLE), rs.getString(COLUMN_LOCATION), rs.getInt(COLUMN_WORKING_HOURS), rs.getString(COLUMN_COMPANY_NAME), rs.getDouble(COLUMN_SALARY));\n        JobAnnouncementFactory.completeJobAnnouncement(jobAnnouncement, rs.getString(COLUMN_DESCRIPTION), recruiter, rs.getBoolean(COLUMN_IS_ACTIVE));\n        return jobAnnouncement;\n\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseJobAnnouncementDao.java b/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseJobAnnouncementDao.java
--- a/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseJobAnnouncementDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseJobAnnouncementDao.java	(date 1739641336209)
@@ -94,20 +94,6 @@
         }
     }
 
-    @Override
-    public boolean jobAnnouncementExists(String jobTitle, Recruiter recruiter) throws DatabaseException {
-        try (Connection conn = DatabaseConfig.getInstance().getConnection();
-             PreparedStatement stmt = conn.prepareStatement(CHECK_EXISTENCE)) {
-
-            stmt.setString(1, jobTitle);
-            stmt.setString(2, recruiter.obtainUsername());
-            ResultSet rs = stmt.executeQuery();
-            return rs.next() && rs.getInt(1) > 0;
-        } catch (SQLException e) {
-            throw new DatabaseException("Error checking job announcement existence");
-        }
-    }
-
     @Override
     public List<JobAnnouncement> getAllJobAnnouncements(Recruiter recruiter) {
         List<JobAnnouncement> jobAnnouncements = new ArrayList<>();
Index: src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseRecruiterDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concreteobjects;\n\nimport org.example.togetjob.connection.DatabaseConfig;\nimport org.example.togetjob.exceptions.DatabaseException;\nimport org.example.togetjob.dao.abstractobjects.RecruiterDao;\nimport org.example.togetjob.dao.abstractobjects.UserDao;\nimport org.example.togetjob.model.entity.Recruiter;\nimport org.example.togetjob.model.entity.User;\n\nimport java.sql.*;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class DataBaseRecruiterDao implements RecruiterDao {\n\n    private static final String INSERT_RECRUITER_SQL =\n            \"INSERT INTO RECRUITER (Username, Companies) VALUES (?, ?)\";\n    private static final String SELECT_RECRUITER_BY_USERNAME_SQL =\n            \"SELECT Username, Companies FROM RECRUITER WHERE Username = ?\";\n    private static final String UPDATE_RECRUITER_SQL =\n            \"UPDATE RECRUITER SET Companies = ? WHERE Username = ?\";\n    private static final String DELETE_RECRUITER_SQL =\n            \"DELETE FROM RECRUITER WHERE Username = ?\";\n    private static final String CHECK_RECRUITER_EXISTS_SQL =\n            \"SELECT COUNT(*) FROM RECRUITER WHERE Username = ?\";\n\n    private final UserDao dataBaseUserDao;\n\n    public DataBaseRecruiterDao(UserDao dataBaseUserDao) {\n        this.dataBaseUserDao = dataBaseUserDao;\n    }\n\n    @Override\n    public void saveRecruiter(Recruiter recruiter) throws DatabaseException {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(INSERT_RECRUITER_SQL)) {\n\n            stmt.setString(1, recruiter.obtainUsername());\n            stmt.setString(2, String.join(\",\", recruiter.obtainCompanies())); // Convert list to comma-separated string\n            stmt.executeUpdate();\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error saving user to the database\");\n        }\n    }\n\n    @Override\n    public Optional<Recruiter> getRecruiter(String username) {\n\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SELECT_RECRUITER_BY_USERNAME_SQL)) {\n\n            stmt.setString(1, username);\n            ResultSet rs = stmt.executeQuery();\n\n\n            if (rs.next()) {\n                String companiesString = rs.getString(\"Companies\");\n                List<String> companies = Arrays.stream(companiesString.split(\",\"))\n                        .map(String::trim)\n                        .toList();\n\n                Optional<User> userOptional = dataBaseUserDao.getUser(username);\n                if (userOptional.isPresent()) {\n                    User user = userOptional.get();\n                    Recruiter recruiter = new Recruiter(user.obtainName(), user.obtainSurname(), user.obtainUsername(),\n                            user.obtainEmailAddress(), user.obtainPassword(),\n                            user.obtainRole(), companies);\n                    return Optional.of(recruiter);\n                } else {\n                    return Optional.empty();\n                }\n            }\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error obtaining recruiter from database\");\n        }\n\n        return Optional.empty();\n    }\n\n    @Override\n    public boolean updateRecruiter(Recruiter recruiter) {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(UPDATE_RECRUITER_SQL)) {\n\n            stmt.setString(1, String.join(\",\", recruiter.obtainCompanies())); // Convert list to comma-separated string\n            stmt.setString(2, recruiter.obtainUsername());\n\n            int rowsUpdated = stmt.executeUpdate();\n            return rowsUpdated > 0;\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error updating Recruiter\");\n        }\n    }\n\n    @Override\n    public boolean deleteRecruiter(String username) {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(DELETE_RECRUITER_SQL)) {\n\n            stmt.setString(1, username);\n            int rowsDeleted = stmt.executeUpdate();\n            return rowsDeleted > 0;\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error deleting Recruiter\");\n        }\n    }\n\n    @Override\n    public boolean recruiterExists(String username) {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(CHECK_RECRUITER_EXISTS_SQL)) {\n\n            stmt.setString(1, username);\n            try (ResultSet rs = stmt.executeQuery()) {\n                if (rs.next()) {\n                    int count = rs.getInt(1);\n                    return count > 0;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error Recruiter not found\");\n        }\n\n        return false;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseRecruiterDao.java b/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseRecruiterDao.java
--- a/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseRecruiterDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseRecruiterDao.java	(date 1739640811994)
@@ -18,12 +18,6 @@
             "INSERT INTO RECRUITER (Username, Companies) VALUES (?, ?)";
     private static final String SELECT_RECRUITER_BY_USERNAME_SQL =
             "SELECT Username, Companies FROM RECRUITER WHERE Username = ?";
-    private static final String UPDATE_RECRUITER_SQL =
-            "UPDATE RECRUITER SET Companies = ? WHERE Username = ?";
-    private static final String DELETE_RECRUITER_SQL =
-            "DELETE FROM RECRUITER WHERE Username = ?";
-    private static final String CHECK_RECRUITER_EXISTS_SQL =
-            "SELECT COUNT(*) FROM RECRUITER WHERE Username = ?";
 
     private final UserDao dataBaseUserDao;
 
@@ -78,50 +72,4 @@
         return Optional.empty();
     }
 
-    @Override
-    public boolean updateRecruiter(Recruiter recruiter) {
-        try (Connection conn = DatabaseConfig.getInstance().getConnection();
-             PreparedStatement stmt = conn.prepareStatement(UPDATE_RECRUITER_SQL)) {
-
-            stmt.setString(1, String.join(",", recruiter.obtainCompanies())); // Convert list to comma-separated string
-            stmt.setString(2, recruiter.obtainUsername());
-
-            int rowsUpdated = stmt.executeUpdate();
-            return rowsUpdated > 0;
-        } catch (SQLException e) {
-            throw new DatabaseException("Error updating Recruiter");
-        }
-    }
-
-    @Override
-    public boolean deleteRecruiter(String username) {
-        try (Connection conn = DatabaseConfig.getInstance().getConnection();
-             PreparedStatement stmt = conn.prepareStatement(DELETE_RECRUITER_SQL)) {
-
-            stmt.setString(1, username);
-            int rowsDeleted = stmt.executeUpdate();
-            return rowsDeleted > 0;
-        } catch (SQLException e) {
-            throw new DatabaseException("Error deleting Recruiter");
-        }
-    }
-
-    @Override
-    public boolean recruiterExists(String username) {
-        try (Connection conn = DatabaseConfig.getInstance().getConnection();
-             PreparedStatement stmt = conn.prepareStatement(CHECK_RECRUITER_EXISTS_SQL)) {
-
-            stmt.setString(1, username);
-            try (ResultSet rs = stmt.executeQuery()) {
-                if (rs.next()) {
-                    int count = rs.getInt(1);
-                    return count > 0;
-                }
-            }
-        } catch (SQLException e) {
-            throw new DatabaseException("Error Recruiter not found");
-        }
-
-        return false;
-    }
 }
Index: src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryJobApplicationDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concreteobjects;\n\nimport org.example.togetjob.dao.abstractobjects.JobApplicationDao;\nimport org.example.togetjob.model.entity.JobAnnouncement;\nimport org.example.togetjob.model.entity.JobApplication;\nimport org.example.togetjob.model.entity.Student;\n\nimport java.util.*;\n\npublic class InMemoryJobApplicationDao implements JobApplicationDao {\n\n    private static final Map<String, Map<Student, JobApplication>> jobApplications = new HashMap<>();\n\n    @Override\n    public void saveJobApplication(JobApplication jobApplication) {\n        String key = generateKey(jobApplication);\n        Map<Student, JobApplication> studentMap = jobApplications.getOrDefault(key, new HashMap<>());\n\n        studentMap.put(jobApplication.getStudent(), jobApplication);\n        jobApplications.put(key, studentMap);\n\n    }\n\n    @Override\n    public Optional<JobApplication> getJobApplication(Student student , JobAnnouncement jobAnnouncement ) {\n        String key = generateKey(student, jobAnnouncement);\n\n        Map<Student, JobApplication> studentMap = jobApplications.get(key);\n        return studentMap != null ? Optional.ofNullable(studentMap.get(student)) : Optional.empty();\n    }\n\n    @Override\n    public boolean updateJobApplication(JobApplication jobApplication) {\n        String key = generateKey(jobApplication);\n        Map<Student, JobApplication> studentMap = jobApplications.get(key);\n\n        if (studentMap != null && studentMap.containsKey(jobApplication.getStudent())) {\n            studentMap.put(jobApplication.getStudent(), jobApplication);\n        }\n\n        return true;\n\n    }\n\n    @Override\n    public boolean deleteJobApplication(JobApplication jobApplication) {\n        String key = generateKey(jobApplication);\n        Map<Student, JobApplication> studentMap = jobApplications.get(key);\n\n        if (studentMap != null) {\n            studentMap.remove(jobApplication.getStudent());\n        }\n\n        return true;\n\n    }\n\n    @Override\n    public boolean jobApplicationExists(Student student , JobAnnouncement jobAnnouncement ) {\n        String key = generateKey(student, jobAnnouncement);\n        Map<Student, JobApplication> studentMap = jobApplications.get(key);\n        return studentMap != null && studentMap.containsKey(student);\n    }\n\n\n    @Override\n    public List<JobApplication> getAllJobApplications(Student student) {\n        return jobApplications.values().stream()\n                .map(map -> map.get(student)) //\n                .filter(Objects::nonNull)\n                .toList();\n    }\n\n    @Override\n    public List<JobApplication> getJobApplicationsByJobAnnouncement(JobAnnouncement jobAnnouncement) {\n        return jobApplications.values().stream() //\n                .flatMap(studentMap -> studentMap.values().stream())\n                .filter(application -> application.getJobAnnouncement().equals(jobAnnouncement))\n                .toList();\n    }\n\n\n    private String generateKey(Student student , JobAnnouncement jobAnnouncement){\n\n        return student.obtainUsername() + \"-\" + jobAnnouncement.obtainJobTitle() + \"-\" + jobAnnouncement.getRecruiter().obtainUsername() ;\n    }\n\n    private String generateKey(JobApplication jobApplication) {\n        return jobApplication.getStudent().obtainUsername() + \"-\" + jobApplication.getJobAnnouncement().obtainJobTitle() + \"-\" + jobApplication.getJobAnnouncement().getRecruiter().obtainUsername() ;\n    }\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryJobApplicationDao.java b/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryJobApplicationDao.java
--- a/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryJobApplicationDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryJobApplicationDao.java	(date 1739641346460)
@@ -30,7 +30,7 @@
     }
 
     @Override
-    public boolean updateJobApplication(JobApplication jobApplication) {
+    public void updateJobApplication(JobApplication jobApplication) {
         String key = generateKey(jobApplication);
         Map<Student, JobApplication> studentMap = jobApplications.get(key);
 
@@ -38,12 +38,10 @@
             studentMap.put(jobApplication.getStudent(), jobApplication);
         }
 
-        return true;
-
     }
 
     @Override
-    public boolean deleteJobApplication(JobApplication jobApplication) {
+    public void deleteJobApplication(JobApplication jobApplication) {
         String key = generateKey(jobApplication);
         Map<Student, JobApplication> studentMap = jobApplications.get(key);
 
@@ -51,17 +49,7 @@
             studentMap.remove(jobApplication.getStudent());
         }
 
-        return true;
-
     }
-
-    @Override
-    public boolean jobApplicationExists(Student student , JobAnnouncement jobAnnouncement ) {
-        String key = generateKey(student, jobAnnouncement);
-        Map<Student, JobApplication> studentMap = jobApplications.get(key);
-        return studentMap != null && studentMap.containsKey(student);
-    }
-
 
     @Override
     public List<JobApplication> getAllJobApplications(Student student) {
Index: src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryStudentDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concreteobjects;\n\nimport org.example.togetjob.dao.abstractobjects.StudentDao;\nimport org.example.togetjob.model.entity.Student;\n\nimport java.util.*;\n\npublic class InMemoryStudentDao implements StudentDao {\n\n    private static final Map<String, Student> students = new HashMap<>();\n\n    @Override\n    public void saveStudent(Student student) {\n        if(students.containsKey(student.obtainUsername())){\n            return;\n        }\n        students.put(student.obtainUsername(), student);\n    }\n\n    @Override\n    public Optional<Student> getStudent(String username) {\n        return Optional.ofNullable(students.get(username));\n    }\n\n    @Override\n    public List<Student> getAllStudents() {\n        return new ArrayList<>(students.values());\n    }\n\n    @Override\n    public boolean updateStudent(Student student) {\n        if(!students.containsKey(student.obtainUsername())){\n            return false;\n        }\n        students.put(student.obtainUsername(),student);\n        return true;\n    }\n\n    @Override\n    public boolean deleteStudent(String username) {\n        return students.remove(username) != null;\n    }\n\n    @Override\n    public boolean studentExists(String username) {\n        return students.containsKey(username);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryStudentDao.java b/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryStudentDao.java
--- a/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryStudentDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryStudentDao.java	(date 1739641228346)
@@ -27,22 +27,4 @@
         return new ArrayList<>(students.values());
     }
 
-    @Override
-    public boolean updateStudent(Student student) {
-        if(!students.containsKey(student.obtainUsername())){
-            return false;
-        }
-        students.put(student.obtainUsername(),student);
-        return true;
-    }
-
-    @Override
-    public boolean deleteStudent(String username) {
-        return students.remove(username) != null;
-    }
-
-    @Override
-    public boolean studentExists(String username) {
-        return students.containsKey(username);
-    }
 }
Index: src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemJobApplicationDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concreteobjects;\n\nimport org.example.togetjob.dao.abstractobjects.JobApplicationDao;\nimport org.example.togetjob.model.entity.JobAnnouncement;\nimport org.example.togetjob.model.entity.JobApplication;\nimport org.example.togetjob.model.entity.Student;\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic class FileSystemJobApplicationDao implements JobApplicationDao {\n    @Override\n    public void saveJobApplication(JobApplication jobApplication) {\n        /* not implemented  */\n    }\n\n    @Override\n    public Optional<JobApplication> getJobApplication(Student student, JobAnnouncement jobAnnouncement) {\n        return Optional.empty();\n    }\n\n    @Override\n    public boolean updateJobApplication(JobApplication jobApplication) {\n        /* not implemented  */\n        return false;\n    }\n\n    @Override\n    public boolean deleteJobApplication(JobApplication jobApplication) {\n        /* not implemented  */\n        return false;\n    }\n\n    @Override\n    public boolean jobApplicationExists(Student student, JobAnnouncement jobAnnouncement) {\n        return false;\n    }\n\n    @Override\n    public List<JobApplication> getAllJobApplications(Student student) {\n        return List.of();\n    }\n\n    @Override\n    public List<JobApplication> getJobApplicationsByJobAnnouncement(JobAnnouncement jobAnnouncement) {\n        return List.of();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemJobApplicationDao.java b/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemJobApplicationDao.java
--- a/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemJobApplicationDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemJobApplicationDao.java	(date 1739641295329)
@@ -20,20 +20,13 @@
     }
 
     @Override
-    public boolean updateJobApplication(JobApplication jobApplication) {
+    public void updateJobApplication(JobApplication jobApplication) {
         /* not implemented  */
-        return false;
     }
 
     @Override
-    public boolean deleteJobApplication(JobApplication jobApplication) {
+    public void deleteJobApplication(JobApplication jobApplication) {
         /* not implemented  */
-        return false;
-    }
-
-    @Override
-    public boolean jobApplicationExists(Student student, JobAnnouncement jobAnnouncement) {
-        return false;
     }
 
     @Override
Index: src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseStudentDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>    package org.example.togetjob.dao.concreteobjects;\n\n    import org.example.togetjob.connection.DatabaseConfig;\n    import org.example.togetjob.exceptions.DatabaseException;\n    import org.example.togetjob.dao.abstractobjects.StudentDao;\n    import org.example.togetjob.model.entity.JobApplication;\n    import org.example.togetjob.model.entity.Student;\n    import org.example.togetjob.model.entity.User;\n\n    import java.sql.*;\n    import java.sql.Date;\n    import java.time.LocalDate;\n    import java.util.*;\n\n    public class DataBaseStudentDao implements StudentDao {\n\n        private static final String INSERT_STUDENT_SQL =\n                \"INSERT INTO STUDENT (Username, DateOfBirth, PhoneNumber, Degrees, CourseAttended, Certifications, WorkExperience, Skills, Availability) \"\n                        + \"VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n\n        private static final String SELECT_STUDENT_SQL =\n                \"SELECT DateOfBirth, PhoneNumber, Degrees, CourseAttended, Certifications, WorkExperience, Skills, Availability \"\n                        + \"FROM STUDENT WHERE Username = ?\";\n\n        private static final String SELECT_ALL_STUDENTS_SQL =\n                \"SELECT Username, DateOfBirth, PhoneNumber, Degrees, CourseAttended, Certifications, WorkExperience, Skills, Availability \"\n                        + \"FROM STUDENT\";\n\n        private static final String UPDATE_STUDENT_SQL =\n                \"UPDATE STUDENT SET DateOfBirth = ?, PhoneNumber = ?, Degrees = ?, CourseAttended = ?, Certifications = ?, \"\n                        + \"WorkExperience = ?, Skills = ?, Availability = ? WHERE Username = ?\";\n\n        private static final String DELETE_STUDENT_SQL =\n                \"DELETE FROM STUDENT WHERE Username = ?\";\n\n        private static final String CHECK_STUDENT_EXISTS_SQL =\n                \"SELECT COUNT(*) FROM STUDENT WHERE Username = ?\";\n\n        private static final String COLUMN_DATE_OF_BIRTH = \"DateOfBirth\";\n        private static final String COLUMN_PHONE_NUMBER = \"PhoneNumber\";\n        private static final String COLUMN_DEGREES = \"Degrees\";\n        private static final String COLUMN_COURSE_ATTENDED = \"CourseAttended\";\n        private static final String COLUMN_CERTIFICATIONS = \"Certifications\";\n        private static final String COLUMN_WORK_EXPERIENCE = \"WorkExperience\";\n        private static final String COLUMN_SKILLS = \"Skills\";\n        private static final String COLUMN_AVAILABILITY = \"Availability\";\n\n        private final DataBaseUserDao dataBaseUserDao;\n        private DataBaseJobApplicationDao jobApplicationDao;\n\n        public DataBaseStudentDao(DataBaseUserDao dataBaseUserDao, DataBaseJobApplicationDao jobApplicationDao) {\n            this.dataBaseUserDao = dataBaseUserDao;\n            this.jobApplicationDao = jobApplicationDao;\n        }\n\n        public void setJobApplicationDao(DataBaseJobApplicationDao jobApplicationDao) {\n            this.jobApplicationDao = jobApplicationDao;\n        }\n\n\n        @Override\n        public void saveStudent(Student student) throws DatabaseException {\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(INSERT_STUDENT_SQL)) {\n\n                stmt.setString(1, student.obtainUsername());\n                stmt.setDate(2, Date.valueOf(student.obtainDateOfBirth()));\n                stmt.setString(3, student.obtainPhoneNumber());\n                stmt.setString(4, String.join(\",\", student.obtainDegrees()));\n                stmt.setString(5, String.join(\",\", student.obtainCoursesAttended()));\n                stmt.setString(6, String.join(\",\", student.obtainCertifications()));\n                stmt.setString(7, String.join(\",\", student.obtainWorkExperiences()));\n                stmt.setString(8, String.join(\",\", student.obtainSkills()));\n                stmt.setString(9, student.obtainAvailability());\n\n                stmt.executeUpdate();\n            } catch (SQLException e) {\n                throw new DatabaseException(\"Error save student\");\n            }\n        }\n\n        @Override\n        public Optional<Student> getStudent(String username) {\n            Optional<User> userOptional = dataBaseUserDao.getUser(username);\n\n            if (userOptional.isEmpty()) {\n                return Optional.empty();\n            }\n\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(SELECT_STUDENT_SQL)) {\n\n                stmt.setString(1, username);\n                ResultSet rs = stmt.executeQuery();\n\n                if (rs.next()) {\n                    User user = userOptional.get();\n\n                    LocalDate dateOfBirth = rs.getDate(COLUMN_DATE_OF_BIRTH).toLocalDate();\n                    String phoneNumber = rs.getString(COLUMN_PHONE_NUMBER);\n                    String degreesStr = rs.getString(COLUMN_DEGREES);\n                    List<String> degrees = degreesStr != null ? List.of(degreesStr.split(\",\")) : Collections.emptyList();\n\n                    String courseAttendedStr = rs.getString(COLUMN_COURSE_ATTENDED);\n                    List<String> courseAttended = courseAttendedStr != null ? List.of(courseAttendedStr.split(\",\")) : Collections.emptyList();\n\n                    String certificationsStr = rs.getString(COLUMN_CERTIFICATIONS);\n                    List<String> certifications = certificationsStr != null ? List.of(certificationsStr.split(\",\")) : Collections.emptyList();\n\n                    String workExperienceStr = rs.getString(COLUMN_WORK_EXPERIENCE);\n                    List<String> workExperiences = workExperienceStr != null ? List.of(workExperienceStr.split(\",\")) : Collections.emptyList();\n\n                    String skillsStr = rs.getString(COLUMN_SKILLS);\n                    List<String> skills = skillsStr != null ? List.of(skillsStr.split(\",\")) : Collections.emptyList();\n\n                    String availability = rs.getString(COLUMN_AVAILABILITY);\n\n                    Student student = new Student(\n                            user.obtainName(),            // name\n                            user.obtainSurname(),         // surname\n                            user.obtainUsername(),        // username\n                            user.obtainEmailAddress(),    // emailAddress\n                            user.obtainPassword(),        // password\n                            user.obtainRole(),            // role\n                            dateOfBirth                // dateOfBirth\n                    );\n\n                    student.setPhoneNumber(phoneNumber);             // phoneNumber\n                    student.setDegrees(degrees);                     // degrees\n                    student.setCoursesAttended(courseAttended);      // courses attended\n                    student.setCertifications(certifications);       // certifications\n                    student.setWorkExperiences(workExperiences);     // work experiences\n                    student.setSkills(skills);                       // skills\n                    student.setAvailability(availability);           // availability\n                    student.setJobApplications(new ArrayList<>());     // jobApplications\n\n                    if (jobApplicationDao != null) {\n                        List<JobApplication> jobApplications = jobApplicationDao.getAllJobApplications(student);\n                        student.setJobApplications(jobApplications);\n                    }\n\n                    return Optional.of(student);\n                }\n            } catch (SQLException e) {\n                throw new DatabaseException(\"Error obtaining student for username: \" + username + \", SQL error: \" + e.getMessage(), e);\n            }\n            return Optional.empty();\n        }\n\n\n        @Override\n        public List<Student> getAllStudents() throws DatabaseException {\n            try {\n                List<Student> students = new ArrayList<>();\n                List<User> users = dataBaseUserDao.getAllUsers();\n                Map<String, Student> studentMap = getStudentsDetails(users);\n\n                for (Student student : studentMap.values()) {\n                    List<JobApplication> jobApplications = jobApplicationDao.getAllJobApplications(student);\n                    student.setJobApplications(jobApplications);\n                    students.add(student);\n                }\n                return students;\n            }catch(DatabaseException e){\n                throw new DatabaseException(e.getMessage()) ;\n            }\n        }\n\n        private Map<String, Student> getStudentsDetails(List<User> users) throws DatabaseException{\n            Map<String, Student> studentMap = new HashMap<>();\n\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(SELECT_ALL_STUDENTS_SQL);\n                 ResultSet rs = stmt.executeQuery()) {\n\n                while (rs.next()) {\n                    String username = rs.getString(\"Username\");\n\n                    User user = findUserByUsername(users, username);\n                    if (user == null) {\n                        continue;\n                    }\n\n                    LocalDate dateOfBirth = rs.getDate(COLUMN_DATE_OF_BIRTH) != null ? rs.getDate(COLUMN_DATE_OF_BIRTH).toLocalDate() : null;\n                    String phoneNumber = rs.getString(COLUMN_PHONE_NUMBER);\n\n                    List<String> degrees = convertCsvToList(rs.getString(COLUMN_DEGREES));\n                    List<String> courseAttended = convertCsvToList(rs.getString(COLUMN_COURSE_ATTENDED));\n                    List<String> certifications = convertCsvToList(rs.getString(COLUMN_CERTIFICATIONS));\n                    List<String> workExperiences = convertCsvToList(rs.getString(COLUMN_WORK_EXPERIENCE));\n                    List<String> skills = convertCsvToList(rs.getString(COLUMN_SKILLS));\n                    String availability = rs.getString(COLUMN_AVAILABILITY);\n\n\n                    Student student = new Student(\n                            user.obtainName(),             // name\n                            user.obtainSurname(),          // surname\n                            user.obtainUsername(),         // username\n                            user.obtainEmailAddress(),     // emailAddress\n                            user.obtainPassword(),         // password\n                            user.obtainRole(),             // role\n                            dateOfBirth                 // dateOfBirth\n                    );\n\n                    student.setPhoneNumber(phoneNumber);             // phoneNumber\n                    student.setDegrees(degrees);                     // degrees\n                    student.setCoursesAttended(courseAttended);      // courses attended\n                    student.setCertifications(certifications);       // certifications\n                    student.setWorkExperiences(workExperiences);     // work experiences\n                    student.setSkills(skills);                       // skills\n                    student.setAvailability(availability);           // availability\n                    student.setJobApplications(null);                 // jobApplications, null\n                    studentMap.put(username, student);\n                }\n            } catch (SQLException e) {\n                throw new DatabaseException(\"Error obtaining student details\", e);\n            }\n\n            return studentMap;\n        }\n\n        private User findUserByUsername(List<User> users, String username) {\n            for (User user : users) {\n                if (user.obtainUsername().equals(username)) {\n                    return user;\n                }\n            }\n            return null;\n        }\n\n        private List<String> convertCsvToList(String csvData) {\n            if (csvData == null || csvData.isEmpty()) {\n                return new ArrayList<>();\n            }\n            return List.of(csvData.split(\",\"));\n        }\n\n        @Override\n        public boolean updateStudent(Student student) {\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(UPDATE_STUDENT_SQL)) {\n\n                stmt.setDate(1, Date.valueOf(student.obtainDateOfBirth()));\n                stmt.setString(2, student.obtainPhoneNumber());\n                stmt.setString(3, String.join(\",\", student.obtainDegrees()));\n                stmt.setString(4, String.join(\",\", student.obtainCoursesAttended()));\n                stmt.setString(5, String.join(\",\", student.obtainCertifications()));\n                stmt.setString(6, String.join(\",\", student.obtainWorkExperiences()));\n                stmt.setString(7, String.join(\",\", student.obtainSkills()));\n                stmt.setString(8, student.obtainAvailability());\n                stmt.setString(9, student.obtainUsername());\n\n                int rowsUpdated = stmt.executeUpdate();\n                return rowsUpdated > 0;\n            } catch (SQLException e) {\n                throw new DatabaseException(\"Error updating student\");\n            }\n        }\n\n        @Override\n        public boolean deleteStudent(String username) {\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(DELETE_STUDENT_SQL)) {\n\n                stmt.setString(1, username);\n                int rowsDeleted = stmt.executeUpdate();\n                return rowsDeleted > 0;\n            } catch (SQLException e) {\n                throw new DatabaseException(\"Error deleting student\");\n            }\n        }\n\n        @Override\n        public boolean studentExists(String username) {\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(CHECK_STUDENT_EXISTS_SQL)) {\n\n                stmt.setString(1, username);\n                ResultSet rs = stmt.executeQuery();\n                return rs.next() && rs.getInt(1) > 0;\n            } catch (SQLException e) {\n                throw new DatabaseException(\"Error Student not found\");\n            }\n        }\n\n    }\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseStudentDao.java b/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseStudentDao.java
--- a/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseStudentDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseStudentDao.java	(date 1739641215085)
@@ -26,16 +26,6 @@
                 "SELECT Username, DateOfBirth, PhoneNumber, Degrees, CourseAttended, Certifications, WorkExperience, Skills, Availability "
                         + "FROM STUDENT";
 
-        private static final String UPDATE_STUDENT_SQL =
-                "UPDATE STUDENT SET DateOfBirth = ?, PhoneNumber = ?, Degrees = ?, CourseAttended = ?, Certifications = ?, "
-                        + "WorkExperience = ?, Skills = ?, Availability = ? WHERE Username = ?";
-
-        private static final String DELETE_STUDENT_SQL =
-                "DELETE FROM STUDENT WHERE Username = ?";
-
-        private static final String CHECK_STUDENT_EXISTS_SQL =
-                "SELECT COUNT(*) FROM STUDENT WHERE Username = ?";
-
         private static final String COLUMN_DATE_OF_BIRTH = "DateOfBirth";
         private static final String COLUMN_PHONE_NUMBER = "PhoneNumber";
         private static final String COLUMN_DEGREES = "Degrees";
@@ -235,52 +225,4 @@
             return List.of(csvData.split(","));
         }
 
-        @Override
-        public boolean updateStudent(Student student) {
-            try (Connection conn = DatabaseConfig.getInstance().getConnection();
-                 PreparedStatement stmt = conn.prepareStatement(UPDATE_STUDENT_SQL)) {
-
-                stmt.setDate(1, Date.valueOf(student.obtainDateOfBirth()));
-                stmt.setString(2, student.obtainPhoneNumber());
-                stmt.setString(3, String.join(",", student.obtainDegrees()));
-                stmt.setString(4, String.join(",", student.obtainCoursesAttended()));
-                stmt.setString(5, String.join(",", student.obtainCertifications()));
-                stmt.setString(6, String.join(",", student.obtainWorkExperiences()));
-                stmt.setString(7, String.join(",", student.obtainSkills()));
-                stmt.setString(8, student.obtainAvailability());
-                stmt.setString(9, student.obtainUsername());
-
-                int rowsUpdated = stmt.executeUpdate();
-                return rowsUpdated > 0;
-            } catch (SQLException e) {
-                throw new DatabaseException("Error updating student");
-            }
-        }
-
-        @Override
-        public boolean deleteStudent(String username) {
-            try (Connection conn = DatabaseConfig.getInstance().getConnection();
-                 PreparedStatement stmt = conn.prepareStatement(DELETE_STUDENT_SQL)) {
-
-                stmt.setString(1, username);
-                int rowsDeleted = stmt.executeUpdate();
-                return rowsDeleted > 0;
-            } catch (SQLException e) {
-                throw new DatabaseException("Error deleting student");
-            }
-        }
-
-        @Override
-        public boolean studentExists(String username) {
-            try (Connection conn = DatabaseConfig.getInstance().getConnection();
-                 PreparedStatement stmt = conn.prepareStatement(CHECK_STUDENT_EXISTS_SQL)) {
-
-                stmt.setString(1, username);
-                ResultSet rs = stmt.executeQuery();
-                return rs.next() && rs.getInt(1) > 0;
-            } catch (SQLException e) {
-                throw new DatabaseException("Error Student not found");
-            }
-        }
-
     }
Index: src/main/resources/org/example/togetjob/fxml/filteredjobcandidates.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import javafx.geometry.Insets?>\n<?import javafx.geometry.Rectangle2D?>\n<?import javafx.scene.Cursor?>\n<?import javafx.scene.control.Button?>\n<?import javafx.scene.control.TableColumn?>\n<?import javafx.scene.control.TableView?>\n<?import javafx.scene.image.Image?>\n<?import javafx.scene.image.ImageView?>\n<?import javafx.scene.layout.AnchorPane?>\n<?import javafx.scene.layout.VBox?>\n<?import javafx.scene.text.Font?>\n\n<VBox alignment=\"CENTER\" prefHeight=\"427.0\" prefWidth=\"492.0\" spacing=\"20.0\" xmlns=\"http://javafx.com/javafx/23.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"org.example.togetjob.view.gui.controllergrafico.ContactAJobCandidateController\">\n   <padding>\n      <Insets bottom=\"20.0\" left=\"20.0\" right=\"20.0\" top=\"20.0\" />\n   </padding>\n   <cursor>\n      <Cursor fx:constant=\"SE_RESIZE\" />\n   </cursor>\n   <children>\n      <AnchorPane prefHeight=\"406.0\" prefWidth=\"474.0\" style=\"-fx-background-color: linear-gradient(from 0% 0% to 0% 100%, rgba(255,255,255,1) 85%, rgba(240,248,255,0.8) 95%, rgba(220,240,255,0.7) 100%); -fx-border-color: lightgray;\">\n         <children>\n            <AnchorPane layoutX=\"-2.0\" layoutY=\"-2.0\" minHeight=\"0.0\" minWidth=\"0.0\" prefHeight=\"388.0\" prefWidth=\"452.0\">\n               <children>\n                  <Button layoutX=\"-8.0\" layoutY=\"5.0\" mnemonicParsing=\"false\" prefHeight=\"40.0\" prefWidth=\"57.0\" style=\"-fx-background-color: trasparent;\">\n                     <font>\n                        <Font name=\"AppleGothic Regular\" size=\"14.0\" />\n                     </font>\n                  </Button>\n                  <TableView editable=\"true\" layoutX=\"3.0\" layoutY=\"58.0\" prefHeight=\"331.0\" prefWidth=\"450.0\" style=\"-fx-background-color: 00aaff;\">\n                     <columns>\n                        <TableColumn fx:id=\"jobAnnouncementTitle\" prefWidth=\"329.5589370727539\" style=\"-fx-font-family: Apple Gothic;\" text=\"Candidates\" />\n                        <TableColumn prefWidth=\"119.44108581542969\" style=\"-fx-font-family: Apple Gothic;\" text=\"View Options\" />\n                     </columns>\n                  </TableView>\n               </children>\n            </AnchorPane>\n            <ImageView fitHeight=\"85.0\" fitWidth=\"111.0\" layoutX=\"170.0\" layoutY=\"-16.0\" pickOnBounds=\"true\" preserveRatio=\"true\" y=\"-7.0\">\n               <image>\n                  <Image url=\"@../logo-removebg-preview.png\" />\n               </image>\n               <viewport>\n                  <Rectangle2D minY=\"-10.0\" />\n               </viewport>\n            </ImageView>\n            <ImageView fitHeight=\"30.0\" fitWidth=\"30.0\" layoutX=\"10.0\" layoutY=\"10.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n               <image>\n                  <Image url=\"@../back-158491_1920.png\" />\n               </image>\n            </ImageView>\n         </children>\n      </AnchorPane>\n   </children>\n</VBox>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/org/example/togetjob/fxml/filteredjobcandidates.fxml b/src/main/resources/org/example/togetjob/fxml/filteredjobcandidates.fxml
--- a/src/main/resources/org/example/togetjob/fxml/filteredjobcandidates.fxml	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/resources/org/example/togetjob/fxml/filteredjobcandidates.fxml	(date 1739626445124)
@@ -9,6 +9,7 @@
 <?import javafx.scene.image.Image?>
 <?import javafx.scene.image.ImageView?>
 <?import javafx.scene.layout.AnchorPane?>
+<?import javafx.scene.layout.StackPane?>
 <?import javafx.scene.layout.VBox?>
 <?import javafx.scene.text.Font?>
 
@@ -29,10 +30,11 @@
                         <Font name="AppleGothic Regular" size="14.0" />
                      </font>
                   </Button>
-                  <TableView editable="true" layoutX="3.0" layoutY="58.0" prefHeight="331.0" prefWidth="450.0" style="-fx-background-color: 00aaff;">
+                  <TableView fx:id="candidatesTable" editable="true" layoutX="3.0" layoutY="58.0" prefHeight="331.0" prefWidth="450.0" style="-fx-background-color: 00aaff;">
                      <columns>
-                        <TableColumn fx:id="jobAnnouncementTitle" prefWidth="329.5589370727539" style="-fx-font-family: Apple Gothic;" text="Candidates" />
-                        <TableColumn prefWidth="119.44108581542969" style="-fx-font-family: Apple Gothic;" text="View Options" />
+                        <TableColumn fx:id="nameColumn" prefWidth="164.0" style="-fx-font-family: Apple Gothic;" text="Name" />
+                        <TableColumn fx:id="degreeColumn" prefWidth="150.5" style="-fx-font-family: Apple Gothic;" text="Degrees" />
+                        <TableColumn fx:id="actionColumn" prefWidth="134.5" text="Actions" />
                      </columns>
                   </TableView>
                </children>
@@ -45,11 +47,15 @@
                   <Rectangle2D minY="-10.0" />
                </viewport>
             </ImageView>
-            <ImageView fitHeight="30.0" fitWidth="30.0" layoutX="10.0" layoutY="10.0" pickOnBounds="true" preserveRatio="true">
-               <image>
-                  <Image url="@../back-158491_1920.png" />
-               </image>
-            </ImageView>
+            <StackPane layoutX="10.0" layoutY="10.0" onMouseClicked="#handleBackButton">
+               <children>
+                  <ImageView fitHeight="30.0" fitWidth="30.0" mouseTransparent="true" pickOnBounds="true" preserveRatio="true">
+                     <image>
+                        <Image url="@../back-158491_1920.png" />
+                     </image>
+                  </ImageView>
+               </children>
+            </StackPane>
          </children>
       </AnchorPane>
    </children>
Index: src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseUserDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concreteobjects;\n\nimport org.example.togetjob.connection.DatabaseConfig;\nimport org.example.togetjob.exceptions.DatabaseException;\nimport org.example.togetjob.dao.abstractobjects.UserDao;\nimport org.example.togetjob.model.entity.Recruiter;\nimport org.example.togetjob.model.entity.Role;\nimport org.example.togetjob.model.entity.Student;\nimport org.example.togetjob.model.entity.User;\n\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class DataBaseUserDao implements UserDao {\n\n    private static final String SQL_INSERT_USER = \"INSERT INTO USER (Username, Name, Surname, EmailAddress, Password, Role) VALUES (?, ?, ?, ?, ?, ?)\";\n    private static final String SQL_SELECT_USER = \"SELECT Username, Name, Surname, EmailAddress, Password, Role FROM USER WHERE Username = ?\";\n    private static final String SQL_SELECT_ALL_USERS = \"SELECT Username, Name, Surname, EmailAddress, Password, Role FROM USER\";\n    private static final String SQL_UPDATE_USER = \"UPDATE USER SET Name = ?, Surname = ?, EmailAddress = ?, Password = ?, Role = ? WHERE Username = ?\";\n    private static final String SQL_DELETE_USER = \"DELETE FROM USER WHERE Username = ?\";\n    private static final String SQL_CHECK_USER_EXISTS = \"SELECT COUNT(*) FROM USER WHERE Username = ?\";\n\n    @Override\n    public boolean saveUser(User user) throws DatabaseException {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SQL_INSERT_USER)) {\n\n            stmt.setString(1, user.obtainUsername());\n            stmt.setString(2, user.obtainName());\n            stmt.setString(3, user.obtainSurname());\n            stmt.setString(4, user.obtainEmailAddress());\n            stmt.setString(5, user.obtainPassword());\n            stmt.setString(6, user.obtainRole().toString());\n\n            return stmt.executeUpdate() > 0;\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error saving user to the database , try again later\");\n        }\n    }\n\n    @Override\n    public Optional<User> getUser(String username) throws DatabaseException {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SQL_SELECT_USER)) {\n\n            stmt.setString(1, username);\n            ResultSet rs = stmt.executeQuery();\n\n            if (rs.next()) {\n                String name = rs.getString(\"Name\");\n                String surname = rs.getString(\"Surname\");\n                String emailAddress = rs.getString(\"EmailAddress\");\n                String password = rs.getString(\"Password\");\n                String roleString = rs.getString(\"Role\");\n                Role role = mapRole(roleString);\n\n                if (role == null) {\n                    throw new DatabaseException(\"Invalid role value in the database: \" + roleString);\n                }\n\n                User user = createUserByRole(name, surname, username, emailAddress, password, role);\n\n                return Optional.of(user);\n            }\n\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error retrieving user from the database\");\n        }\n        return Optional.empty();\n    }\n\n    private Role mapRole(String roleString) {\n        if (\"Student\".equalsIgnoreCase(roleString)) {\n            return Role.STUDENT;\n        } else if (\"Recruiter\".equalsIgnoreCase(roleString)) {\n            return Role.RECRUITER;\n        } else {\n            return null;\n        }\n    }\n\n    private User createUserByRole(String name, String surname, String username, String emailAddress, String password, Role role) {\n        return switch (role) {\n            case STUDENT -> new Student(name, surname, username, emailAddress, password, role);\n            case RECRUITER -> new Recruiter(name, surname, username, emailAddress, password, role);\n        };\n    }\n\n    @Override\n    public List<User> getAllUsers() throws DatabaseException {\n        List<User> users = new ArrayList<>();\n\n\n        //Connection\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SQL_SELECT_ALL_USERS);\n             ResultSet rs = stmt.executeQuery()) {\n\n            while (rs.next()) { //loop\n                String username = rs.getString(\"Username\");\n                String name = rs.getString(\"Name\");\n                String surname = rs.getString(\"Surname\");\n                String emailAddress = rs.getString(\"EmailAddress\");\n                String password = rs.getString(\"Password\");\n                Role role = Role.valueOf(rs.getString(\"Role\").toUpperCase());\n\n                User user;\n                if (role.equals(Role.STUDENT)) {\n                    user = new Student(name, surname, username, emailAddress, password, role);\n                } else {\n                    user = new Recruiter(name, surname, username, emailAddress, password, role);\n                }\n\n                users.add(user);\n            }\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error retrieving all users from the database\");\n        }\n\n        return users;\n    }\n\n    @Override\n    public boolean updateUser(User user) throws DatabaseException {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SQL_UPDATE_USER)) {\n\n            stmt.setString(1, user.obtainName());\n            stmt.setString(2, user.obtainSurname());\n            stmt.setString(3, user.obtainEmailAddress());\n            stmt.setString(4, user.obtainPassword());\n            stmt.setString(5, user.obtainRole().name());\n            stmt.setString(6, user.obtainUsername());\n\n            int rowsUpdated = stmt.executeUpdate();\n            return rowsUpdated > 0;\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error updating user in the database\");\n        }\n    }\n\n    @Override\n    public boolean deleteUser(String username) throws DatabaseException {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SQL_DELETE_USER)) {\n\n            stmt.setString(1, username);\n\n            int rowsDeleted = stmt.executeUpdate();\n            return rowsDeleted > 0;\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error deleting user from the database\");\n        }\n    }\n\n    @Override\n    public boolean userExists(String username) throws DatabaseException {\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SQL_CHECK_USER_EXISTS)) {\n\n            stmt.setString(1, username);\n\n            try (ResultSet rs = stmt.executeQuery()) {\n                if (rs.next()) {\n                    int count = rs.getInt(1);\n                    return count > 0;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Error checking if user exists in the database\");\n        }\n\n        return false;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseUserDao.java b/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseUserDao.java
--- a/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseUserDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseUserDao.java	(date 1739641258894)
@@ -18,9 +18,6 @@
     private static final String SQL_INSERT_USER = "INSERT INTO USER (Username, Name, Surname, EmailAddress, Password, Role) VALUES (?, ?, ?, ?, ?, ?)";
     private static final String SQL_SELECT_USER = "SELECT Username, Name, Surname, EmailAddress, Password, Role FROM USER WHERE Username = ?";
     private static final String SQL_SELECT_ALL_USERS = "SELECT Username, Name, Surname, EmailAddress, Password, Role FROM USER";
-    private static final String SQL_UPDATE_USER = "UPDATE USER SET Name = ?, Surname = ?, EmailAddress = ?, Password = ?, Role = ? WHERE Username = ?";
-    private static final String SQL_DELETE_USER = "DELETE FROM USER WHERE Username = ?";
-    private static final String SQL_CHECK_USER_EXISTS = "SELECT COUNT(*) FROM USER WHERE Username = ?";
 
     @Override
     public boolean saveUser(User user) throws DatabaseException {
@@ -122,56 +119,4 @@
         return users;
     }
 
-    @Override
-    public boolean updateUser(User user) throws DatabaseException {
-        try (Connection conn = DatabaseConfig.getInstance().getConnection();
-             PreparedStatement stmt = conn.prepareStatement(SQL_UPDATE_USER)) {
-
-            stmt.setString(1, user.obtainName());
-            stmt.setString(2, user.obtainSurname());
-            stmt.setString(3, user.obtainEmailAddress());
-            stmt.setString(4, user.obtainPassword());
-            stmt.setString(5, user.obtainRole().name());
-            stmt.setString(6, user.obtainUsername());
-
-            int rowsUpdated = stmt.executeUpdate();
-            return rowsUpdated > 0;
-        } catch (SQLException e) {
-            throw new DatabaseException("Error updating user in the database");
-        }
-    }
-
-    @Override
-    public boolean deleteUser(String username) throws DatabaseException {
-        try (Connection conn = DatabaseConfig.getInstance().getConnection();
-             PreparedStatement stmt = conn.prepareStatement(SQL_DELETE_USER)) {
-
-            stmt.setString(1, username);
-
-            int rowsDeleted = stmt.executeUpdate();
-            return rowsDeleted > 0;
-        } catch (SQLException e) {
-            throw new DatabaseException("Error deleting user from the database");
-        }
-    }
-
-    @Override
-    public boolean userExists(String username) throws DatabaseException {
-        try (Connection conn = DatabaseConfig.getInstance().getConnection();
-             PreparedStatement stmt = conn.prepareStatement(SQL_CHECK_USER_EXISTS)) {
-
-            stmt.setString(1, username);
-
-            try (ResultSet rs = stmt.executeQuery()) {
-                if (rs.next()) {
-                    int count = rs.getInt(1);
-                    return count > 0;
-                }
-            }
-        } catch (SQLException e) {
-            throw new DatabaseException("Error checking if user exists in the database");
-        }
-
-        return false;
-    }
 }
Index: src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseInterviewSchedulingDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concreteobjects;\n\nimport org.example.togetjob.connection.DatabaseConfig;\nimport org.example.togetjob.exceptions.DatabaseException;\nimport org.example.togetjob.dao.abstractobjects.InterviewSchedulingDao;\nimport org.example.togetjob.dao.abstractobjects.StudentDao;\nimport org.example.togetjob.model.entity.InterviewScheduling;\nimport org.example.togetjob.model.entity.JobAnnouncement;\nimport org.example.togetjob.model.entity.Student;\n\nimport java.sql.*;\nimport java.sql.Date;\nimport java.time.LocalDateTime;\nimport java.util.*;\n\npublic class DataBaseInterviewSchedulingDao implements InterviewSchedulingDao {\n\n    private static final String SQL_INSERT_INTERVIEW_SCHEDULING = \"INSERT INTO SCHEDULINGINTERVIEW (Subject, Greeting, Introduction, InterviewDateTime, Location, Candidate, JobAnnouncementID) VALUES (?, ?, ?, ?, ?, ?, ?)\";\n    private static final String SQL_SELECT_INTERVIEW_SCHEDULING = \"SELECT Subject, Greeting, Introduction, InterviewDateTime, Location, Candidate, JobAnnouncementID FROM SCHEDULINGINTERVIEW WHERE Candidate = ? AND JobAnnouncementID = ?\";\n    private static final String SQL_SELECT_ALL_INTERVIEW_SCHEDULING = \"SELECT Subject, Greeting, Introduction, InterviewDateTime, Location, Candidate, JobAnnouncementID FROM SCHEDULINGINTERVIEW WHERE JobAnnouncementID = ?\";\n    private static final String SQL_CHECK_INTERVIEW_SCHEDULING_EXISTS = \"SELECT 1 FROM SCHEDULINGINTERVIEW WHERE Candidate = ? AND JobAnnouncementID = ? LIMIT 1\";\n    private static final String SQL_SELECT_ALL_INTERVIEW_SCHEDULING_BY_STUDENT = \"SELECT Subject, Greeting, Introduction, InterviewDateTime, Location, Candidate, JobAnnouncementID FROM SchedulingInterview WHERE Candidate = ?\";\n    private static final String SQL_DELETE_INTERVIEW_SCHEDULING = \"DELETE FROM SCHEDULINGINTERVIEW WHERE Candidate = ? AND JobAnnouncementID = ?\";\n    private static final String SQL_UPDATE_INTERVIEW_SCHEDULING = \"UPDATE SCHEDULINGINTERVIEW SET Subject = ?, Greeting = ?, Introduction = ?, InterviewDateTime = ?, Location = ? WHERE Candidate = ? AND JobAnnouncementID = ?\";\n\n    private static final String COLUMN_SUBJECT = \"Subject\";\n    private static final String COLUMN_GREETING = \"Greeting\";\n    private static final String COLUMN_INTRODUCTION = \"Introduction\";\n    private static final String COLUMN_INTERVIEW_DATETIME = \"InterviewDateTime\";\n    private static final String COLUMN_LOCATION = \"Location\";\n    private static final String COLUMN_CANDIDATE = \"Candidate\";\n    private static final String COLUM_JOB_ANNOUNCEMENT = \"JobAnnouncementID\";\n\n    public static final String JOB_ANNOUNCEMENT_NOT_FOUND = \"Job Announcement not found\";\n    public static final String STUDENT_NOT_FOUND = \"Student not found\";\n\n    private final DataBaseJobAnnouncementDao dataBaseJobAnnouncementDao;\n    private final StudentDao studentDao;\n\n    // Constructor updated to inject StudentDao as well\n    public DataBaseInterviewSchedulingDao(DataBaseJobAnnouncementDao dataBaseJobAnnouncementDao, StudentDao studentDao) {\n        this.dataBaseJobAnnouncementDao = dataBaseJobAnnouncementDao;\n        this.studentDao = studentDao;\n    }\n\n    @Override\n    public void saveInterviewScheduling(InterviewScheduling interviewScheduling) throws DatabaseException {\n        try {\n\n            Optional<Integer> jobAnnouncementId = dataBaseJobAnnouncementDao.getJobAnnouncementId(\n                    interviewScheduling.getJobAnnouncement().obtainJobTitle(),\n                    interviewScheduling.getJobAnnouncement().getRecruiter().obtainUsername()\n            );\n\n\n            int jobAnnouncementIdValue = jobAnnouncementId.orElseThrow(() -> new DatabaseException(JOB_ANNOUNCEMENT_NOT_FOUND));\n\n\n            Student candidate = studentDao.getStudent(interviewScheduling.getCandidate().obtainUsername())\n                    .orElseThrow(() -> new DatabaseException(STUDENT_NOT_FOUND));\n\n\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(SQL_INSERT_INTERVIEW_SCHEDULING)) {\n\n\n                stmt.setString(1, interviewScheduling.obtainSubject());\n                stmt.setString(2, interviewScheduling.obtainGreeting());\n                stmt.setString(3, interviewScheduling.obtainIntroduction());\n                stmt.setDate(4, Date.valueOf(interviewScheduling.obtainInterviewDateTime().toLocalDate())); // Usa `Date` per solo la data\n                stmt.setString(5, interviewScheduling.obtainLocation());\n                stmt.setString(6, candidate.obtainUsername());\n                stmt.setInt(7, jobAnnouncementIdValue);\n\n                stmt.executeUpdate();\n            }\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Database error while saving interview scheduling: \" + e.getMessage());\n        }\n    }\n\n    @Override\n    public Optional<InterviewScheduling> getInterviewScheduling(Student student, JobAnnouncement jobAnnouncement) throws DatabaseException {\n        try {\n\n            Optional<Integer> jobAnnouncementId = dataBaseJobAnnouncementDao.getJobAnnouncementId(\n                    jobAnnouncement.obtainJobTitle(),\n                    jobAnnouncement.getRecruiter().obtainUsername()\n            );\n\n\n            int jobAnnouncementIdValue = jobAnnouncementId.orElseThrow(() -> new DatabaseException(JOB_ANNOUNCEMENT_NOT_FOUND));\n\n\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(SQL_SELECT_INTERVIEW_SCHEDULING)) {\n\n\n                stmt.setString(1, student.obtainUsername());\n                stmt.setInt(2, jobAnnouncementIdValue);\n\n\n                try (ResultSet rs = stmt.executeQuery()) {\n                    if (rs.next()) {\n\n                        String subject = rs.getString(COLUMN_SUBJECT);\n                        String greeting = rs.getString(COLUMN_GREETING);\n                        String introduction = rs.getString(COLUMN_INTRODUCTION);\n                        LocalDateTime interviewDateTime = rs.getTimestamp(COLUMN_INTERVIEW_DATETIME).toLocalDateTime();\n                        String location = rs.getString(COLUMN_LOCATION);\n\n\n                        InterviewScheduling interviewScheduling = new InterviewScheduling(subject, greeting, introduction, interviewDateTime, location, student, jobAnnouncement);\n                        return Optional.of(interviewScheduling);\n                    }\n                }\n            }\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Database error while retrieving interview scheduling: \" + e.getMessage(), e);\n        }\n        return Optional.empty();\n    }\n\n\n    @Override\n    public List<InterviewScheduling> getAllInterviewScheduling(JobAnnouncement jobAnnouncement) throws DatabaseException {\n        List<InterviewScheduling> interviewSchedulings = new ArrayList<>();\n\n        try {\n\n            int jobAnnouncementId = dataBaseJobAnnouncementDao.getJobAnnouncementId(\n                    jobAnnouncement.obtainJobTitle(),\n                    jobAnnouncement.getRecruiter().obtainUsername()\n            ).orElseThrow(() -> new DatabaseException(JOB_ANNOUNCEMENT_NOT_FOUND));\n\n            Set<String> candidateUsernames = new HashSet<>();\n            Map<String, InterviewScheduling> schedulingMap = new HashMap<>();\n\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(SQL_SELECT_ALL_INTERVIEW_SCHEDULING)) {\n\n                stmt.setInt(1, jobAnnouncementId);\n\n                try (ResultSet rs = stmt.executeQuery()) {\n                    while (rs.next()) {\n                        String subject = rs.getString(COLUMN_SUBJECT);\n                        String greeting = rs.getString(COLUMN_GREETING);\n                        String introduction = rs.getString(COLUMN_INTRODUCTION);\n                        LocalDateTime interviewDateTime = rs.getTimestamp(COLUMN_INTERVIEW_DATETIME).toLocalDateTime();\n                        String location = rs.getString(COLUMN_LOCATION);\n                        String candidateUsername = rs.getString(COLUMN_CANDIDATE);\n\n\n                        candidateUsernames.add(candidateUsername);\n\n                        InterviewScheduling interviewScheduling = new InterviewScheduling(\n                                subject, greeting, introduction, interviewDateTime, location, null, jobAnnouncement\n                        );\n                        schedulingMap.put(candidateUsername, interviewScheduling);\n                    }\n                }\n            }\n\n            Map<String, Student> studentsMap = new HashMap<>();\n            for (String username : candidateUsernames) {\n                Optional<Student> studentOpt = studentDao.getStudent(username);\n                Student student = studentOpt.orElseThrow(() -> new DatabaseException(STUDENT_NOT_FOUND));\n                studentsMap.put(username, student);\n            }\n\n            for (Map.Entry<String, InterviewScheduling> entry : schedulingMap.entrySet()) {\n                String username = entry.getKey();\n                InterviewScheduling scheduling = entry.getValue();\n                Student candidate = studentsMap.get(username);\n                if (candidate == null) {\n                    throw new DatabaseException(STUDENT_NOT_FOUND);\n                }\n                scheduling.setCandidate(candidate);\n                interviewSchedulings.add(scheduling);\n            }\n\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Database error while retrieving all interview scheduling\", e);\n        }\n\n        return interviewSchedulings;\n    }\n\n    @Override\n    public boolean interviewSchedulingExists(Student student, JobAnnouncement jobAnnouncement) throws DatabaseException {\n        try {\n\n            Optional<Integer> jobAnnouncementId = dataBaseJobAnnouncementDao.getJobAnnouncementId(\n                    jobAnnouncement.obtainJobTitle(),\n                    jobAnnouncement.getRecruiter().obtainUsername()\n            );\n\n            int jobAnnouncementIdValue = jobAnnouncementId.orElseThrow(() -> new DatabaseException(JOB_ANNOUNCEMENT_NOT_FOUND));\n\n\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(SQL_CHECK_INTERVIEW_SCHEDULING_EXISTS)) {\n\n\n                stmt.setString(1, student.obtainUsername());\n                stmt.setInt(2, jobAnnouncementIdValue);\n\n\n                try (ResultSet rs = stmt.executeQuery()) {\n                    return rs.next();\n                }\n            }\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Database error while checking interview scheduling existence\", e);\n        }\n    }\n\n    @Override\n    public List<InterviewScheduling> getAllInterviewScheduling(Student student) throws DatabaseException {\n        List<InterviewScheduling> interviewSchedulings = new ArrayList<>();\n        List<Integer> jobAnnouncementIds = new ArrayList<>();\n\n        try (Connection conn = DatabaseConfig.getInstance().getConnection();\n             PreparedStatement stmt = conn.prepareStatement(SQL_SELECT_ALL_INTERVIEW_SCHEDULING_BY_STUDENT)) {\n\n            stmt.setString(1, student.obtainUsername());\n\n            try (ResultSet rs = stmt.executeQuery()) {\n                while (rs.next()) {\n                    String subject = rs.getString(COLUMN_SUBJECT);\n                    String greeting = rs.getString(COLUMN_GREETING);\n                    String introduction = rs.getString(COLUMN_INTRODUCTION);\n                    LocalDateTime interviewDateTime = rs.getTimestamp(COLUMN_INTERVIEW_DATETIME).toLocalDateTime();\n                    String location = rs.getString(COLUMN_LOCATION);\n                    int jobAnnouncementId = rs.getInt(COLUM_JOB_ANNOUNCEMENT);\n\n                    InterviewScheduling tempInterview = new InterviewScheduling(subject, greeting, introduction, interviewDateTime, location, student, null);\n                    interviewSchedulings.add(tempInterview);\n                    jobAnnouncementIds.add(jobAnnouncementId);\n                }\n            }\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Database error while retrieving interviews for student\", e);\n        }\n\n        for (int i = 0; i < interviewSchedulings.size(); i++) {\n            int jobAnnouncementId = jobAnnouncementIds.get(i);\n            JobAnnouncement jobAnnouncement = dataBaseJobAnnouncementDao.getJobAnnouncementById(jobAnnouncementId)\n                    .orElseThrow(() -> new DatabaseException(JOB_ANNOUNCEMENT_NOT_FOUND));\n            interviewSchedulings.get(i).setJobAnnouncement(jobAnnouncement);\n        }\n\n        return interviewSchedulings;\n    }\n\n    @Override\n    public void deleteInterviewScheduling(InterviewScheduling interviewScheduling) throws DatabaseException {\n        try {\n            Optional<Integer> jobAnnouncementId = dataBaseJobAnnouncementDao.getJobAnnouncementId(\n                    interviewScheduling.getJobAnnouncement().obtainJobTitle(),\n                    interviewScheduling.getJobAnnouncement().getRecruiter().obtainUsername()\n            );\n\n            int jobAnnouncementIdValue = jobAnnouncementId.orElseThrow(() -> new DatabaseException(JOB_ANNOUNCEMENT_NOT_FOUND));\n\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(SQL_DELETE_INTERVIEW_SCHEDULING)) {\n\n                stmt.setString(1, interviewScheduling.getCandidate().obtainUsername());\n                stmt.setInt(2, jobAnnouncementIdValue);\n\n                int rowsAffected = stmt.executeUpdate();\n                if (rowsAffected == 0) {\n                    throw new DatabaseException(\"Interview Scheduling not found to delete.\");\n                }\n            }\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Database error while deleting interview scheduling\", e);\n        }\n    }\n\n    @Override\n    public void updateInterviewScheduling(InterviewScheduling interviewScheduling) throws DatabaseException {\n        try {\n            Optional<Integer> jobAnnouncementId = dataBaseJobAnnouncementDao.getJobAnnouncementId(\n                    interviewScheduling.getJobAnnouncement().obtainJobTitle(),\n                    interviewScheduling.getJobAnnouncement().getRecruiter().obtainUsername()\n            );\n\n            int jobAnnouncementIdValue = jobAnnouncementId.orElseThrow(() -> new DatabaseException(JOB_ANNOUNCEMENT_NOT_FOUND));\n\n            try (Connection conn = DatabaseConfig.getInstance().getConnection();\n                 PreparedStatement stmt = conn.prepareStatement(SQL_UPDATE_INTERVIEW_SCHEDULING)) {\n\n                stmt.setString(1, interviewScheduling.obtainSubject());\n                stmt.setString(2, interviewScheduling.obtainGreeting());\n                stmt.setString(3, interviewScheduling.obtainIntroduction());\n                stmt.setTimestamp(4, Timestamp.valueOf(interviewScheduling.obtainInterviewDateTime()));\n                stmt.setString(5, interviewScheduling.obtainLocation());\n                stmt.setString(6, interviewScheduling.getCandidate().obtainUsername());\n                stmt.setInt(7, jobAnnouncementIdValue);\n\n                int rowsAffected = stmt.executeUpdate();\n                if (rowsAffected == 0) {\n                    throw new DatabaseException(\"Interview Scheduling not found to update.\");\n                }\n            }\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Database error while updating interview scheduling\", e);\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseInterviewSchedulingDao.java b/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseInterviewSchedulingDao.java
--- a/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseInterviewSchedulingDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concreteobjects/DataBaseInterviewSchedulingDao.java	(date 1739641389922)
@@ -186,35 +186,6 @@
         return interviewSchedulings;
     }
 
-    @Override
-    public boolean interviewSchedulingExists(Student student, JobAnnouncement jobAnnouncement) throws DatabaseException {
-        try {
-
-            Optional<Integer> jobAnnouncementId = dataBaseJobAnnouncementDao.getJobAnnouncementId(
-                    jobAnnouncement.obtainJobTitle(),
-                    jobAnnouncement.getRecruiter().obtainUsername()
-            );
-
-            int jobAnnouncementIdValue = jobAnnouncementId.orElseThrow(() -> new DatabaseException(JOB_ANNOUNCEMENT_NOT_FOUND));
-
-
-            try (Connection conn = DatabaseConfig.getInstance().getConnection();
-                 PreparedStatement stmt = conn.prepareStatement(SQL_CHECK_INTERVIEW_SCHEDULING_EXISTS)) {
-
-
-                stmt.setString(1, student.obtainUsername());
-                stmt.setInt(2, jobAnnouncementIdValue);
-
-
-                try (ResultSet rs = stmt.executeQuery()) {
-                    return rs.next();
-                }
-            }
-        } catch (SQLException e) {
-            throw new DatabaseException("Database error while checking interview scheduling existence", e);
-        }
-    }
-
     @Override
     public List<InterviewScheduling> getAllInterviewScheduling(Student student) throws DatabaseException {
         List<InterviewScheduling> interviewSchedulings = new ArrayList<>();
Index: src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryJobAnnouncementDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concreteobjects;\n\nimport org.example.togetjob.dao.abstractobjects.JobAnnouncementDao;\nimport org.example.togetjob.model.entity.JobAnnouncement;\nimport org.example.togetjob.model.entity.Recruiter;\n\nimport java.util.*;\n\npublic class InMemoryJobAnnouncementDao implements JobAnnouncementDao {\n\n    private static final Map<String, Map<Recruiter, JobAnnouncement>> jobAnnouncementsMap = new HashMap<>();\n\n    @Override\n    public boolean saveJobAnnouncement(JobAnnouncement jobAnnouncement) {\n        String key = generateKey(jobAnnouncement);\n        Map<Recruiter, JobAnnouncement> recruiterMap = jobAnnouncementsMap.getOrDefault(key, new HashMap<>());\n\n        recruiterMap.put(jobAnnouncement.getRecruiter(), jobAnnouncement);\n        jobAnnouncementsMap.put(key, recruiterMap);\n\n        return true;\n    }\n\n    @Override\n    public Optional<JobAnnouncement> getJobAnnouncement(String jobTitle, Recruiter recruiter) {\n        String key = generateKey(jobTitle, recruiter);\n        Map<Recruiter, JobAnnouncement> recruiterMap = jobAnnouncementsMap.get(key);\n\n        return recruiterMap != null ? Optional.ofNullable(recruiterMap.get(recruiter)) : Optional.empty();\n    }\n\n    @Override\n    public boolean updateJobAnnouncement(JobAnnouncement jobAnnouncement) {\n        String key = generateKey(jobAnnouncement);\n        Map<Recruiter, JobAnnouncement> recruiterMap = jobAnnouncementsMap.get(key);\n\n        if (recruiterMap != null && recruiterMap.containsKey(jobAnnouncement.getRecruiter())) {\n            recruiterMap.put(jobAnnouncement.getRecruiter(), jobAnnouncement);\n            return true;\n        }\n\n        return false;\n    }\n\n    @Override\n    public boolean deleteJobAnnouncement(JobAnnouncement jobAnnouncement) {\n        String key = generateKey(jobAnnouncement);\n        Map<Recruiter, JobAnnouncement> recruiterMap = jobAnnouncementsMap.get(key);\n\n        if (recruiterMap != null && recruiterMap.containsKey(jobAnnouncement.getRecruiter())) {\n            recruiterMap.remove(jobAnnouncement.getRecruiter());\n            return true;\n        }\n\n        return false;\n    }\n\n    @Override\n    public boolean jobAnnouncementExists(String jobTitle, Recruiter recruiter) {\n        String key = generateKey(jobTitle, recruiter);\n        Map<Recruiter, JobAnnouncement> recruiterMap = jobAnnouncementsMap.get(key);\n        return recruiterMap != null && recruiterMap.containsKey(recruiter);\n    }\n\n    @Override\n    public List<JobAnnouncement> getAllJobAnnouncements(Recruiter recruiter) {\n        return jobAnnouncementsMap.values().stream()\n                .map(map -> map.get(recruiter))\n                .filter(Objects::nonNull)\n                .toList();\n    }\n\n    @Override\n    public List<JobAnnouncement> getAllJobAnnouncements() {\n        return jobAnnouncementsMap.values().stream()\n                .flatMap(map -> map.values().stream())\n                .toList();\n    }\n\n    private String generateKey(JobAnnouncement jobAnnouncement) {\n        return jobAnnouncement.obtainJobTitle() + \"-\" + jobAnnouncement.getRecruiter().obtainUsername();\n    }\n\n    private String generateKey(String jobTitle, Recruiter recruiter) {\n        return jobTitle + \"-\" + recruiter.obtainUsername();\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryJobAnnouncementDao.java b/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryJobAnnouncementDao.java
--- a/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryJobAnnouncementDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concreteobjects/InMemoryJobAnnouncementDao.java	(date 1739641374866)
@@ -55,13 +55,6 @@
         return false;
     }
 
-    @Override
-    public boolean jobAnnouncementExists(String jobTitle, Recruiter recruiter) {
-        String key = generateKey(jobTitle, recruiter);
-        Map<Recruiter, JobAnnouncement> recruiterMap = jobAnnouncementsMap.get(key);
-        return recruiterMap != null && recruiterMap.containsKey(recruiter);
-    }
-
     @Override
     public List<JobAnnouncement> getAllJobAnnouncements(Recruiter recruiter) {
         return jobAnnouncementsMap.values().stream()
Index: src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemStudentDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concreteobjects;\n\nimport org.example.togetjob.dao.abstractobjects.StudentDao;\nimport org.example.togetjob.model.entity.Student;\nimport org.example.togetjob.model.entity.Role;\n\nimport java.io.*;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeParseException;\nimport java.util.*;\n\npublic class FileSystemStudentDao implements StudentDao {\n    private static final String PATH_NAME = \"src/main/resources/files_txt/Student.txt\";\n\n    @Override\n    public void saveStudent(Student student) {\n        if (studentExists(student.obtainUsername())) {\n            return;  // The student already exists\n        }\n\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(PATH_NAME, true))) {\n            writer.write(student.obtainName() + \";\" + student.obtainSurname() + \";\" + student.obtainUsername() + \";\" +\n                    student.obtainEmailAddress() + \";\" + student.obtainPassword() + \";\" + student.obtainRole() + \";\" +\n                    student.obtainDateOfBirth() + \";\" +\n                    student.obtainPhoneNumber() + \";\" +\n                    student.obtainDegrees() + \";\" +\n                    student.obtainCoursesAttended() + \";\" +\n                    student.obtainCertifications() + \";\" +\n                    student.obtainWorkExperiences() + \";\" +\n                    student.obtainSkills() + \";\" +\n                    student.obtainAvailability());\n            writer.newLine();\n        } catch (IOException | IllegalArgumentException | DateTimeParseException e) {\n            // Handle errors during file writing\n        }\n    }\n\n    @Override\n    public Optional<Student> getStudent(String username) {\n        try (BufferedReader reader = new BufferedReader(new FileReader(PATH_NAME))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                String[] data = line.split(\";\");\n                if (data.length >= 14 && data[2].trim().equals(username)) {  // Ensure there are at least 14 elements\n                    // Call the new method to build the student object\n                    Student student = buildStudentFromData(data);\n                    return Optional.of(student);\n                }\n            }\n        } catch (IOException | IllegalArgumentException | DateTimeParseException e) {\n            // Handle errors during file reading or data parsing\n        }\n        return Optional.empty();  // Return empty if student not found\n    }\n\n    @Override\n    public List<Student> getAllStudents() {\n        List<Student> students = new ArrayList<>();\n        try (BufferedReader reader = new BufferedReader(new FileReader(PATH_NAME))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                String[] data = line.split(\";\");\n                if (data.length >= 14) {  // Ensure there are at least 14 elements\n                    // Call the new method to build the student object\n                    Student student = buildStudentFromData(data);\n                    students.add(student);\n                }\n            }\n        } catch (IOException | IllegalArgumentException | DateTimeParseException e) {\n            // Handle errors during file reading or data parsing\n        }\n        return students;  // Return the list of students\n    }\n\n    // New method to build a Student object from data\n    private Student buildStudentFromData(String[] data) {\n        Role role = Role.valueOf(data[5].trim());\n        LocalDate dateOfBirth = LocalDate.parse(data[6].trim());\n        String phoneNumber = data[7].trim();\n        List<String> degrees = Arrays.asList(data[8].split(\",\"));\n        List<String> courseAttended = Arrays.asList(data[9].split(\",\"));\n        List<String> certifications = Arrays.asList(data[10].split(\",\"));\n        List<String> workExperiences = Arrays.asList(data[11].split(\",\"));\n        List<String> skills = Arrays.asList(data[12].split(\",\"));\n        String availability = data[13].trim();\n\n        // Return the built Student object\n        Student student = new Student(\n                data[0].trim(),  // name\n                data[1].trim(),  // surname\n                data[2].trim(),  // username\n                data[3].trim(),  // emailAddress\n                data[4].trim(),  // password\n                role,            // role\n                dateOfBirth      // date of birth\n        );\n\n        student.setPhoneNumber(phoneNumber);            // phone number\n        student.setDegrees(degrees);                    // degrees\n        student.setCoursesAttended(courseAttended);     // courses attended\n        student.setCertifications(certifications);      // certifications\n        student.setWorkExperiences(workExperiences);    // work experiences\n        student.setSkills(skills);                      // skills\n        student.setAvailability(availability);          // availability\n        student.setJobApplications(new ArrayList<>());    // jobApplications, empty for now\n\n        return student;\n    }\n\n    @Override\n    public boolean updateStudent(Student student) {\n        if (!studentExists(student.obtainUsername())) {\n            return false;  // The student does not exist\n        }\n\n        List<String> lines = new ArrayList<>();\n        try (BufferedReader reader = new BufferedReader(new FileReader(PATH_NAME))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                String[] data = line.split(\";\");\n                if (data.length >= 6 && data[2].trim().equals(student.obtainUsername())) {\n                    // Replace the line with the updated student data\n                    line = student.obtainName() + \";\" + student.obtainSurname() + \";\" + student.obtainUsername() + \";\" +\n                            student.obtainEmailAddress() + \";\" + student.obtainPassword() + \";\" + student.obtainRole() + \";\" +\n                            student.obtainDateOfBirth() + \";\" + student.obtainPhoneNumber() + \";\" +\n                            String.join(\",\", student.obtainDegrees()) + \";\" +\n                            String.join(\",\", student.obtainCoursesAttended()) + \";\" +\n                            String.join(\",\", student.obtainCertifications()) + \";\" +\n                            String.join(\",\", student.obtainWorkExperiences()) + \";\" +\n                            String.join(\",\", student.obtainSkills()) + \";\" +\n                            student.obtainAvailability();\n                }\n                lines.add(line);  // Add the line to the buffer\n            }\n        } catch (IOException | IllegalArgumentException | DateTimeParseException e) {\n            // Handle errors during file reading or data parsing\n            return false;\n        }\n\n        // Write the updated lines to the file\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(PATH_NAME))) {\n            for (String updatedLine : lines) {\n                writer.write(updatedLine);\n                writer.newLine();  // Add a new line\n            }\n        } catch (IOException e) {\n            // Handle errors during file writing\n            return false;\n        }\n\n        return true;  // Update was successful\n    }\n\n    @Override\n    public boolean deleteStudent(String username) {\n        if (!studentExists(username)) {\n            return false;  // The student does not exist\n        }\n\n        List<String> lines = new ArrayList<>();\n        try (BufferedReader reader = new BufferedReader(new FileReader(PATH_NAME))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                String[] data = line.split(\";\");\n                if (data.length >= 6 && !data[2].trim().equals(username)) {\n                    // Add only the lines that do not correspond to the student to be deleted\n                    lines.add(line);\n                }\n            }\n        } catch (IOException e) {\n            // Handle errors during file reading\n            return false;\n        }\n\n        // Rewrite the file without the deleted student\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(PATH_NAME))) {\n            for (String line : lines) {\n                writer.write(line);\n                writer.newLine();  // Add a new line\n            }\n            return true;\n        } catch (IOException e) {\n            // Handle errors during file writing\n            return false;\n        }\n    }\n\n    @Override\n    public boolean studentExists(String username) {\n        try (BufferedReader reader = new BufferedReader(new FileReader(PATH_NAME))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                String[] data = line.split(\";\");\n                if (data.length >= 5 && data[2].trim().equals(username)) {\n                    return true;  // Student found\n                }\n            }\n        } catch (IOException e) {\n            // Handle errors during file reading\n        }\n        return false;  // Student not found\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemStudentDao.java b/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemStudentDao.java
--- a/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemStudentDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemStudentDao.java	(date 1739641158276)
@@ -107,86 +107,7 @@
         return student;
     }
 
-    @Override
-    public boolean updateStudent(Student student) {
-        if (!studentExists(student.obtainUsername())) {
-            return false;  // The student does not exist
-        }
-
-        List<String> lines = new ArrayList<>();
-        try (BufferedReader reader = new BufferedReader(new FileReader(PATH_NAME))) {
-            String line;
-            while ((line = reader.readLine()) != null) {
-                String[] data = line.split(";");
-                if (data.length >= 6 && data[2].trim().equals(student.obtainUsername())) {
-                    // Replace the line with the updated student data
-                    line = student.obtainName() + ";" + student.obtainSurname() + ";" + student.obtainUsername() + ";" +
-                            student.obtainEmailAddress() + ";" + student.obtainPassword() + ";" + student.obtainRole() + ";" +
-                            student.obtainDateOfBirth() + ";" + student.obtainPhoneNumber() + ";" +
-                            String.join(",", student.obtainDegrees()) + ";" +
-                            String.join(",", student.obtainCoursesAttended()) + ";" +
-                            String.join(",", student.obtainCertifications()) + ";" +
-                            String.join(",", student.obtainWorkExperiences()) + ";" +
-                            String.join(",", student.obtainSkills()) + ";" +
-                            student.obtainAvailability();
-                }
-                lines.add(line);  // Add the line to the buffer
-            }
-        } catch (IOException | IllegalArgumentException | DateTimeParseException e) {
-            // Handle errors during file reading or data parsing
-            return false;
-        }
-
-        // Write the updated lines to the file
-        try (BufferedWriter writer = new BufferedWriter(new FileWriter(PATH_NAME))) {
-            for (String updatedLine : lines) {
-                writer.write(updatedLine);
-                writer.newLine();  // Add a new line
-            }
-        } catch (IOException e) {
-            // Handle errors during file writing
-            return false;
-        }
-
-        return true;  // Update was successful
-    }
-
-    @Override
-    public boolean deleteStudent(String username) {
-        if (!studentExists(username)) {
-            return false;  // The student does not exist
-        }
-
-        List<String> lines = new ArrayList<>();
-        try (BufferedReader reader = new BufferedReader(new FileReader(PATH_NAME))) {
-            String line;
-            while ((line = reader.readLine()) != null) {
-                String[] data = line.split(";");
-                if (data.length >= 6 && !data[2].trim().equals(username)) {
-                    // Add only the lines that do not correspond to the student to be deleted
-                    lines.add(line);
-                }
-            }
-        } catch (IOException e) {
-            // Handle errors during file reading
-            return false;
-        }
-
-        // Rewrite the file without the deleted student
-        try (BufferedWriter writer = new BufferedWriter(new FileWriter(PATH_NAME))) {
-            for (String line : lines) {
-                writer.write(line);
-                writer.newLine();  // Add a new line
-            }
-            return true;
-        } catch (IOException e) {
-            // Handle errors during file writing
-            return false;
-        }
-    }
-
-    @Override
-    public boolean studentExists(String username) {
+    private boolean studentExists(String username) {
         try (BufferedReader reader = new BufferedReader(new FileReader(PATH_NAME))) {
             String line;
             while ((line = reader.readLine()) != null) {
Index: src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemUserDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.concreteobjects;\n\nimport org.example.togetjob.dao.abstractobjects.UserDao;\nimport org.example.togetjob.model.entity.*;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class FileSystemUserDao implements UserDao {\n    private static final String PATH_NAME = \"src/main/resources/files_txt/User.txt\";\n\n    @Override\n    public boolean saveUser(User user) {\n        if (userExists(user.obtainUsername())) {\n            return false; // The user already exists\n        }\n        return appendToFile(userToLine(user));\n    }\n\n    @Override\n    public Optional<User> getUser(String username) {\n        return readAllUsers().stream()\n                .filter(user -> user.obtainUsername().equals(username))\n                .findFirst();\n    }\n\n    @Override\n    public List<User> getAllUsers() {\n        return readAllUsers();\n    }\n\n    @Override\n    public boolean updateUser(User user) {\n        List<User> users = readAllUsers();\n        boolean found = false;\n\n        for (int i = 0; i < users.size(); i++) {\n            if (users.get(i).obtainUsername().equals(user.obtainUsername())) {\n                users.set(i, user); // Update user\n                found = true;\n                break;\n            }\n        }\n\n        return found && writeAllUsers(users);\n    }\n\n    @Override\n    public boolean deleteUser(String username) {\n        List<User> users = readAllUsers();\n        boolean removed = users.removeIf(user -> user.obtainUsername().equals(username));\n\n        return removed && writeAllUsers(users);\n    }\n\n    @Override\n    public boolean userExists(String username) {\n        return readAllUsers().stream()\n                .anyMatch(user -> user.obtainUsername().equals(username));\n    }\n\n    private List<User> readAllUsers() {\n        List<User> users = new ArrayList<>();\n        try (BufferedReader reader = new BufferedReader(new FileReader(PATH_NAME))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                User user = parseUser(line);\n                if (user != null) {\n                    users.add(user);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace(); // Log errori\n        }\n        return users;\n    }\n\n    private boolean writeAllUsers(List<User> users) {\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(PATH_NAME))) {\n            for (User user : users) {\n                writer.write(userToLine(user));\n                writer.newLine();\n            }\n            return true;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    private boolean appendToFile(String line) {\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(PATH_NAME, true))) {\n            writer.write(line);\n            writer.newLine();\n            return true;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    private User parseUser(String line) {\n        String[] data = line.split(\";\");\n        if (data.length < 6) return null;\n\n        try {\n            Role role = Role.valueOf(data[5].trim());\n            return (role == Role.STUDENT)\n                    ? new Student(data[0].trim(), data[1].trim(), data[2].trim(), data[3].trim(), data[4].trim(), role)\n                    : new Recruiter(data[0].trim(), data[1].trim(), data[2].trim(), data[3].trim(), data[4].trim(), role);\n        } catch (IllegalArgumentException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    private String userToLine(User user) {\n        return String.join(\";\", user.obtainName(), user.obtainSurname(), user.obtainUsername(),\n                user.obtainEmailAddress(), user.obtainPassword(), user.obtainRole().toString());\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemUserDao.java b/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemUserDao.java
--- a/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemUserDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/concreteobjects/FileSystemUserDao.java	(date 1739641097288)
@@ -29,32 +29,7 @@
         return readAllUsers();
     }
 
-    @Override
-    public boolean updateUser(User user) {
-        List<User> users = readAllUsers();
-        boolean found = false;
-
-        for (int i = 0; i < users.size(); i++) {
-            if (users.get(i).obtainUsername().equals(user.obtainUsername())) {
-                users.set(i, user); // Update user
-                found = true;
-                break;
-            }
-        }
-
-        return found && writeAllUsers(users);
-    }
-
-    @Override
-    public boolean deleteUser(String username) {
-        List<User> users = readAllUsers();
-        boolean removed = users.removeIf(user -> user.obtainUsername().equals(username));
-
-        return removed && writeAllUsers(users);
-    }
-
-    @Override
-    public boolean userExists(String username) {
+    private boolean userExists(String username) {
         return readAllUsers().stream()
                 .anyMatch(user -> user.obtainUsername().equals(username));
     }
@@ -70,24 +45,11 @@
                 }
             }
         } catch (IOException e) {
-            e.printStackTrace(); // Log errori
+            e.printStackTrace();
         }
         return users;
     }
 
-    private boolean writeAllUsers(List<User> users) {
-        try (BufferedWriter writer = new BufferedWriter(new FileWriter(PATH_NAME))) {
-            for (User user : users) {
-                writer.write(userToLine(user));
-                writer.newLine();
-            }
-            return true;
-        } catch (IOException e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-
     private boolean appendToFile(String line) {
         try (BufferedWriter writer = new BufferedWriter(new FileWriter(PATH_NAME, true))) {
             writer.write(line);
Index: src/main/java/org/example/togetjob/view/gui/controllergrafico/SendAJobApplicationRecruiterController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.controllergrafico;\n\nimport javafx.beans.property.SimpleStringProperty;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXML;\nimport javafx.scene.control.*;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.text.Font;\nimport org.example.togetjob.bean.JobAnnouncementBean;\nimport org.example.togetjob.bean.JobApplicationBean;\nimport org.example.togetjob.view.boundary.PublishAJobAnnouncementRecruiterBoundary;\nimport org.example.togetjob.view.boundary.SendAJobApplicationRecruiterBoundary;\nimport org.example.togetjob.view.GUIContext;\nimport org.example.togetjob.view.gui.concretestate.HomeRecruiterState;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.List;\n\npublic class SendAJobApplicationRecruiterController {\n\n    private static final String BUTTON_STYLE = \"-fx-background-color: #2980b9; \" +\n            \"-fx-text-fill: white; \" +\n            \"-fx-border-radius: 10; \" +\n            \"-fx-border-color: #2980b9; \" +\n            \"-fx-border-width: 2; \" +\n            \"-fx-cursor: hand; \" +\n            \"-fx-font-weight: bold; \" +\n            \"-fx-background-radius: 10; \" +\n            \"-fx-font-size: 14px;\" + // Set font size for buttons\n            \"-fx-padding: 10 20;\"; // Set padding for larger buttons\n\n    @FXML\n    private TableView<JobAnnouncementBean> jobAnnouncementsTable;\n    @FXML\n    private TableColumn<JobAnnouncementBean, String> jobTitleColumn;\n    @FXML\n    private TableColumn<JobAnnouncementBean, String> companyColumn;\n    @FXML\n    private TableColumn<JobAnnouncementBean, Void> actionsColumn;\n\n    private GUIContext context;\n    private final PublishAJobAnnouncementRecruiterBoundary recruiterBoundary = new PublishAJobAnnouncementRecruiterBoundary();\n    private final SendAJobApplicationRecruiterBoundary sendAJobApplicationRecruiterBoundary = new SendAJobApplicationRecruiterBoundary();\n\n    // Set the context and load the job announcements into the table\n    public void setContext(GUIContext context) {\n        this.context = context;\n        loadJobAnnouncements();\n    }\n\n    // Load job announcements from the boundary and display them in the table\n    private void loadJobAnnouncements() {\n        try {\n            List<JobAnnouncementBean> jobAnnouncements = recruiterBoundary.getJobAnnouncements();\n            ObservableList<JobAnnouncementBean> observableList = FXCollections.observableArrayList(jobAnnouncements);\n            jobAnnouncementsTable.setItems(observableList);\n\n            // Display placeholder text when no job announcements are available\n            if (jobAnnouncements.isEmpty()) {\n                jobAnnouncementsTable.setPlaceholder(new Label(\"No content available\"));\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    @FXML\n    private void initialize() {\n        // Set up the cell value factories for each column\n        jobTitleColumn.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getJobTitle()));\n        companyColumn.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getCompanyName()));\n\n        // Set the font size for the columns\n        setColumnFont(jobTitleColumn);\n        setColumnFont(companyColumn);\n        setColumnFont(actionsColumn);\n\n        // Make the columns equally spaced\n        setColumnAcquiesced(jobTitleColumn);\n        setColumnAcquiesced(companyColumn);\n        setColumnAcquiesced(actionsColumn);\n\n        // Set up actions column with a \"View Job Applications\" button\n        actionsColumn.setCellFactory(c -> new TableCell<>() {\n            private final Button viewApplicationsButton = new Button(\"View Job Applications\");\n            private final HBox buttonsBox = new HBox(viewApplicationsButton);\n\n            {\n                viewApplicationsButton.setStyle(BUTTON_STYLE);\n                viewApplicationsButton.setOnAction(event -> viewJobApplications(getTableView().getItems().get(getIndex())));\n                buttonsBox.setStyle(\"-fx-alignment: center;\" + \"-fx-font-size: 12px;\");\n            }\n\n            @Override\n            protected void updateItem(Void item, boolean empty) {\n                super.updateItem(item, empty);\n                setGraphic(empty ? null : buttonsBox);\n            }\n        });\n    }\n\n    // Set the font size for a column\n    private void setColumnFont(TableColumn<?, ?> column) {\n        column.setStyle(\"-fx-font-size: \" + (double) 18 + \"px;\");\n    }\n\n    // Make the columns equally spaced\n    private void setColumnAcquiesced(TableColumn<?, ?> column) {\n        column.setResizable(true);\n        column.prefWidthProperty().bind(jobAnnouncementsTable.widthProperty().divide(jobAnnouncementsTable.getColumns().size()));\n    }\n\n    // Display job applications for a selected job announcement\n    private void viewJobApplications(JobAnnouncementBean jobAnnouncement) {\n\n        // Fetch only \"Pending\" job applications\n        List<JobApplicationBean> jobApplications = sendAJobApplicationRecruiterBoundary.getAllJobApplications(jobAnnouncement).stream()\n                .filter(application -> \"Pending\".equalsIgnoreCase(String.valueOf(application.getStatus())))  // Filter for Pending applications\n                .toList();\n\n        Dialog<Void> dialog = new Dialog<>();\n        dialog.setTitle(\"Job Applications for: \" + jobAnnouncement.getJobTitle());\n\n        dialog.getDialogPane().setMinWidth(600);\n        dialog.getDialogPane().setMinHeight(400);\n\n        TableView<JobApplicationBean> applicationsTable = new TableView<>();\n\n        // Create column for student name\n        TableColumn<JobApplicationBean, String> studentNameColumn = new TableColumn<>(\"Student Name\");\n        studentNameColumn.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getStudentUsername()));\n\n        // Create column for cover letter, with wrapping text\n        TableColumn<JobApplicationBean, String> coverLetterColumn = new TableColumn<>(\"Cover Letter\");\n        coverLetterColumn.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getCoverLetter()));\n\n        // Create the actions column for Accept/Reject buttons\n        TableColumn<JobApplicationBean, Void> actionsColumnForApplications = getJobApplicationBeanVoidTableColumn(jobApplications, jobAnnouncement);\n\n        // Set font size for each column\n        setColumnFont(studentNameColumn);\n        setColumnFont(coverLetterColumn); // Increase font size for cover letter column\n        setColumnFont(actionsColumnForApplications);\n\n        // Add columns to the table\n        applicationsTable.getColumns().clear();\n        applicationsTable.getColumns().add(studentNameColumn);\n        applicationsTable.getColumns().add(coverLetterColumn);\n        applicationsTable.getColumns().add(actionsColumnForApplications);\n\n        // Make the columns equally spaced\n        setColumnAcquiesced(studentNameColumn);\n        setColumnAcquiesced(coverLetterColumn);\n        setColumnAcquiesced(actionsColumnForApplications);\n\n        // Use TextArea for cover letter to allow for longer text wrapping\n        coverLetterColumn.setCellFactory(column -> {\n            return new TableCell<>() {\n                @Override\n                protected void updateItem(String item, boolean empty) {\n                    super.updateItem(item, empty);\n                    if (item == null || empty) {\n                        setText(null);\n                    } else {\n                        TextArea textArea = new TextArea(item);\n                        textArea.setWrapText(true); // Enable text wrapping\n                        textArea.setFont(Font.font(18)); // Larger font size\n                        textArea.setEditable(false); // Disable text editing\n                        textArea.setPrefRowCount(3); // Set a default row count\n                        textArea.setMaxWidth(450); // Set a maximum width for the text area\n                        setGraphic(textArea);\n                    }\n                }\n            };\n        });\n\n        // Set the items (job applications) in the table\n        ObservableList<JobApplicationBean> applicationsList = FXCollections.observableArrayList(jobApplications);\n        applicationsTable.setItems(applicationsList);\n\n        // Style the table\n        applicationsTable.setStyle(\"-fx-font-size: 18px; -fx-padding: 5px;\");\n\n        // Add the table to the dialog and display\n        dialog.getDialogPane().setContent(applicationsTable);\n        dialog.getDialogPane().getButtonTypes().add(ButtonType.OK);\n        dialog.showAndWait();\n    }\n\n    // Create the actions column with Accept/Reject buttons\n    @NotNull\n    private TableColumn<JobApplicationBean, Void> getJobApplicationBeanVoidTableColumn(List<JobApplicationBean> jobApplications, JobAnnouncementBean jobAnnouncement) {\n        TableColumn<JobApplicationBean, Void> actionsColumnForApplications = new TableColumn<>(\"Actions\");\n        actionsColumnForApplications.setCellFactory(column -> new TableCell<>() {\n            private final Button acceptButton = new Button(\"Accept\");\n            private final Button rejectButton = new Button(\"Reject\");\n\n            {\n                // Set the Accept button style\n                acceptButton.setStyle(BUTTON_STYLE);\n\n                // Set the Reject button style\n                rejectButton.setStyle(BUTTON_STYLE);\n\n                // Handle button actions\n                acceptButton.setOnAction(event -> handleAcceptApplication(getTableView().getItems().get(getIndex()), jobApplications));\n                rejectButton.setOnAction(event -> handleRejectApplication(getTableView().getItems().get(getIndex()), jobApplications));\n            }\n\n            @Override\n            protected void updateItem(Void item, boolean empty) {\n                super.updateItem(item, empty);\n                // Align the buttons horizontally with some padding\n                HBox buttonBox = new HBox(20, acceptButton, rejectButton); // Increase spacing\n                buttonBox.setStyle(\"-fx-alignment: center; -fx-padding: 10;\");\n                setGraphic(empty ? null : buttonBox);\n            }\n        });\n        return actionsColumnForApplications;\n    }\n\n    // Handle the acceptance of a job application\n    private void handleAcceptApplication(JobApplicationBean jobApplication, List<JobApplicationBean> jobApplications) {\n        boolean success = sendAJobApplicationRecruiterBoundary.acceptJobApplication(jobApplication);\n        if (success) {\n            jobApplications.remove(jobApplication); // Remove accepted application from the list\n            showAlert(Alert.AlertType.INFORMATION, \"Application Accepted!\");\n        } else {\n            showAlert(Alert.AlertType.ERROR, \"Failed to Accept Application.\");\n        }\n    }\n\n    // Handle the rejection of a job application\n    private void handleRejectApplication(JobApplicationBean jobApplication, List<JobApplicationBean> jobApplications) {\n        boolean success = sendAJobApplicationRecruiterBoundary.rejectJobApplication(jobApplication);\n        if (success) {\n            jobApplications.remove(jobApplication); // Remove rejected application from the list\n            showAlert(Alert.AlertType.INFORMATION, \"Application Rejected!\");\n        } else {\n            showAlert(Alert.AlertType.ERROR, \"Failed to Reject Application.\");\n        }\n    }\n\n    // Display an alert with the result of accepting/rejecting the application\n    private void showAlert(Alert.AlertType type, String message) {\n        Alert alert = new Alert(type, message);\n        alert.setTitle(\"Job Application\");\n        alert.setHeaderText(null);\n        alert.showAndWait();\n    }\n\n    // Go back to the previous screen\n    @FXML\n    private void handleGoBack() {\n        if (context != null) {\n            context.setState(new HomeRecruiterState(context));\n            context.showMenu();\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/controllergrafico/SendAJobApplicationRecruiterController.java b/src/main/java/org/example/togetjob/view/gui/controllergrafico/SendAJobApplicationRecruiterController.java
--- a/src/main/java/org/example/togetjob/view/gui/controllergrafico/SendAJobApplicationRecruiterController.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/controllergrafico/SendAJobApplicationRecruiterController.java	(date 1739642737300)
@@ -11,7 +11,7 @@
 import org.example.togetjob.bean.JobApplicationBean;
 import org.example.togetjob.view.boundary.PublishAJobAnnouncementRecruiterBoundary;
 import org.example.togetjob.view.boundary.SendAJobApplicationRecruiterBoundary;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.GUIContext;
 import org.example.togetjob.view.gui.concretestate.HomeRecruiterState;
 import org.jetbrains.annotations.NotNull;
 
Index: src/main/java/org/example/togetjob/view/gui/concretestate/SendAJobApplicationRecruiterState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.concretestate;\n\nimport javafx.application.Platform;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\nimport org.example.togetjob.view.Context;\nimport org.example.togetjob.view.State;\nimport org.example.togetjob.view.GUIContext;\nimport org.example.togetjob.view.gui.controllergrafico.SendAJobApplicationRecruiterController;\n\nimport java.io.IOException;\n\npublic class SendAJobApplicationRecruiterState implements State {\n\n    GUIContext context;\n\n    public SendAJobApplicationRecruiterState(GUIContext context) {\n        this.context = context;\n    }\n\n    @Override\n    public void showMenu() {\n        try {\n\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/org/example/togetjob/fxml/recruiterviewjobapplications.fxml\"));\n            Scene scene = new Scene(fxmlLoader.load(), 600, 500);\n\n\n            SendAJobApplicationRecruiterController controller = fxmlLoader.getController();\n            controller.setContext(context);\n\n\n            Stage stage = context.getStage();\n\n            if (stage == null) {\n                stage = new Stage();\n                context.setStage(stage);\n            }\n\n            stage.setTitle(\"Filtered Job Announcements by Student\");\n            stage.setScene(scene);\n\n\n            stage.setOnCloseRequest(event -> {\n                Platform.exit();  // JavaFX\n                System.exit(0);   // process\n            });\n\n            stage.show();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    @Override\n    public void goNext(Context context, String event) {\n        //**//\n    }\n    public GUIContext getContext() {\n        return context;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/concretestate/SendAJobApplicationRecruiterState.java b/src/main/java/org/example/togetjob/view/gui/concretestate/SendAJobApplicationRecruiterState.java
--- a/src/main/java/org/example/togetjob/view/gui/concretestate/SendAJobApplicationRecruiterState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/concretestate/SendAJobApplicationRecruiterState.java	(date 1739642737223)
@@ -4,9 +4,9 @@
 import javafx.fxml.FXMLLoader;
 import javafx.scene.Scene;
 import javafx.stage.Stage;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
+import org.example.togetjob.state.GUIContext;
 import org.example.togetjob.view.gui.controllergrafico.SendAJobApplicationRecruiterController;
 
 import java.io.IOException;
Index: src/main/java/org/example/togetjob/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob;\n\nimport javafx.application.Application;\nimport org.example.togetjob.config.AppConfig;\nimport org.example.togetjob.connection.DatabaseConfig;\nimport org.example.togetjob.exceptions.ConfigException;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.Context;\nimport org.example.togetjob.view.CliContext;\nimport org.example.togetjob.view.cli.concretestate.MainMenuState;\nimport org.example.togetjob.view.GUIContext;\n\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\n\npublic class Main {\n    private static Context context;\n\n    public static void main(String[] args) {\n        try {\n            AppConfig.loadConfigs();\n        } catch (ConfigException e) {\n            Printer.print(\"Error during configuration: \" + e.getMessage());\n            return;\n        }\n\n        setupDatabase();\n        launchUI();\n    }\n\n    private static void setupDatabase() {\n        String daoType = AppConfig.getDaoType();\n\n        if (\"jdbc\".equalsIgnoreCase(daoType)) {\n            DatabaseConfig databaseConfig = DatabaseConfig.getInstance();\n            databaseConfig.setConfigLoader(AppConfig.getDaoConfig());\n\n            try (Connection connection = databaseConfig.getConnection()) {\n                if (connection != null) {\n                    Printer.print(\"Database connection successful.\");\n                } else {\n                    Printer.print(\"Error during connection.\");\n                }\n            } catch (SQLException e) {\n                Printer.print(\"Error during connection: \" + e.getMessage());\n            }\n        } else if (\"in memory\".equalsIgnoreCase(daoType)) {\n            Printer.print(\"DAO In-Memory.\");\n        } else if (\"file system\".equalsIgnoreCase(daoType)) {\n            Printer.print(\"DAO FileSystem.\");\n        } else {\n            Printer.print(\"DAO not found.\");\n            System.exit(0);\n        }\n\n    }\n\n    private static void launchUI() {\n        String uiType = AppConfig.getUiType();\n\n        if (\"cli\".equalsIgnoreCase(uiType)) {\n            launchCli();\n        } else if (\"gui\".equalsIgnoreCase(uiType)) {\n            launchGui();\n        } else {\n            Printer.print(\"UI not found.\");\n        }\n    }\n\n    private static void launchCli() {\n        context = new CliContext();\n        Printer.print(\"CLI...\");\n        context.setState(new MainMenuState());\n        context.initialize();\n    }\n\n    private static void launchGui() {\n        context = new GUIContext();\n        Printer.print(\"GUI...\");\n        Application.launch(GUIContext.class);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/Main.java b/src/main/java/org/example/togetjob/Main.java
--- a/src/main/java/org/example/togetjob/Main.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/Main.java	(date 1739642737226)
@@ -5,10 +5,10 @@
 import org.example.togetjob.connection.DatabaseConfig;
 import org.example.togetjob.exceptions.ConfigException;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.CliContext;
-import org.example.togetjob.view.cli.concretestate.MainMenuState;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.CliContext;
+import org.example.togetjob.view.cli.MainMenuState;
+import org.example.togetjob.state.GUIContext;
 
 
 import java.sql.Connection;
Index: src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeStudentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.controllergrafico;\n\nimport javafx.fxml.FXML;\nimport javafx.geometry.Insets;\nimport javafx.geometry.Pos;\nimport javafx.scene.control.*;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.text.Text;\nimport org.example.togetjob.bean.JobApplicationBean;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.boundary.LoginBoundary;\nimport org.example.togetjob.view.boundary.SendAJobApplicationStudentBoundary;\nimport org.example.togetjob.view.GUIContext;\n\nimport java.util.List;\n\npublic class HomeStudentController {\n\n    @FXML\n    private TitledPane pendingApplicationsPane;\n    @FXML\n    private TitledPane acceptedApplicationsPane;\n    @FXML\n    private TitledPane rejectedApplicationsPane;\n\n    @FXML\n    private ListView<JobApplicationBean> pendingApplicationsList;\n\n    @FXML\n    private ListView<JobApplicationBean> acceptedApplicationsList;\n\n    @FXML\n    private ListView<JobApplicationBean> rejectedApplicationsList;\n\n    private static final String PENDING = \"PENDING\";\n    private static final String ACCEPTED = \"ACCEPTED\";\n    private static final String REJECTED = \"REJECTED\";\n\n    private GUIContext context;\n    private final LoginBoundary loginBoundary = new LoginBoundary();\n    private final SendAJobApplicationStudentBoundary sendAJobApplicationStudentBoundary = new SendAJobApplicationStudentBoundary();\n\n    public void setContext(GUIContext context) {\n        this.context = context;\n    }\n\n    @FXML\n    private void handleAcceptedApplications() {\n        List<JobApplicationBean> allApplications = sendAJobApplicationStudentBoundary.getJobApplicationsByStudent();\n        List<JobApplicationBean> acceptedApplications = allApplications.stream()\n                .filter(app -> ACCEPTED.equalsIgnoreCase(String.valueOf(app.getStatus())))\n                .toList();\n\n        Printer.print(\"Accepted applications: \" + acceptedApplications);\n        populateApplications(acceptedApplications, acceptedApplicationsPane);\n    }\n\n    @FXML\n    private void handleRejectedApplications() {\n        List<JobApplicationBean> allApplications = sendAJobApplicationStudentBoundary.getJobApplicationsByStudent();\n        List<JobApplicationBean> rejectedApplications = allApplications.stream()\n                .filter(app -> REJECTED.equalsIgnoreCase(String.valueOf(app.getStatus())))\n                .toList();\n\n        Printer.print(\"Rejected applications: \" + rejectedApplications);\n        populateApplications(rejectedApplications, rejectedApplicationsPane);\n    }\n\n    @FXML\n    private void handlePendingApplications() {\n        List<JobApplicationBean> allApplications = sendAJobApplicationStudentBoundary.getJobApplicationsByStudent();\n        List<JobApplicationBean> pendingApplications = allApplications.stream()\n                .filter(app -> PENDING.equalsIgnoreCase(String.valueOf(app.getStatus())))\n                .toList();\n\n        Printer.print(\"Pending applications: \" + pendingApplications);\n        populateApplications(pendingApplications, pendingApplicationsPane);\n    }\n\n    @FXML\n    private void sendAJobApplication() {\n        if (context != null) {\n            Printer.print(\"Context is initialized!\");\n            context.goNext(\"filter_jobs\");\n        } else {\n            Printer.print(\"Context is not initialized!\");\n        }\n    }\n\n    @FXML\n    private void handleLogout() {\n        if (context != null) {\n            Printer.print(\"Context is initialized!\");\n            loginBoundary.logout();\n            context.goNext(\"logout\");\n        } else {\n            Printer.print(\"Context is not initialized!\");\n        }\n    }\n\n    @FXML\n    private void handleViewNotifications() {\n        // ** //\n    }\n\n    private void populateApplications(List<JobApplicationBean> applications, TitledPane pane) {\n        ListView<JobApplicationBean> listView = getListViewForPane(pane);\n        if (listView != null) {\n            listView.getItems().clear();\n            listView.getItems().addAll(applications);\n            listView.setCellFactory(param -> createJobApplicationCell());\n        }\n    }\n\n    private ListView<JobApplicationBean> getListViewForPane(TitledPane pane) {\n        if (pendingApplicationsPane.equals(pane)) {\n            return pendingApplicationsList;\n        } else if (acceptedApplicationsPane.equals(pane)) {\n            return acceptedApplicationsList;\n        } else if (rejectedApplicationsPane.equals(pane)) {\n            return rejectedApplicationsList;\n        }\n        return null;\n    }\n\n    private ListCell<JobApplicationBean> createJobApplicationCell() {\n        return new ListCell<JobApplicationBean>() {\n            @Override\n            protected void updateItem(JobApplicationBean app, boolean empty) {\n                super.updateItem(app, empty);\n\n                if (empty || app == null) {\n                    setText(null);\n                    setGraphic(null);\n                } else {\n                    HBox hbox = new HBox(10);\n                    hbox.setAlignment(Pos.CENTER_LEFT);\n                    hbox.setPadding(new Insets(5, 10, 5, 10));\n\n                    // job title\n                    Text jobTitleText = new Text(app.getJobTitle());\n                    jobTitleText.setStyle(\"-fx-font-family: 'Apple Gothic'; -fx-font-weight: bold; -fx-font-size: 14px; -fx-fill: #2980b9;\");\n\n                    Text statusLabelText = new Text(\" - Status:\");\n                    statusLabelText.setStyle(\"-fx-font-family: 'Apple Gothic'; -fx-font-size: 12px; -fx-fill: #2980b9;\");\n\n                    Text statusText = new Text(app.getStatus().toString());\n                    statusText.setStyle(\"-fx-font-family: 'Apple Gothic'; -fx-font-size: 12px; \" + getStatusColorStyle(String.valueOf(app.getStatus())));\n\n                    hbox.getChildren().addAll(jobTitleText, statusLabelText, statusText);\n\n                    HBox buttonBox = createButtonsForApplication(app);\n                    hbox.getChildren().add(buttonBox);\n\n                    setGraphic(hbox);\n                }\n            }\n        };\n    }\n\n    private String getStatusColorStyle(String status) {\n        switch (status.toUpperCase()) {\n            case PENDING -> {\n                return \"-fx-fill: #2980b9;\";\n            }\n            case ACCEPTED -> {\n                return \"-fx-fill: #28A745;\";\n            }\n            case REJECTED -> {\n                return \"-fx-fill: #DC3545;\";\n            }\n            default -> {\n                return \"-fx-fill: #000000;\";\n            }\n        }\n    }\n\n    private HBox createButtonsForApplication(JobApplicationBean app) {\n        HBox hbox = new HBox(10);\n\n        if (PENDING.equalsIgnoreCase(String.valueOf(app.getStatus()))) {\n            Button modifyButton = new Button(\"Modify\");\n            modifyButton.setOnAction(event -> modifyApplication(app));\n\n            Button deleteButton = new Button(\"Delete\");\n            deleteButton.setOnAction(event -> deleteApplication(app));\n\n            String buttonStyle = \"-fx-background-color: #b3d9ff; \" +\n                    \"-fx-text-fill: #2980b9; \" +\n                    \"-fx-border-radius: 15; \" +\n                    \"-fx-border-color: #2980b9; \" +\n                    \"-fx-border-width: 2; \" +\n                    \"-fx-cursor: hand; \" +\n                    \"-fx-font-weight: bold; \" +\n                    \"-fx-background-radius: 15;\";\n\n            modifyButton.setStyle(buttonStyle);\n            deleteButton.setStyle(buttonStyle);\n\n            hbox.getChildren().addAll(modifyButton, deleteButton);\n        }\n\n        return hbox;\n    }\n\n    private void modifyApplication(JobApplicationBean application) {\n        Printer.print(\"Modify application: \" + application.getJobTitle());\n    }\n\n    private void deleteApplication(JobApplicationBean application) {\n        Printer.print(\"Delete application: \" + application.getJobTitle());\n        sendAJobApplicationStudentBoundary.deleteAJobApplication(application);\n        handlePendingApplications();\n        handleAcceptedApplications();\n        handleRejectedApplications();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeStudentController.java b/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeStudentController.java
--- a/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeStudentController.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeStudentController.java	(date 1739645678203)
@@ -10,7 +10,7 @@
 import org.example.togetjob.printer.Printer;
 import org.example.togetjob.view.boundary.LoginBoundary;
 import org.example.togetjob.view.boundary.SendAJobApplicationStudentBoundary;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.GUIContext;
 
 import java.util.List;
 
@@ -142,10 +142,10 @@
                     jobTitleText.setStyle("-fx-font-family: 'Apple Gothic'; -fx-font-weight: bold; -fx-font-size: 14px; -fx-fill: #2980b9;");
 
                     Text statusLabelText = new Text(" - Status:");
-                    statusLabelText.setStyle("-fx-font-family: 'Apple Gothic'; -fx-font-size: 12px; -fx-fill: #2980b9;");
+                    statusLabelText.setStyle("-fx-font-family: 'Apple Gothic'; -fx-font-size: 14px; -fx-fill: #2980b9;");
 
                     Text statusText = new Text(app.getStatus().toString());
-                    statusText.setStyle("-fx-font-family: 'Apple Gothic'; -fx-font-size: 12px; " + getStatusColorStyle(String.valueOf(app.getStatus())));
+                    statusText.setStyle("-fx-font-family: 'Apple Gothic'; -fx-font-size: 14px; " + getStatusColorStyle(String.valueOf(app.getStatus())));
 
                     hbox.getChildren().addAll(jobTitleText, statusLabelText, statusText);
 
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"InspectionProjectProfileManager\">\n  <profile version=\"1.0\">\n    <option name=\"myName\" value=\"Project Default\" />\n    <inspection_tool class=\"ExtractMethodRecommender\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\n      <option name=\"minLength\" value=\"525\" />\n    </inspection_tool>\n  </profile>\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
--- a/.idea/inspectionProfiles/Project_Default.xml	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(date 1739645742963)
@@ -2,7 +2,15 @@
   <profile version="1.0">
     <option name="myName" value="Project Default" />
     <inspection_tool class="ExtractMethodRecommender" enabled="true" level="WARNING" enabled_by_default="true">
-      <option name="minLength" value="525" />
+      <option name="minLength" value="559" />
+      <option name="maxParameters" value="1" />
+    </inspection_tool>
+    <inspection_tool class="SizeReplaceableByIsEmpty" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ignoredTypes">
+        <set>
+          <option value="java.lang.StringBuilder" />
+        </set>
+      </option>
     </inspection_tool>
   </profile>
 </component>
\ No newline at end of file
Index: src/main/java/org/example/togetjob/view/CliState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/CliState.java b/src/main/java/org/example/togetjob/state/CliState.java
rename from src/main/java/org/example/togetjob/view/CliState.java
rename to src/main/java/org/example/togetjob/state/CliState.java
--- a/src/main/java/org/example/togetjob/view/CliState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/state/CliState.java	(date 1739642737175)
@@ -1,4 +1,4 @@
-package org.example.togetjob.view;
+package org.example.togetjob.state;
 
 public interface CliState {
         void showMenu();
Index: src/main/java/org/example/togetjob/dao/abstractobjects/StudentDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.abstractobjects;\n\nimport org.example.togetjob.model.entity.Student;\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic interface StudentDao {\n\n    void saveStudent(Student student);\n    Optional<Student> getStudent(String username);\n    List<Student> getAllStudents();\n    boolean updateStudent(Student student);\n    boolean deleteStudent(String username);\n    boolean studentExists(String username);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/abstractobjects/StudentDao.java b/src/main/java/org/example/togetjob/dao/abstractobjects/StudentDao.java
--- a/src/main/java/org/example/togetjob/dao/abstractobjects/StudentDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/abstractobjects/StudentDao.java	(date 1739641158282)
@@ -10,7 +10,4 @@
     void saveStudent(Student student);
     Optional<Student> getStudent(String username);
     List<Student> getAllStudents();
-    boolean updateStudent(Student student);
-    boolean deleteStudent(String username);
-    boolean studentExists(String username);
 }
Index: src/main/java/org/example/togetjob/view/CliContext.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/CliContext.java b/src/main/java/org/example/togetjob/state/CliContext.java
rename from src/main/java/org/example/togetjob/view/CliContext.java
rename to src/main/java/org/example/togetjob/state/CliContext.java
--- a/src/main/java/org/example/togetjob/view/CliContext.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/state/CliContext.java	(date 1739642737190)
@@ -1,10 +1,10 @@
-package org.example.togetjob.view;
+package org.example.togetjob.state;
 
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.cli.concretestate.LoginState;
-import org.example.togetjob.view.cli.concretestate.MainMenuState;
-import org.example.togetjob.view.cli.concretestate.ExitState;
-import org.example.togetjob.view.cli.concretestate.RegisterState;
+import org.example.togetjob.view.cli.LoginState;
+import org.example.togetjob.view.cli.MainMenuState;
+import org.example.togetjob.view.cli.ExitState;
+import org.example.togetjob.view.cli.RegisterState;
 
 import java.util.Scanner;
 
Index: src/main/java/org/example/togetjob/dao/abstractobjects/JobApplicationDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.abstractobjects;\n\nimport org.example.togetjob.model.entity.JobAnnouncement;\nimport org.example.togetjob.model.entity.JobApplication;\nimport org.example.togetjob.model.entity.Student;\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic interface JobApplicationDao {\n\n    void saveJobApplication (JobApplication jobApplication);\n    Optional<JobApplication> getJobApplication(Student student, JobAnnouncement jobAnnouncement);\n    boolean updateJobApplication(JobApplication jobApplication);\n    boolean deleteJobApplication(JobApplication jobApplication);\n    boolean jobApplicationExists(Student student, JobAnnouncement jobAnnouncement);\n    List<JobApplication> getAllJobApplications(Student student);\n    List<JobApplication> getJobApplicationsByJobAnnouncement(JobAnnouncement jobAnnouncement);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/abstractobjects/JobApplicationDao.java b/src/main/java/org/example/togetjob/dao/abstractobjects/JobApplicationDao.java
--- a/src/main/java/org/example/togetjob/dao/abstractobjects/JobApplicationDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/abstractobjects/JobApplicationDao.java	(date 1739638298409)
@@ -11,9 +11,8 @@
 
     void saveJobApplication (JobApplication jobApplication);
     Optional<JobApplication> getJobApplication(Student student, JobAnnouncement jobAnnouncement);
-    boolean updateJobApplication(JobApplication jobApplication);
-    boolean deleteJobApplication(JobApplication jobApplication);
-    boolean jobApplicationExists(Student student, JobAnnouncement jobAnnouncement);
+    void updateJobApplication(JobApplication jobApplication);
+    void deleteJobApplication(JobApplication jobApplication);
     List<JobApplication> getAllJobApplications(Student student);
     List<JobApplication> getJobApplicationsByJobAnnouncement(JobAnnouncement jobAnnouncement);
 }
Index: src/main/resources/ui.config.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># cli, gui\nui.type = gui
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/ui.config.properties b/src/main/resources/ui.config.properties
--- a/src/main/resources/ui.config.properties	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/resources/ui.config.properties	(date 1739651979146)
@@ -1,2 +1,2 @@
 # cli, gui
-ui.type = gui
\ No newline at end of file
+ui.type = cli
\ No newline at end of file
Index: src/main/java/org/example/togetjob/view/gui/concretestate/ContactAJobCandidateState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.concretestate;\n\nimport javafx.application.Platform;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\nimport org.example.togetjob.bean.JobAnnouncementBean;\nimport org.example.togetjob.bean.StudentInfoSearchBean;\nimport org.example.togetjob.view.Context;\nimport org.example.togetjob.view.State;\nimport org.example.togetjob.view.GUIContext;\nimport org.example.togetjob.view.gui.controllergrafico.ContactAJobCandidateController;\n\nimport java.io.IOException;\n\npublic class ContactAJobCandidateState implements State {\n    private final GUIContext context;\n    private final StudentInfoSearchBean studentInfoSearchBean;\n    private final JobAnnouncementBean jobAnnouncementBean;\n\n    public ContactAJobCandidateState(GUIContext context, StudentInfoSearchBean studentInfoSearchBean, JobAnnouncementBean jobAnnouncementBean) {\n        this.context = context;\n        this.studentInfoSearchBean = studentInfoSearchBean;\n        this.jobAnnouncementBean = jobAnnouncementBean;\n    }\n\n    @Override\n    public void showMenu() {\n        try {\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/org/example/togetjob/fxml/filteredjobcandidates.fxml\"));\n            Scene scene = new Scene(fxmlLoader.load(), 600, 500);\n            ContactAJobCandidateController controller = fxmlLoader.getController();\n            controller.setContext(context);\n            controller.setStudentInfoSearchBean(studentInfoSearchBean);\n            controller.setJobAnnouncementBean(jobAnnouncementBean);\n\n            Stage stage = context.getStage();\n            if (stage == null) {\n                stage = createNewStage();\n            }\n\n            stage.setTitle(\"Contact a Job Candidate\");\n            stage.setScene(scene);\n            setCloseRequestListener(stage);\n            stage.show();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private Stage createNewStage() {\n        Stage stage = new Stage();\n        context.setStage(stage);\n        return stage;\n    }\n\n    private void setCloseRequestListener(Stage stage) {\n        stage.setOnCloseRequest(e -> {\n            Platform.exit();  // Exits JavaFX\n            System.exit(0);   // Terminates the process\n        });\n    }\n\n    @Override\n    public void goNext(Context context, String event) {\n        //**//\n    }\n    public GUIContext getContext() {\n        return context;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/concretestate/ContactAJobCandidateState.java b/src/main/java/org/example/togetjob/view/gui/concretestate/ContactAJobCandidateState.java
--- a/src/main/java/org/example/togetjob/view/gui/concretestate/ContactAJobCandidateState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/concretestate/ContactAJobCandidateState.java	(date 1739642737287)
@@ -6,26 +6,33 @@
 import javafx.stage.Stage;
 import org.example.togetjob.bean.JobAnnouncementBean;
 import org.example.togetjob.bean.StudentInfoSearchBean;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.printer.Printer;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
+import org.example.togetjob.state.GUIContext;
 import org.example.togetjob.view.gui.controllergrafico.ContactAJobCandidateController;
 
 import java.io.IOException;
 
 public class ContactAJobCandidateState implements State {
-    private final GUIContext context;
-    private final StudentInfoSearchBean studentInfoSearchBean;
-    private final JobAnnouncementBean jobAnnouncementBean;
 
-    public ContactAJobCandidateState(GUIContext context, StudentInfoSearchBean studentInfoSearchBean, JobAnnouncementBean jobAnnouncementBean) {
+    GUIContext context;
+
+    public ContactAJobCandidateState(GUIContext context) {
         this.context = context;
-        this.studentInfoSearchBean = studentInfoSearchBean;
-        this.jobAnnouncementBean = jobAnnouncementBean;
     }
 
     @Override
     public void showMenu() {
+
+        StudentInfoSearchBean studentInfoSearchBean = (StudentInfoSearchBean) context.get("studentInfoSearch");
+        JobAnnouncementBean jobAnnouncementBean = (JobAnnouncementBean) context.get("jobAnnouncement");
+
+        if (studentInfoSearchBean == null || jobAnnouncementBean == null) {
+            Printer.print("ERROR: Missing data in context!");
+            return;
+        }
+
         try {
             FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/org/example/togetjob/fxml/filteredjobcandidates.fxml"));
             Scene scene = new Scene(fxmlLoader.load(), 600, 500);
@@ -65,6 +72,7 @@
     public void goNext(Context context, String event) {
         //**//
     }
+
     public GUIContext getContext() {
         return context;
     }
Index: src/main/java/org/example/togetjob/dao/abstractobjects/UserDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.abstractobjects;\n\nimport org.example.togetjob.model.entity.User;\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic interface UserDao {\n    boolean saveUser(User user);\n    Optional<User> getUser(String username);\n    List<User> getAllUsers();\n    boolean updateUser(User user);\n    boolean deleteUser(String username);\n    boolean userExists(String username);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/abstractobjects/UserDao.java b/src/main/java/org/example/togetjob/dao/abstractobjects/UserDao.java
--- a/src/main/java/org/example/togetjob/dao/abstractobjects/UserDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/abstractobjects/UserDao.java	(date 1739641073447)
@@ -9,7 +9,4 @@
     boolean saveUser(User user);
     Optional<User> getUser(String username);
     List<User> getAllUsers();
-    boolean updateUser(User user);
-    boolean deleteUser(String username);
-    boolean userExists(String username);
 }
Index: src/main/java/org/example/togetjob/dao/abstractobjects/InterviewSchedulingDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.abstractobjects;\n\nimport org.example.togetjob.model.entity.InterviewScheduling;\nimport org.example.togetjob.model.entity.JobAnnouncement;\nimport org.example.togetjob.model.entity.Student;\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic interface InterviewSchedulingDao {\n\n    void saveInterviewScheduling(InterviewScheduling interviewScheduling);\n    Optional<InterviewScheduling> getInterviewScheduling(Student student, JobAnnouncement jobAnnouncement);\n    List<InterviewScheduling> getAllInterviewScheduling(JobAnnouncement jobAnnouncement);\n    boolean interviewSchedulingExists(Student student, JobAnnouncement jobAnnouncement);\n    List<InterviewScheduling> getAllInterviewScheduling(Student student);\n    void deleteInterviewScheduling(InterviewScheduling interviewScheduling);\n    void updateInterviewScheduling(InterviewScheduling interviewScheduling);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/abstractobjects/InterviewSchedulingDao.java b/src/main/java/org/example/togetjob/dao/abstractobjects/InterviewSchedulingDao.java
--- a/src/main/java/org/example/togetjob/dao/abstractobjects/InterviewSchedulingDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/abstractobjects/InterviewSchedulingDao.java	(date 1739637899420)
@@ -12,7 +12,6 @@
     void saveInterviewScheduling(InterviewScheduling interviewScheduling);
     Optional<InterviewScheduling> getInterviewScheduling(Student student, JobAnnouncement jobAnnouncement);
     List<InterviewScheduling> getAllInterviewScheduling(JobAnnouncement jobAnnouncement);
-    boolean interviewSchedulingExists(Student student, JobAnnouncement jobAnnouncement);
     List<InterviewScheduling> getAllInterviewScheduling(Student student);
     void deleteInterviewScheduling(InterviewScheduling interviewScheduling);
     void updateInterviewScheduling(InterviewScheduling interviewScheduling);
Index: src/main/java/org/example/togetjob/view/gui/controllergrafico/FilterJobCandidateRecruiterController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.controllergrafico;\n\nimport javafx.fxml.FXML;\nimport javafx.scene.control.TextField;\nimport org.example.togetjob.bean.JobAnnouncementBean;\nimport org.example.togetjob.bean.StudentInfoSearchBean;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.GUIContext;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class FilterJobCandidateRecruiterController {\n\n    @FXML\n    private TextField degreesField;\n    @FXML\n    private TextField coursesAttendedField;\n    @FXML\n    private TextField certificationsField;\n    @FXML\n    private TextField workField;\n    @FXML\n    private TextField skillsField;\n    @FXML\n    private TextField availabilityField;\n\n    private GUIContext context;\n\n    public void setContext(GUIContext context) {\n        this.context = context;\n    }\n\n    @FXML\n    private void handleProceedButton() {\n        if (context == null) {\n            Printer.print(\"ERROR: context is NULL in FilterJobCandidateRecruiterController!\");\n            return;\n        }\n\n        JobAnnouncementBean jobAnnouncementBean = (JobAnnouncementBean) context.get(\"jobAnnouncement\");\n\n        if (jobAnnouncementBean == null) {\n            Printer.print(\"ERROR: JobAnnouncementBean is NULL in context!\");\n            return;\n        }\n\n        String degreesInput = degreesField.getText();\n        String coursesInput = coursesAttendedField.getText();\n        String certificationsInput = certificationsField.getText();\n        String workInput = workField.getText();\n        String skillsInput = skillsField.getText();\n        String availabilityInput = availabilityField.getText();\n\n        StudentInfoSearchBean studentInfoSearchBean = new StudentInfoSearchBean();\n        studentInfoSearchBean.setDegrees(parseTextFieldInput(degreesInput));\n        studentInfoSearchBean.setCoursesAttended(parseTextFieldInput(coursesInput));\n        studentInfoSearchBean.setCertifications(parseTextFieldInput(certificationsInput));\n        studentInfoSearchBean.setWorkExperiences(parseTextFieldInput(workInput));\n        studentInfoSearchBean.setSkills(parseTextFieldInput(skillsInput));\n        studentInfoSearchBean.setAvailability(availabilityInput);\n\n\n        context.set(\"studentInfoSearch\", studentInfoSearchBean);\n\n\n        context.goNext(\"contactJobCandidate\");\n    }\n\n    @FXML\n    private void handleGoBack() {\n        if (context != null) {\n            Printer.print(\"Going back to HomeRecruiter...\");\n            context.goNext(\"homeRecruiter\");\n        } else {\n            Printer.print(\"Context is NOT initialized in FilterJobCandidateRecruiterController!\");\n        }\n    }\n\n    private List<String> parseTextFieldInput(String input) {\n        if (input != null && !input.trim().isEmpty()) {\n            return Arrays.stream(input.split(\",\"))\n                    .map(String::trim)\n                    .toList();\n        }\n        return List.of();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/controllergrafico/FilterJobCandidateRecruiterController.java b/src/main/java/org/example/togetjob/view/gui/controllergrafico/FilterJobCandidateRecruiterController.java
--- a/src/main/java/org/example/togetjob/view/gui/controllergrafico/FilterJobCandidateRecruiterController.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/controllergrafico/FilterJobCandidateRecruiterController.java	(date 1739642737266)
@@ -2,13 +2,12 @@
 
 import javafx.fxml.FXML;
 import javafx.scene.control.TextField;
-import org.example.togetjob.bean.JobAnnouncementBean;
 import org.example.togetjob.bean.StudentInfoSearchBean;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.GUIContext;
 
-import java.util.Arrays;
 import java.util.List;
+import java.util.ArrayList;
 
 public class FilterJobCandidateRecruiterController {
 
@@ -38,13 +37,6 @@
             return;
         }
 
-        JobAnnouncementBean jobAnnouncementBean = (JobAnnouncementBean) context.get("jobAnnouncement");
-
-        if (jobAnnouncementBean == null) {
-            Printer.print("ERROR: JobAnnouncementBean is NULL in context!");
-            return;
-        }
-
         String degreesInput = degreesField.getText();
         String coursesInput = coursesAttendedField.getText();
         String certificationsInput = certificationsField.getText();
@@ -59,12 +51,8 @@
         studentInfoSearchBean.setWorkExperiences(parseTextFieldInput(workInput));
         studentInfoSearchBean.setSkills(parseTextFieldInput(skillsInput));
         studentInfoSearchBean.setAvailability(availabilityInput);
-
-
         context.set("studentInfoSearch", studentInfoSearchBean);
-
-
-        context.goNext("contactJobCandidate");
+        context.goNext("filterJobCandidates");
     }
 
     @FXML
@@ -79,10 +67,14 @@
 
     private List<String> parseTextFieldInput(String input) {
         if (input != null && !input.trim().isEmpty()) {
-            return Arrays.stream(input.split(","))
-                    .map(String::trim)
-                    .toList();
+
+            List<String> resultList = new ArrayList<>();
+            String[] items = input.split(",");
+            for (String item : items) {
+                resultList.add(item.trim());
+            }
+            return resultList;
         }
-        return List.of();
+        return new ArrayList<>();
     }
 }
Index: src/main/java/org/example/togetjob/dao/abstractobjects/RecruiterDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.abstractobjects;\n\nimport org.example.togetjob.model.entity.Recruiter;\n\nimport java.util.Optional;\n\npublic interface RecruiterDao {\n\n    void saveRecruiter(Recruiter recruiter);\n    Optional<Recruiter> getRecruiter(String username);\n    boolean updateRecruiter(Recruiter recruiter);\n    boolean deleteRecruiter(String username);\n    boolean recruiterExists(String username);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/abstractobjects/RecruiterDao.java b/src/main/java/org/example/togetjob/dao/abstractobjects/RecruiterDao.java
--- a/src/main/java/org/example/togetjob/dao/abstractobjects/RecruiterDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/abstractobjects/RecruiterDao.java	(date 1739640757912)
@@ -8,7 +8,4 @@
 
     void saveRecruiter(Recruiter recruiter);
     Optional<Recruiter> getRecruiter(String username);
-    boolean updateRecruiter(Recruiter recruiter);
-    boolean deleteRecruiter(String username);
-    boolean recruiterExists(String username);
 }
Index: src/main/java/org/example/togetjob/view/gui/controllergrafico/ContactAJobCandidateController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.controllergrafico;\n\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXML;\nimport javafx.scene.control.*;\nimport javafx.scene.control.cell.PropertyValueFactory;\nimport javafx.scene.layout.HBox;\nimport org.example.togetjob.bean.*;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.boundary.ContactAJobCandidateRecruiterBoundary;\nimport org.example.togetjob.view.GUIContext;\nimport org.example.togetjob.view.gui.concretestate.FilterJobCandidateState;\n\nimport java.util.List;\n\npublic class ContactAJobCandidateController {\n\n    private GUIContext context;\n    private JobAnnouncementBean jobAnnouncementBean;\n    private StudentInfoSearchBean studentInfoSearchBean;\n    private final ContactAJobCandidateRecruiterBoundary contactAJobCandidateRecruiterBoundary = new ContactAJobCandidateRecruiterBoundary();\n\n    @FXML\n    private TableView<StudentInfoBean> candidatesTable;\n    @FXML\n    private TableColumn<StudentInfoBean, String> nameColumn;\n    @FXML\n    private TableColumn<StudentInfoBean, String> degreeColumn;\n    @FXML\n    private TableColumn<StudentInfoBean, Void> actionColumn;\n\n    public void setContext(GUIContext context) {\n        this.context = context;\n    }\n\n    public void setJobAnnouncementBean(JobAnnouncementBean jobAnnouncementBean) {\n        this.jobAnnouncementBean = jobAnnouncementBean;\n    }\n\n    public void setStudentInfoSearchBean(StudentInfoSearchBean studentInfoSearchBean) {\n        this.studentInfoSearchBean = studentInfoSearchBean;\n        populateCandidatesTable();\n    }\n\n    private void populateCandidatesTable() {\n        List<StudentInfoBean> candidates = getFilteredCandidates(studentInfoSearchBean, jobAnnouncementBean);\n\n        ObservableList<StudentInfoBean> observableCandidates = FXCollections.observableArrayList(candidates);\n        candidatesTable.setItems(observableCandidates);\n\n        nameColumn.setCellValueFactory(new PropertyValueFactory<>(\"name\"));\n        degreeColumn.setCellValueFactory(new PropertyValueFactory<>(\"degreesAsString\"));\n\n        actionColumn.setCellFactory(param -> new TableCell<>() {\n            @Override\n            protected void updateItem(Void item, boolean empty) {\n                super.updateItem(item, empty);\n\n                if (empty) {\n                    setGraphic(null);\n                } else {\n                    StudentInfoBean candidate = getTableView().getItems().get(getIndex());\n\n                    Button viewButton = new Button(\"View Details\");\n                    Button contactButton = new Button(\"Contact\");\n\n                    viewButton.setOnAction(event -> showCandidateDetails(candidate));\n                    contactButton.setOnAction(event -> contactCandidate(candidate));\n\n                    HBox buttons = new HBox(10, viewButton, contactButton);\n                    setGraphic(buttons);\n                }\n            }\n        });\n    }\n\n    public List<StudentInfoBean> getFilteredCandidates(StudentInfoSearchBean searchCriteria, JobAnnouncementBean jobAnnouncement) {\n        return contactAJobCandidateRecruiterBoundary.getFilteredCandidates(searchCriteria, jobAnnouncement);\n    }\n\n    private void showCandidateDetails(StudentInfoBean candidate) {\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\n        alert.setTitle(\"Job Candidates\");\n        alert.setHeaderText(candidate.getUsername());\n        alert.setContentText(\"Degrees: \" + formatList(candidate.getDegrees()) +\n                \"\\nCourses Attended: \" + formatList(candidate.getCoursesAttended()) +\n                \"\\nCertifications: \" + formatList(candidate.getCertifications()) +\n                \"\\nWork Experiences: \" + formatList(candidate.getWorkExperiences()) +\n                \"\\nSkills: \" + formatList(candidate.getSkills()) +\n                \"\\nAvailability: \" + candidate.getAvailability());\n        alert.showAndWait();\n    }\n\n    private void contactCandidate(StudentInfoBean candidate) {\n        InterviewSchedulingBean form = getInterviewSchedulingForm(candidate, jobAnnouncementBean);\n        boolean success = inviteCandidateToInterview(form);\n\n        Alert alert = new Alert(success ? Alert.AlertType.INFORMATION : Alert.AlertType.ERROR);\n        alert.setTitle(\"Interview Invitation\");\n        alert.setHeaderText(success ? \"Invitation Sent!\" : \"Error Sending Invitation\");\n        alert.setContentText(success ? \"The candidate has been successfully invited to an interview.\"\n                : \"An error occurred while sending the invitation.\");\n        alert.showAndWait();\n    }\n\n    public InterviewSchedulingBean getInterviewSchedulingForm(StudentInfoBean candidate, JobAnnouncementBean jobAnnouncement) {\n        return contactAJobCandidateRecruiterBoundary.getInterviewSchedulingForm(candidate, jobAnnouncement);\n    }\n\n    public boolean inviteCandidateToInterview(InterviewSchedulingBean interviewDetails) {\n        return contactAJobCandidateRecruiterBoundary.inviteCandidateToInterview(interviewDetails);\n    }\n\n    @FXML\n    private void handleBackButton() {\n        if (context != null) {\n            Printer.print(\"Going back to filters...\");\n            context.setState(new FilterJobCandidateState(context, jobAnnouncementBean));\n            context.showMenu();\n        } else {\n            Printer.print(\"Context is NOT initialized in RegisterController!\");\n        }\n    }\n\n    private String formatList(List<String> list) {\n        return (list == null || list.isEmpty()) ? \"N/A\" : String.join(\", \", list);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/controllergrafico/ContactAJobCandidateController.java b/src/main/java/org/example/togetjob/view/gui/controllergrafico/ContactAJobCandidateController.java
--- a/src/main/java/org/example/togetjob/view/gui/controllergrafico/ContactAJobCandidateController.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/controllergrafico/ContactAJobCandidateController.java	(date 1739642737183)
@@ -9,7 +9,7 @@
 import org.example.togetjob.bean.*;
 import org.example.togetjob.printer.Printer;
 import org.example.togetjob.view.boundary.ContactAJobCandidateRecruiterBoundary;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.GUIContext;
 import org.example.togetjob.view.gui.concretestate.FilterJobCandidateState;
 
 import java.util.List;
@@ -116,7 +116,7 @@
     private void handleBackButton() {
         if (context != null) {
             Printer.print("Going back to filters...");
-            context.setState(new FilterJobCandidateState(context, jobAnnouncementBean));
+            context.setState(new FilterJobCandidateState(context));
             context.showMenu();
         } else {
             Printer.print("Context is NOT initialized in RegisterController!");
Index: src/main/java/org/example/togetjob/dao/abstractobjects/JobAnnouncementDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.abstractobjects;\n\nimport org.example.togetjob.model.entity.JobAnnouncement;\nimport org.example.togetjob.model.entity.Recruiter;\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic interface JobAnnouncementDao {\n\n    boolean saveJobAnnouncement(JobAnnouncement jobAnnouncement);\n    Optional<JobAnnouncement> getJobAnnouncement(String jobTitle, Recruiter recruiter);\n    boolean updateJobAnnouncement(JobAnnouncement jobAnnouncement);\n    boolean deleteJobAnnouncement(JobAnnouncement jobAnnouncement);\n    boolean jobAnnouncementExists(String jobTitle, Recruiter recruiter);\n    List<JobAnnouncement> getAllJobAnnouncements(Recruiter recruiter);\n    List<JobAnnouncement> getAllJobAnnouncements();\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/abstractobjects/JobAnnouncementDao.java b/src/main/java/org/example/togetjob/dao/abstractobjects/JobAnnouncementDao.java
--- a/src/main/java/org/example/togetjob/dao/abstractobjects/JobAnnouncementDao.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/abstractobjects/JobAnnouncementDao.java	(date 1739638246175)
@@ -12,7 +12,6 @@
     Optional<JobAnnouncement> getJobAnnouncement(String jobTitle, Recruiter recruiter);
     boolean updateJobAnnouncement(JobAnnouncement jobAnnouncement);
     boolean deleteJobAnnouncement(JobAnnouncement jobAnnouncement);
-    boolean jobAnnouncementExists(String jobTitle, Recruiter recruiter);
     List<JobAnnouncement> getAllJobAnnouncements(Recruiter recruiter);
     List<JobAnnouncement> getAllJobAnnouncements();
 }
Index: src/main/java/org/example/togetjob/view/gui/controllergrafico/SendAJobApplicationByStudentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.controllergrafico;\n\nimport javafx.application.Platform;\nimport javafx.beans.property.SimpleStringProperty;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXML;\nimport javafx.scene.control.*;\nimport javafx.scene.layout.VBox;\nimport org.example.togetjob.bean.JobAnnouncementBean;\nimport org.example.togetjob.bean.JobAnnouncementSearchBean;\nimport org.example.togetjob.bean.JobApplicationBean;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.boundary.SendAJobApplicationStudentBoundary;\nimport org.example.togetjob.view.GUIContext;\nimport org.example.togetjob.view.gui.concretestate.HomeStudentState;\n\nimport java.util.List;\n\npublic class SendAJobApplicationByStudentController {\n\n\n    private static final String COMMON_FONT_STYLE = \"-fx-font-family: AppleGothic Regular; -fx-font-size: 18px; -fx-text-fill: #2980b9;\";\n\n    private static final String BUTTON_STYLE = \"-fx-background-color: #b3d9ff; \" +\n            \"-fx-text-fill: #2980b9; \" +\n            \"-fx-border-radius: 10; \" +\n            \"-fx-border-color: #2980b9; \" +\n            \"-fx-border-width: 2; \" +\n            \"-fx-cursor: hand; \" +\n            \"-fx-font-weight: bold; \" +\n            \"-fx-font-size: 12px; \" +\n            \"-fx-background-radius: 10;\";\n\n    @FXML\n    private TableView<JobAnnouncementBean> jobsTable;\n    @FXML\n    private TableColumn<JobAnnouncementBean, String> jobTitleColumn;\n    @FXML\n    private TableColumn<JobAnnouncementBean, String> companyColumn;\n    @FXML\n    private TableColumn<JobAnnouncementBean, Void> actionsColumn;\n\n    private GUIContext guiContext;\n    private JobAnnouncementSearchBean jobAnnouncementSearchBean;\n    private final SendAJobApplicationStudentBoundary boundary = new SendAJobApplicationStudentBoundary();\n\n    public void setContext(GUIContext context) {\n        this.guiContext = context;\n    }\n\n    public void setJobAnnouncementSearchBean(JobAnnouncementSearchBean jobAnnouncementSearchBean) {\n        this.jobAnnouncementSearchBean = jobAnnouncementSearchBean;\n        if (jobsTable != null) {\n            loadJobAnnouncements();\n        }\n    }\n\n    @FXML\n    private void initialize() {\n\n\n        jobTitleColumn.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getJobTitle()));\n        companyColumn.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getCompanyName()));\n\n        actionsColumn.setCellFactory(param -> new TableCell<>() {\n            private final Button viewDetailsButton = new Button(\"View Details\");\n            private final Button sendApplicationButton = new Button(\"Send a job application\");\n            private final VBox buttonsBox = new VBox(10, viewDetailsButton, sendApplicationButton);\n\n            {\n                viewDetailsButton.setStyle(BUTTON_STYLE);\n                sendApplicationButton.setStyle(BUTTON_STYLE);\n\n                viewDetailsButton.setOnAction(event -> viewJobDetails(getTableView().getItems().get(getIndex())));\n                sendApplicationButton.setOnAction(event -> openJobApplicationForm(getTableView().getItems().get(getIndex())));\n            }\n\n            @Override\n            protected void updateItem(Void item, boolean empty) {\n                super.updateItem(item, empty);\n                setGraphic(empty ? null : buttonsBox);\n            }\n        });\n\n        if (jobAnnouncementSearchBean != null) {\n            loadJobAnnouncements();\n        }\n    }\n\n    public void loadJobAnnouncements() {\n        if (jobAnnouncementSearchBean == null) {\n            Printer.print(\"ERROR: jobAnnouncementSearchBean is NULL\");\n            return;\n        }\n        List<JobAnnouncementBean> jobList = boundary.getJobAnnouncements(jobAnnouncementSearchBean);\n        ObservableList<JobAnnouncementBean> observableList = FXCollections.observableArrayList(jobList);\n        jobsTable.setItems(observableList);\n    }\n\n    private void viewJobDetails(JobAnnouncementBean job) {\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\n        alert.setTitle(\"Job Details\");\n        alert.setHeaderText(\"Position: \" + job.getJobTitle() + \" at \" + job.getCompanyName());\n\n        String details = \"\"\"\n                \uD83D\uDCCC Role: %s\n                \uD83C\uDFE2 Job Type: %s\n                \uD83D\uDCCD Location: %s\n                ⏰ Working Hours: %s\n                \uD83D\uDCB0 Salary: %s\n                \"\"\".formatted(\n                job.getRole(),\n                job.getJobType(),\n                job.getLocation(),\n                job.getWorkingHours(),\n                job.getSalary()\n        );\n\n\n        alert.setContentText(details);\n        alert.getDialogPane().setStyle(COMMON_FONT_STYLE);\n        alert.showAndWait();\n    }\n\n\n    private void openJobApplicationForm(JobAnnouncementBean job) {\n        JobApplicationBean applicationBean = boundary.fillJobApplicationForm(job);\n\n        Dialog<JobApplicationBean> dialog = new Dialog<>();\n        dialog.setTitle(\"Apply for: \" + job.getJobTitle());\n\n        TextArea coverLetterField = new TextArea();\n        coverLetterField.setPromptText(\"Write your cover letter here...\");\n        coverLetterField.setPrefRowCount(5);\n        coverLetterField.setStyle(COMMON_FONT_STYLE);\n\n        VBox formBox = new VBox(10, new Label(\"Cover Letter:\"), coverLetterField);\n        formBox.setStyle(\"-fx-padding: 10;\");\n\n        dialog.getDialogPane().setContent(formBox);\n        dialog.getDialogPane().getButtonTypes().addAll(\n                new ButtonType(\"Submit\", ButtonBar.ButtonData.OK_DONE),\n                new ButtonType(\"Go Back\", ButtonBar.ButtonData.CANCEL_CLOSE)\n        );\n\n        dialog.setOnShown(event ->\n                Platform.runLater(() -> {\n                    dialog.getDialogPane().lookupButton(ButtonType.OK).setStyle(BUTTON_STYLE);  // Applica lo stile al bottone \"Submit\"\n                    dialog.getDialogPane().lookupButton(ButtonType.CANCEL).setStyle(BUTTON_STYLE);  // Applica lo stile al bottone \"Go Back\"\n                })\n        );\n\n        dialog.setResultConverter(dialogButton -> {\n            if (dialogButton.getButtonData() == ButtonBar.ButtonData.OK_DONE) {\n                applicationBean.setCoverLetter(coverLetterField.getText());\n\n                try {\n\n                    boolean success = boundary.sendAJobApplication(applicationBean);\n\n\n                    showAlert(success ? Alert.AlertType.INFORMATION : Alert.AlertType.ERROR,\n                            success ? \"Application submitted successfully!\" : \"Failed to submit application.\");\n\n                } catch (Exception e) {\n                    showAlert(Alert.AlertType.ERROR, \"Error: \" + e.getMessage());\n                    e.printStackTrace(); // Per il debug\n                }\n            }\n            return null;\n        });\n\n        dialog.showAndWait();\n    }\n\n    private void showAlert(Alert.AlertType alertType, String message) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(\"Job Application Status\");\n        alert.setHeaderText(null);\n        alert.setContentText(message);\n        alert.showAndWait();\n    }\n\n    @FXML\n    private void handleGoBack() {\n        if (guiContext != null) {\n            guiContext.setState(new HomeStudentState(guiContext));\n            guiContext.showMenu();\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/controllergrafico/SendAJobApplicationByStudentController.java b/src/main/java/org/example/togetjob/view/gui/controllergrafico/SendAJobApplicationByStudentController.java
--- a/src/main/java/org/example/togetjob/view/gui/controllergrafico/SendAJobApplicationByStudentController.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/controllergrafico/SendAJobApplicationByStudentController.java	(date 1739646098976)
@@ -1,6 +1,5 @@
 package org.example.togetjob.view.gui.controllergrafico;
 
-import javafx.application.Platform;
 import javafx.beans.property.SimpleStringProperty;
 import javafx.collections.FXCollections;
 import javafx.collections.ObservableList;
@@ -12,25 +11,17 @@
 import org.example.togetjob.bean.JobApplicationBean;
 import org.example.togetjob.printer.Printer;
 import org.example.togetjob.view.boundary.SendAJobApplicationStudentBoundary;
-import org.example.togetjob.view.GUIContext;
-import org.example.togetjob.view.gui.concretestate.HomeStudentState;
+import org.example.togetjob.state.GUIContext;
 
 import java.util.List;
 
 public class SendAJobApplicationByStudentController {
 
-
-    private static final String COMMON_FONT_STYLE = "-fx-font-family: AppleGothic Regular; -fx-font-size: 18px; -fx-text-fill: #2980b9;";
-
-    private static final String BUTTON_STYLE = "-fx-background-color: #b3d9ff; " +
-            "-fx-text-fill: #2980b9; " +
-            "-fx-border-radius: 10; " +
-            "-fx-border-color: #2980b9; " +
-            "-fx-border-width: 2; " +
-            "-fx-cursor: hand; " +
-            "-fx-font-weight: bold; " +
-            "-fx-font-size: 12px; " +
-            "-fx-background-radius: 10;";
+    private static final String COMMON_FONT_STYLE = "-fx-font-family: 'Arial'; -fx-font-size: 14px; -fx-text-fill: #2c3e50;";
+    private static final String BUTTON_STYLE = "-fx-background-color: #b3d9ff; -fx-text-fill: #2980b9; " +
+            "-fx-border-radius: 5; -fx-border-color: #2980b9; -fx-border-width: 2; " +
+            "-fx-cursor: hand; -fx-font-weight: bold; -fx-background-radius: 5;" +
+            "-fx-font-size: 14px; -fx-padding: 10 20;";
 
     @FXML
     private TableView<JobAnnouncementBean> jobsTable;
@@ -58,28 +49,28 @@
 
     @FXML
     private void initialize() {
-
-
         jobTitleColumn.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getJobTitle()));
         companyColumn.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getCompanyName()));
 
+        jobTitleColumn.setPrefWidth(250);
+        companyColumn.setPrefWidth(200);
+        actionsColumn.setPrefWidth(150);
+
         actionsColumn.setCellFactory(param -> new TableCell<>() {
             private final Button viewDetailsButton = new Button("View Details");
-            private final Button sendApplicationButton = new Button("Send a job application");
-            private final VBox buttonsBox = new VBox(10, viewDetailsButton, sendApplicationButton);
 
             {
                 viewDetailsButton.setStyle(BUTTON_STYLE);
-                sendApplicationButton.setStyle(BUTTON_STYLE);
-
-                viewDetailsButton.setOnAction(event -> viewJobDetails(getTableView().getItems().get(getIndex())));
-                sendApplicationButton.setOnAction(event -> openJobApplicationForm(getTableView().getItems().get(getIndex())));
+                viewDetailsButton.setOnAction(event -> {
+                    JobAnnouncementBean job = getTableView().getItems().get(getIndex());
+                    openJobDetailsPopup(job);
+                });
             }
 
             @Override
             protected void updateItem(Void item, boolean empty) {
                 super.updateItem(item, empty);
-                setGraphic(empty ? null : buttonsBox);
+                setGraphic(empty ? null : viewDetailsButton);
             }
         });
 
@@ -98,74 +89,69 @@
         jobsTable.setItems(observableList);
     }
 
-    private void viewJobDetails(JobAnnouncementBean job) {
-        Alert alert = new Alert(Alert.AlertType.INFORMATION);
-        alert.setTitle("Job Details");
-        alert.setHeaderText("Position: " + job.getJobTitle() + " at " + job.getCompanyName());
+    private void openJobDetailsPopup(JobAnnouncementBean job) {
+        Dialog<Void> dialog = new Dialog<>();
+        dialog.setTitle("Job Details: " + job.getJobTitle());
+        dialog.setHeaderText(job.getCompanyName());
 
-        String details = """
-                📌 Role: %s
-                🏢 Job Type: %s
-                📍 Location: %s
-                ⏰ Working Hours: %s
-                💰 Salary: %s
-                """.formatted(
-                job.getRole(),
-                job.getJobType(),
-                job.getLocation(),
-                job.getWorkingHours(),
-                job.getSalary()
+        Label detailsLabel = new Label("Details:");
+        detailsLabel.setStyle(COMMON_FONT_STYLE);
+        Label detailsContent = new Label(
+                "Role: " + job.getRole() + "\n" +
+                        "Type: " + job.getJobType() + "\n" +
+                        "Location: " + job.getLocation() + "\n" +
+                        "Working Hours: " + job.getWorkingHours() + "\n" +
+                        "Salary: " + job.getSalary()
         );
+        detailsContent.setWrapText(true);
+        detailsContent.setStyle(COMMON_FONT_STYLE);
 
+        Button applyButton = new Button("Apply");
+        applyButton.setStyle(BUTTON_STYLE);
+        applyButton.setOnAction(event -> openJobApplicationForm(job));
 
-        alert.setContentText(details);
-        alert.getDialogPane().setStyle(COMMON_FONT_STYLE);
-        alert.showAndWait();
-    }
+        VBox detailsBox = new VBox(10, detailsLabel, detailsContent, applyButton);
+        detailsBox.setStyle("-fx-padding: 10;");
 
+        dialog.getDialogPane().setContent(detailsBox);
+        dialog.getDialogPane().getButtonTypes().add(ButtonType.CLOSE);
+        dialog.showAndWait();
+    }
 
     private void openJobApplicationForm(JobAnnouncementBean job) {
-        JobApplicationBean applicationBean = boundary.fillJobApplicationForm(job);
-
         Dialog<JobApplicationBean> dialog = new Dialog<>();
         dialog.setTitle("Apply for: " + job.getJobTitle());
+        dialog.setHeaderText("Submit your application for " + job.getCompanyName());
+
+        Label coverLetterLabel = new Label("Cover Letter:");
+        coverLetterLabel.setStyle(COMMON_FONT_STYLE);
 
         TextArea coverLetterField = new TextArea();
         coverLetterField.setPromptText("Write your cover letter here...");
         coverLetterField.setPrefRowCount(5);
         coverLetterField.setStyle(COMMON_FONT_STYLE);
 
-        VBox formBox = new VBox(10, new Label("Cover Letter:"), coverLetterField);
+        VBox formBox = new VBox(10, coverLetterLabel, coverLetterField);
         formBox.setStyle("-fx-padding: 10;");
 
         dialog.getDialogPane().setContent(formBox);
         dialog.getDialogPane().getButtonTypes().addAll(
                 new ButtonType("Submit", ButtonBar.ButtonData.OK_DONE),
-                new ButtonType("Go Back", ButtonBar.ButtonData.CANCEL_CLOSE)
-        );
-
-        dialog.setOnShown(event ->
-                Platform.runLater(() -> {
-                    dialog.getDialogPane().lookupButton(ButtonType.OK).setStyle(BUTTON_STYLE);  // Applica lo stile al bottone "Submit"
-                    dialog.getDialogPane().lookupButton(ButtonType.CANCEL).setStyle(BUTTON_STYLE);  // Applica lo stile al bottone "Go Back"
-                })
+                new ButtonType("Cancel", ButtonBar.ButtonData.CANCEL_CLOSE)
         );
 
         dialog.setResultConverter(dialogButton -> {
             if (dialogButton.getButtonData() == ButtonBar.ButtonData.OK_DONE) {
-                applicationBean.setCoverLetter(coverLetterField.getText());
-
+                JobApplicationBean applicationBean = new JobApplicationBean();
+                applicationBean.setJobTitle(job.getJobTitle());
+                applicationBean.setRecruiterUsername(job.getCompanyName());
+                applicationBean.setCoverLetter(coverLetterField.getText().trim());
                 try {
-
                     boolean success = boundary.sendAJobApplication(applicationBean);
-
-
                     showAlert(success ? Alert.AlertType.INFORMATION : Alert.AlertType.ERROR,
                             success ? "Application submitted successfully!" : "Failed to submit application.");
-
                 } catch (Exception e) {
                     showAlert(Alert.AlertType.ERROR, "Error: " + e.getMessage());
-                    e.printStackTrace(); // Per il debug
                 }
             }
             return null;
@@ -174,19 +160,10 @@
         dialog.showAndWait();
     }
 
-    private void showAlert(Alert.AlertType alertType, String message) {
-        Alert alert = new Alert(alertType);
-        alert.setTitle("Job Application Status");
+    private void showAlert(Alert.AlertType type, String message) {
+        Alert alert = new Alert(type, message);
+        alert.setTitle("Notification");
         alert.setHeaderText(null);
-        alert.setContentText(message);
         alert.showAndWait();
     }
-
-    @FXML
-    private void handleGoBack() {
-        if (guiContext != null) {
-            guiContext.setState(new HomeStudentState(guiContext));
-            guiContext.showMenu();
-        }
-    }
 }
Index: src/main/java/org/example/togetjob/view/State.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/State.java b/src/main/java/org/example/togetjob/state/State.java
rename from src/main/java/org/example/togetjob/view/State.java
rename to src/main/java/org/example/togetjob/state/State.java
--- a/src/main/java/org/example/togetjob/view/State.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/state/State.java	(date 1739642737251)
@@ -1,4 +1,4 @@
-package org.example.togetjob.view;
+package org.example.togetjob.state;
 
 public interface State {
     void showMenu();
Index: src/main/java/org/example/togetjob/view/Context.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/Context.java b/src/main/java/org/example/togetjob/state/Context.java
rename from src/main/java/org/example/togetjob/view/Context.java
rename to src/main/java/org/example/togetjob/state/Context.java
--- a/src/main/java/org/example/togetjob/view/Context.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/state/Context.java	(date 1739642737213)
@@ -1,4 +1,4 @@
-package org.example.togetjob.view;
+package org.example.togetjob.state;
 
 public interface Context {
     void initialize();  // UI (CLI o GUI)
Index: src/main/java/org/example/togetjob/dao/abstractfactorydao/AbstractFactoryDaoSingleton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.dao.abstractfactorydao;\n\nimport org.example.togetjob.config.ConfigDaoLoader;\nimport org.example.togetjob.dao.abstractobjects.*;\nimport org.example.togetjob.model.dao.abstractobjects.*;\nimport org.example.togetjob.dao.concretefactorydao.DataBaseFactoryDao;\nimport org.example.togetjob.dao.concretefactorydao.FileSystemFactoryDao;\nimport org.example.togetjob.dao.concretefactorydao.InMemoryFactoryDao;\n\npublic abstract class\nAbstractFactoryDaoSingleton {\n\n    private static AbstractFactoryDaoSingleton factoryDao = null;\n    private static ConfigDaoLoader configLoader;\n\n    protected AbstractFactoryDaoSingleton() {\n    }\n\n    public static void setConfigLoader(ConfigDaoLoader loader){\n        if(loader == null){\n            throw new IllegalArgumentException(\"Error.\");\n        }\n        configLoader = loader;\n    }\n\n    public static synchronized AbstractFactoryDaoSingleton getFactoryDao(){\n\n       if(factoryDao == null){\n           if(configLoader ==  null){\n               throw new IllegalStateException(\"Error.\");\n           }\n\n           String daoType = configLoader.getProperty(\"dao.type\");\n           if(daoType == null || daoType.isEmpty()){\n               throw new IllegalArgumentException(\"Type of DAO not found.\");\n           }\n\n           switch (daoType.toLowerCase()){\n\n               case \"in memory\":\n                   factoryDao = new InMemoryFactoryDao();\n                   break;\n               case \"jdbc\":\n                   factoryDao = new DataBaseFactoryDao();\n                   break;\n               case \"file system\":\n                   factoryDao = new FileSystemFactoryDao();\n                   break;\n               default:\n                   throw new IllegalArgumentException(\"Type of DAO not found\" + daoType);\n           }\n\n        }\n\n        return factoryDao;\n\n    }\n\n    public abstract UserDao createUserDao();\n    public abstract JobAnnouncementDao createJobAnnouncementDao();\n    public abstract StudentDao createStudentDao();\n    public abstract RecruiterDao createRecruiterDao();\n    public abstract JobApplicationDao createJobApplicationDao();\n    public abstract InterviewSchedulingDao createInterviewSchedulingDao();\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/dao/abstractfactorydao/AbstractFactoryDaoSingleton.java b/src/main/java/org/example/togetjob/dao/abstractfactorydao/AbstractFactoryDaoSingleton.java
--- a/src/main/java/org/example/togetjob/dao/abstractfactorydao/AbstractFactoryDaoSingleton.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/dao/abstractfactorydao/AbstractFactoryDaoSingleton.java	(date 1739639891724)
@@ -2,7 +2,6 @@
 
 import org.example.togetjob.config.ConfigDaoLoader;
 import org.example.togetjob.dao.abstractobjects.*;
-import org.example.togetjob.model.dao.abstractobjects.*;
 import org.example.togetjob.dao.concretefactorydao.DataBaseFactoryDao;
 import org.example.togetjob.dao.concretefactorydao.FileSystemFactoryDao;
 import org.example.togetjob.dao.concretefactorydao.InMemoryFactoryDao;
@@ -18,7 +17,7 @@
 
     public static void setConfigLoader(ConfigDaoLoader loader){
         if(loader == null){
-            throw new IllegalArgumentException("Error.");
+            throw new IllegalArgumentException("Error during configuration.");
         }
         configLoader = loader;
     }
@@ -27,7 +26,7 @@
 
        if(factoryDao == null){
            if(configLoader ==  null){
-               throw new IllegalStateException("Error.");
+               throw new IllegalStateException("Error during configuration.");
            }
 
            String daoType = configLoader.getProperty("dao.type");
Index: src/main/java/org/example/togetjob/view/gui/concretestate/FilterJobAnnouncementStudentState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.concretestate;\n\nimport javafx.application.Platform;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.Context;\nimport org.example.togetjob.view.State;\nimport org.example.togetjob.view.GUIContext;\nimport org.example.togetjob.view.gui.controllergrafico.FilterJobAnnouncementStudentController;\n\nimport java.io.IOException;\n\npublic class FilterJobAnnouncementStudentState implements State {\n\n    private final GUIContext context;\n\n    public FilterJobAnnouncementStudentState(GUIContext context) {\n        this.context = context;\n    }\n\n    @Override\n    public void showMenu() {\n        Printer.print(\"Showing Filter Job Announcement by Student...\");\n\n        try {\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/org/example/togetjob/fxml/studentfiltersjobannouncement.fxml\"));\n            Scene scene = new Scene(fxmlLoader.load(), 600, 500);\n\n            FilterJobAnnouncementStudentController filterJobAnnouncementStudentController = fxmlLoader.getController();\n            filterJobAnnouncementStudentController.setContext(context);\n\n            Stage stage = context.getStage();\n\n            if (stage == null) {\n                stage = new Stage();\n                context.setStage(stage);\n            }\n\n            stage.setTitle(\"Filter Job Announcements\");\n            stage.setScene(scene);\n\n            stage.setOnCloseRequest(event -> {\n                Platform.exit();  // JavaFX\n                System.exit(0);\n            });\n\n            stage.show();\n\n        } catch (IOException e) {\n            e.printStackTrace();\n            Printer.print(\"Error loading FXML: \" + e.getMessage());\n        }\n    }\n\n    @Override\n    public void goNext(Context context, String event) {\n        //**//\n    }\n    public GUIContext getContext() {\n        return context;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/concretestate/FilterJobAnnouncementStudentState.java b/src/main/java/org/example/togetjob/view/gui/concretestate/FilterJobAnnouncementStudentState.java
--- a/src/main/java/org/example/togetjob/view/gui/concretestate/FilterJobAnnouncementStudentState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/concretestate/FilterJobAnnouncementStudentState.java	(date 1739642737208)
@@ -5,9 +5,9 @@
 import javafx.scene.Scene;
 import javafx.stage.Stage;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
+import org.example.togetjob.state.GUIContext;
 import org.example.togetjob.view.gui.controllergrafico.FilterJobAnnouncementStudentController;
 
 import java.io.IOException;
Index: src/main/java/org/example/togetjob/view/cli/concretestate/HomeStudentState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/cli/concretestate/HomeStudentState.java b/src/main/java/org/example/togetjob/view/cli/HomeStudentState.java
rename from src/main/java/org/example/togetjob/view/cli/concretestate/HomeStudentState.java
rename to src/main/java/org/example/togetjob/view/cli/HomeStudentState.java
--- a/src/main/java/org/example/togetjob/view/cli/concretestate/HomeStudentState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/cli/HomeStudentState.java	(date 1739642737232)
@@ -1,12 +1,12 @@
-package org.example.togetjob.view.cli.concretestate;
+package org.example.togetjob.view.cli;
 
 import org.example.togetjob.bean.InterviewSchedulingStudentInfoBean;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
 import org.example.togetjob.view.boundary.ContactAJobCandidateStudentBoundary;
 import org.example.togetjob.view.boundary.LoginBoundary;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.CliContext;
+import org.example.togetjob.state.CliContext;
 
 import java.util.List;
 
@@ -22,7 +22,7 @@
             Printer.print("Welcome, Student! You can do the following:");
             Printer.print("1. View your profile");
             Printer.print("2. Vote a company");
-            Printer.print("3. Show Job Announcements");
+            Printer.print("3. Send a job application");
             Printer.print("4. View notifications");
             Printer.print("5. Logout");
             Printer.print("6. Exit");
Index: src/main/java/org/example/togetjob/controller/LoginController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.controller;\n\nimport org.example.togetjob.bean.LoginUserBean;\nimport org.example.togetjob.exceptions.UserNotFoundException;\nimport org.example.togetjob.exceptions.WrongPasswordException;\nimport org.example.togetjob.dao.abstractfactorydao.AbstractFactoryDaoSingleton;\nimport org.example.togetjob.dao.abstractobjects.UserDao;\nimport org.example.togetjob.model.entity.User;\nimport org.example.togetjob.session.SessionManager;\n\npublic class LoginController {\n\n    private final UserDao userDao;\n\n    public LoginController(){\n        this.userDao = AbstractFactoryDaoSingleton.getFactoryDao().createUserDao();\n    }\n\n    public boolean loginUser(LoginUserBean loginUserBean) throws UserNotFoundException, WrongPasswordException {\n\n\n        User user = userDao.getUser(loginUserBean.getUsername()).orElse(null);\n\n        if(user == null){ //User not found\n            throw new UserNotFoundException(\"User not found: \" + loginUserBean.getUsername());\n        }\n\n        if(!(user.obtainPassword().equalsIgnoreCase(loginUserBean.getPassword()))){\n            throw new WrongPasswordException(\"Incorrect password for user: \" + loginUserBean.getUsername());\n        }\n\n        SessionManager.getInstance().setCurrentUser(user);\n        return true;\n    }\n\n    public boolean isUserLogged(){\n        SessionManager sessionManager = SessionManager.getInstance();\n        return sessionManager.getCurrentUser() != null;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/controller/LoginController.java b/src/main/java/org/example/togetjob/controller/LoginController.java
--- a/src/main/java/org/example/togetjob/controller/LoginController.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/controller/LoginController.java	(date 1739651573047)
@@ -18,7 +18,6 @@
 
     public boolean loginUser(LoginUserBean loginUserBean) throws UserNotFoundException, WrongPasswordException {
 
-
         User user = userDao.getUser(loginUserBean.getUsername()).orElse(null);
 
         if(user == null){ //User not found
Index: src/main/java/org/example/togetjob/view/GUIState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/GUIState.java b/src/main/java/org/example/togetjob/state/GUIState.java
rename from src/main/java/org/example/togetjob/view/GUIState.java
rename to src/main/java/org/example/togetjob/state/GUIState.java
--- a/src/main/java/org/example/togetjob/view/GUIState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/state/GUIState.java	(date 1739642737278)
@@ -1,4 +1,4 @@
-package org.example.togetjob.view;
+package org.example.togetjob.state;
 
 public interface GUIState {
     void showMenu(); //to view scene
Index: src/main/java/org/example/togetjob/exceptions/UnauthorizedAccessException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/exceptions/UnauthorizedAccessException.java b/src/main/java/org/example/togetjob/exceptions/UnauthorizedAccessException.java
new file mode 100644
--- /dev/null	(date 1739639214796)
+++ b/src/main/java/org/example/togetjob/exceptions/UnauthorizedAccessException.java	(date 1739639214796)
@@ -0,0 +1,7 @@
+package org.example.togetjob.exceptions;
+
+public class UnauthorizedAccessException extends RuntimeException {
+    public UnauthorizedAccessException(String message) {
+        super(message);
+    }
+}
Index: src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module org.example.togetjob {\n    requires javafx.controls;\n    requires javafx.fxml;\n    requires javafx.web;\n    requires org.controlsfx.controls;\n    requires com.dlsc.formsfx;\n    requires net.synedra.validatorfx;\n    requires org.kordamp.ikonli.javafx;\n    requires org.kordamp.bootstrapfx.core;\n    requires eu.hansolo.tilesfx;\n    requires com.almasb.fxgl.all;\n    requires com.fasterxml.jackson.databind;\n    requires java.sql;\n    requires annotations;\n    requires mysql.connector.j;\n    requires java.desktop;\n    requires java.naming;\n\n    opens org.example.togetjob to javafx.fxml;\n    exports org.example.togetjob;\n    exports org.example.togetjob.view.gui.controllergrafico;\n    exports org.example.togetjob.bean;\n    opens org.example.togetjob.view.gui.controllergrafico to javafx.fxml;\n    exports org.example.togetjob.view;\n    opens org.example.togetjob.view to javafx.fxml;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/module-info.java b/src/main/java/module-info.java
--- a/src/main/java/module-info.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/module-info.java	(date 1739642802902)
@@ -21,6 +21,6 @@
     exports org.example.togetjob.view.gui.controllergrafico;
     exports org.example.togetjob.bean;
     opens org.example.togetjob.view.gui.controllergrafico to javafx.fxml;
-    exports org.example.togetjob.view;
-    opens org.example.togetjob.view to javafx.fxml;
+    exports org.example.togetjob.state;
+    opens org.example.togetjob.state to javafx.fxml;
 }
Index: src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterRecruiterController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.controllergrafico;\n\nimport javafx.fxml.FXML;\nimport javafx.scene.control.TextField;\nimport org.example.togetjob.bean.RecruiterInfoBean;\nimport org.example.togetjob.bean.RegisterUserBean;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.boundary.RegisterBoundary;\nimport org.example.togetjob.view.GUIContext;\n\nimport java.util.List;\n\npublic class RegisterRecruiterController {\n\n    @FXML private TextField companiesField;\n\n    private GUIContext context;\n    private RegisterUserBean userBean;\n    private final RegisterBoundary registerBoundary = new RegisterBoundary();\n\n    public void setContext(GUIContext context) {\n        this.context = context;\n    }\n\n    public void setUserBean(RegisterUserBean userBean) {\n        this.userBean = userBean;\n    }\n\n    @FXML\n    private void handleContinueButton() {\n\n        List<String> companies = List.of(companiesField.getText().split(\",\"));\n\n        RecruiterInfoBean recruiterInfoBean = new RecruiterInfoBean();\n        recruiterInfoBean.setCompanies(companies);\n\n        if (companies.isEmpty()) {\n            Printer.print(\"Companies field cannot be empty!\");\n            return;\n        }\n\n        boolean registrationSuccess = registerBoundary.registerUser(userBean, recruiterInfoBean);\n\n        if (registrationSuccess) {\n            Printer.print(\"Recruiter successfully registered: \" + recruiterInfoBean);\n            context.set(\"recruiterInfo\", recruiterInfoBean);\n            context.goNext(\"go_home_recruiter\");\n        } else {\n            Printer.print(\"Registration failed!\");\n        }\n    }\n\n    @FXML\n    private void handleBackButton() {\n        if (context != null) {\n            Printer.print(\"Going back to Home...\");\n            context.goNext(\"go_home\");\n        } else {\n            Printer.print(\"Context is NOT initialized in RegisterRecruiterController!\");\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterRecruiterController.java b/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterRecruiterController.java
--- a/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterRecruiterController.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/controllergrafico/RegisterRecruiterController.java	(date 1739642737229)
@@ -6,7 +6,7 @@
 import org.example.togetjob.bean.RegisterUserBean;
 import org.example.togetjob.printer.Printer;
 import org.example.togetjob.view.boundary.RegisterBoundary;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.GUIContext;
 
 import java.util.List;
 
Index: src/main/java/org/example/togetjob/exceptions/JobApplicationAlreadyProcessedException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/exceptions/JobApplicationAlreadyProcessedException.java b/src/main/java/org/example/togetjob/exceptions/JobApplicationAlreadyProcessedException.java
new file mode 100644
--- /dev/null	(date 1739639594305)
+++ b/src/main/java/org/example/togetjob/exceptions/JobApplicationAlreadyProcessedException.java	(date 1739639594305)
@@ -0,0 +1,7 @@
+package org.example.togetjob.exceptions;
+
+public class JobApplicationAlreadyProcessedException extends RuntimeException {
+    public JobApplicationAlreadyProcessedException(String message) {
+        super(message);
+    }
+}
Index: src/main/java/org/example/togetjob/view/gui/controllergrafico/FilterJobAnnouncementStudentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.controllergrafico;\n\nimport javafx.fxml.FXML;\nimport javafx.scene.control.TextField;\nimport org.example.togetjob.bean.JobAnnouncementSearchBean;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.GUIContext;\nimport org.example.togetjob.view.gui.concretestate.FilteredJobAnnouncementsState;\nimport org.example.togetjob.view.gui.concretestate.HomeStudentState;\n\npublic class FilterJobAnnouncementStudentController {\n\n    @FXML\n    private TextField jobTitleField ;\n    @FXML\n    private TextField jobTypeField ;\n    @FXML\n    private TextField roleField ;\n    @FXML\n    private TextField locationField ;\n    @FXML\n    private TextField workingHoursField ;\n    @FXML\n    private TextField companyNameField ;\n    @FXML\n    private TextField salaryField ;\n\n    GUIContext context;\n\n    public void setContext(GUIContext context){\n        this.context = context;\n    }\n\n    @FXML\n    private void handleProceedButton(){\n\n        String jobTitle = jobTitleField.getText();\n        String jobType = jobTypeField.getText();\n        String role = roleField.getText();\n        String location = locationField.getText();\n        String workingHours = workingHoursField.getText();\n        String companyName = companyNameField.getText();\n        String salary = salaryField.getText();\n\n        JobAnnouncementSearchBean jobAnnouncementSearchBean = new JobAnnouncementSearchBean() ;\n\n        jobAnnouncementSearchBean.setJobTitle(jobTitle);\n        jobAnnouncementSearchBean.setJobType(jobType);\n        jobAnnouncementSearchBean.setCompanyName(companyName);\n        jobAnnouncementSearchBean.setLocation(location);\n        jobAnnouncementSearchBean.setWorkingHours(workingHours);\n        jobAnnouncementSearchBean.setSalary(salary);\n        jobAnnouncementSearchBean.setRole(role);\n\n        context.setState(new FilteredJobAnnouncementsState(context, jobAnnouncementSearchBean));\n        context.showMenu();\n    }\n\n    @FXML\n    private void handleGoBack(){\n\n        if (context != null) {\n            Printer.print(\"Going back to StudentHome...\");\n            context.setState(new HomeStudentState(context));\n            context.showMenu();\n        } else {\n            Printer.print(\"Context is NOT initialized in FilterJobAnnouncement!\");\n        }\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/controllergrafico/FilterJobAnnouncementStudentController.java b/src/main/java/org/example/togetjob/view/gui/controllergrafico/FilterJobAnnouncementStudentController.java
--- a/src/main/java/org/example/togetjob/view/gui/controllergrafico/FilterJobAnnouncementStudentController.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/controllergrafico/FilterJobAnnouncementStudentController.java	(date 1739643594393)
@@ -1,64 +1,93 @@
 package org.example.togetjob.view.gui.controllergrafico;
 
 import javafx.fxml.FXML;
+import javafx.scene.control.Alert;
 import javafx.scene.control.TextField;
 import org.example.togetjob.bean.JobAnnouncementSearchBean;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.GUIContext;
 import org.example.togetjob.view.gui.concretestate.FilteredJobAnnouncementsState;
 import org.example.togetjob.view.gui.concretestate.HomeStudentState;
 
 public class FilterJobAnnouncementStudentController {
 
     @FXML
-    private TextField jobTitleField ;
+    private TextField jobTitleField;
     @FXML
-    private TextField jobTypeField ;
+    private TextField jobTypeField;
     @FXML
-    private TextField roleField ;
+    private TextField roleField;
     @FXML
-    private TextField locationField ;
+    private TextField locationField;
     @FXML
-    private TextField workingHoursField ;
+    private TextField workingHoursField;
     @FXML
-    private TextField companyNameField ;
+    private TextField companyNameField;
     @FXML
-    private TextField salaryField ;
+    private TextField salaryField;
 
-    GUIContext context;
+    private static final String INVALID_INPUT = "Invalid Input";
+
+    private GUIContext context;
 
-    public void setContext(GUIContext context){
+    public void setContext(GUIContext context) {
         this.context = context;
     }
 
     @FXML
-    private void handleProceedButton(){
+    private void handleProceedButton() {
+        Printer.print("Button pressed!");
+
+        String workingHours = workingHoursField.getText().trim();
+        String salary = salaryField.getText().trim();
+        StringBuilder errorMessages = new StringBuilder();
 
-        String jobTitle = jobTitleField.getText();
-        String jobType = jobTypeField.getText();
-        String role = roleField.getText();
-        String location = locationField.getText();
-        String workingHours = workingHoursField.getText();
-        String companyName = companyNameField.getText();
-        String salary = salaryField.getText();
+        if (!workingHours.isEmpty() && !isValidNumber(workingHours)) {
+            errorMessages.append("Working hours must be a positive integer.\n");
+        }
+
+        if (!salary.isEmpty() && !isValidPositiveDouble(salary)) {
+            errorMessages.append("Salary must be a positive number.\n");
+        }
+
+        if (errorMessages.length() > 0) {
+            showErrorAlert(errorMessages.toString());
+            return;
+        }
 
-        JobAnnouncementSearchBean jobAnnouncementSearchBean = new JobAnnouncementSearchBean() ;
-
-        jobAnnouncementSearchBean.setJobTitle(jobTitle);
-        jobAnnouncementSearchBean.setJobType(jobType);
-        jobAnnouncementSearchBean.setCompanyName(companyName);
-        jobAnnouncementSearchBean.setLocation(location);
-        jobAnnouncementSearchBean.setWorkingHours(workingHours);
-        jobAnnouncementSearchBean.setSalary(salary);
-        jobAnnouncementSearchBean.setRole(role);
+        JobAnnouncementSearchBean jobAnnouncementSearchBean = new JobAnnouncementSearchBean();
+        jobAnnouncementSearchBean.setJobTitle(jobTitleField.getText().trim());
+        jobAnnouncementSearchBean.setJobType(jobTypeField.getText().trim());
+        jobAnnouncementSearchBean.setCompanyName(companyNameField.getText().trim());
+        jobAnnouncementSearchBean.setLocation(locationField.getText().trim());
+        jobAnnouncementSearchBean.setWorkingHours(workingHours.isEmpty() ? null : workingHours);
+        jobAnnouncementSearchBean.setSalary(salary.isEmpty() ? null : salary);
+        jobAnnouncementSearchBean.setRole(roleField.getText().trim());
 
         context.setState(new FilteredJobAnnouncementsState(context, jobAnnouncementSearchBean));
         context.showMenu();
     }
 
+    private boolean isValidNumber(String input) {
+        try {
+            int value = Integer.parseInt(input);
+            return value > 0;
+        } catch (NumberFormatException e) {
+            return false;
+        }
+    }
+
+    private boolean isValidPositiveDouble(String input) {
+        try {
+            double value = Double.parseDouble(input);
+            return value > 0;
+        } catch (NumberFormatException e) {
+            return false;
+        }
+    }
+
     @FXML
-    private void handleGoBack(){
-
+    private void handleGoBack() {
         if (context != null) {
             Printer.print("Going back to StudentHome...");
             context.setState(new HomeStudentState(context));
@@ -66,6 +95,13 @@
         } else {
             Printer.print("Context is NOT initialized in FilterJobAnnouncement!");
         }
+    }
 
+    private void showErrorAlert(String message) {
+        Alert alert = new Alert(Alert.AlertType.ERROR);
+        alert.setTitle(INVALID_INPUT);
+        alert.setHeaderText(null);
+        alert.setContentText(message);
+        alert.showAndWait();
     }
 }
Index: src/main/java/org/example/togetjob/view/gui/concretestate/HomeRecruiterState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.concretestate;\n\nimport javafx.application.Platform;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\nimport org.example.togetjob.bean.JobAnnouncementBean;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.Context;\nimport org.example.togetjob.view.State;\nimport org.example.togetjob.view.GUIContext;\nimport org.example.togetjob.view.gui.controllergrafico.HomeRecruiterController;\n\nimport java.io.IOException;\n\npublic class HomeRecruiterState implements State {\n\n    private final GUIContext context;\n\n    public HomeRecruiterState(GUIContext context) {\n        this.context = context;\n    }\n\n    @Override\n    public void showMenu() {\n        try {\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/org/example/togetjob/fxml/homerecruiter.fxml\"));\n            Scene scene = new Scene(fxmlLoader.load(), 600, 500);\n\n            HomeRecruiterController controller = fxmlLoader.getController();\n            controller.setContext(context);\n\n            Stage stage = context.getStage();\n            if (stage == null) {\n                stage = new Stage();\n                context.setStage(stage);\n            }\n\n            stage.setTitle(\"Home Recruiter\");\n            stage.setScene(scene);\n\n            stage.setOnCloseRequest(event -> {\n                Platform.exit();\n                System.exit(0);\n            });\n\n            stage.show();\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void goNext(Context context, String event) {\n        GUIContext guiContext = (GUIContext) context;\n\n        switch (event) {\n            case \"publishJobAnnouncement\":\n                guiContext.setState(new CreateJobAnnouncementState(guiContext));\n                break;\n            case \"logout\":\n                guiContext.setState(new HomeState(guiContext));\n                break;\n            case \"contactJobCandidate\":\n                JobAnnouncementBean jobAnnouncement = (JobAnnouncementBean) guiContext.get(\"jobAnnouncement\");\n                if (jobAnnouncement != null) {\n                    guiContext.setState(new FilterJobCandidateState(guiContext, jobAnnouncement));\n                } else {\n                    Printer.print(\"Error: No JobAnnouncement found in context!\");\n                }\n                break;\n            case \"viewNotifications\":\n                guiContext.setState(new SendAJobApplicationRecruiterState(guiContext));\n                break;\n            default:\n                Printer.print(\"Event not managed.\");\n        }\n\n        guiContext.showMenu();\n    }\n\n    public GUIContext getContext() {\n        return context;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/concretestate/HomeRecruiterState.java b/src/main/java/org/example/togetjob/view/gui/concretestate/HomeRecruiterState.java
--- a/src/main/java/org/example/togetjob/view/gui/concretestate/HomeRecruiterState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/concretestate/HomeRecruiterState.java	(date 1739642737187)
@@ -6,9 +6,9 @@
 import javafx.stage.Stage;
 import org.example.togetjob.bean.JobAnnouncementBean;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
+import org.example.togetjob.state.GUIContext;
 import org.example.togetjob.view.gui.controllergrafico.HomeRecruiterController;
 
 import java.io.IOException;
@@ -65,7 +65,7 @@
             case "contactJobCandidate":
                 JobAnnouncementBean jobAnnouncement = (JobAnnouncementBean) guiContext.get("jobAnnouncement");
                 if (jobAnnouncement != null) {
-                    guiContext.setState(new FilterJobCandidateState(guiContext, jobAnnouncement));
+                    guiContext.setState(new FilterJobCandidateState(guiContext));
                 } else {
                     Printer.print("Error: No JobAnnouncement found in context!");
                 }
Index: src/main/java/org/example/togetjob/view/gui/concretestate/CreateJobAnnouncementState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.concretestate;\n\nimport javafx.application.Platform;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.Context;\nimport org.example.togetjob.view.State;\nimport org.example.togetjob.view.GUIContext;\nimport org.example.togetjob.view.gui.controllergrafico.CreateJobAnnouncementController;\n\nimport java.io.IOException;\n\npublic class CreateJobAnnouncementState implements State {\n    private final GUIContext context;\n\n    public CreateJobAnnouncementState(GUIContext context) {\n        this.context = context;\n    }\n\n    @Override\n    public void showMenu() {\n        try {\n            Printer.print(\"Showing Create Job Announcement...\");\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/org/example/togetjob/fxml/recruitercreatejobannouncement.fxml\"));\n            Scene scene = new Scene(fxmlLoader.load(), 600, 500);\n\n            CreateJobAnnouncementController controller = fxmlLoader.getController();\n            controller.setContext(context);\n\n            Stage stage = getStage();\n            stage.setTitle(\"Create Job Announcement\");\n            stage.setScene(scene);\n            setCloseRequestListener(stage);\n            stage.show();\n        } catch (IOException e) {\n            e.printStackTrace();\n            Printer.print(\"Error loading FXML: \" + e.getMessage());\n        }\n    }\n\n    private Stage getStage() {\n        Stage stage = context.getStage();\n        if (stage == null) {\n            stage = new Stage();\n            context.setStage(stage);\n        }\n        return stage;\n    }\n\n    private void setCloseRequestListener(Stage stage) {\n        stage.setOnCloseRequest(e -> {\n            Platform.exit();\n            System.exit(0);\n        });\n    }\n\n    @Override\n    public void goNext(Context context, String event) {\n        GUIContext guiContext = (GUIContext) context;\n\n        switch (event) {\n            case \"jobPublished\":\n                Printer.print(\"Job published successfully, returning to home...\");\n                guiContext.setState(new HomeRecruiterState(guiContext));\n                break;\n\n            case \"homeRecruiter\":\n                guiContext.setState(new HomeRecruiterState(guiContext));\n                break;\n\n            default:\n                Printer.print(\"Event not managed.\");\n        }\n    }\n\n    public GUIContext getContext() {\n        return this.context;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/concretestate/CreateJobAnnouncementState.java b/src/main/java/org/example/togetjob/view/gui/concretestate/CreateJobAnnouncementState.java
--- a/src/main/java/org/example/togetjob/view/gui/concretestate/CreateJobAnnouncementState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/concretestate/CreateJobAnnouncementState.java	(date 1739642737273)
@@ -5,9 +5,9 @@
 import javafx.scene.Scene;
 import javafx.stage.Stage;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
+import org.example.togetjob.state.GUIContext;
 import org.example.togetjob.view.gui.controllergrafico.CreateJobAnnouncementController;
 
 import java.io.IOException;
Index: src/main/java/org/example/togetjob/view/gui/concretestate/HomeStudentState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.concretestate;\n\nimport javafx.application.Platform;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.Context;\nimport org.example.togetjob.view.State;\nimport org.example.togetjob.view.GUIContext;\nimport org.example.togetjob.view.gui.controllergrafico.HomeStudentController;\n\nimport java.io.IOException;\n\npublic class HomeStudentState implements State {\n\n    private final GUIContext context;\n\n    public HomeStudentState(GUIContext context) {\n        this.context = context;\n    }\n\n    @Override\n    public void showMenu() {\n        try {\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/org/example/togetjob/fxml/homestudent.fxml\"));\n            Scene scene = new Scene(fxmlLoader.load(), 600, 500);\n\n            HomeStudentController controller = fxmlLoader.getController();\n            controller.setContext(context);\n\n            Stage stage = context.getStage();\n\n            if (stage == null) {\n                stage = new Stage();\n                context.setStage(stage);\n            }\n\n            stage.setTitle(\"Home Student\");\n            stage.setScene(scene);\n\n            stage.setOnCloseRequest(event -> {\n                Platform.exit();  // JavaFX\n                System.exit(0);   // process\n            });\n\n            stage.show();\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void goNext(Context contextState, String event) {\n        // Cast GUIContext\n        GUIContext contextGUI = (GUIContext) contextState;\n\n        switch (event) {\n            case \"logout\":\n                contextGUI.setState(new HomeState(contextGUI));\n                contextGUI.showMenu();\n                break;\n\n            case \"filter_jobs\":\n\n                contextGUI.setState(new FilterJobAnnouncementStudentState(contextGUI));\n                contextGUI.showMenu();\n                break;\n\n            default:\n\n                Printer.print(\"Event not managed: \" + event);\n                break;\n        }\n    }\n\n    public GUIContext getContext() {\n        return context;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/concretestate/HomeStudentState.java b/src/main/java/org/example/togetjob/view/gui/concretestate/HomeStudentState.java
--- a/src/main/java/org/example/togetjob/view/gui/concretestate/HomeStudentState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/concretestate/HomeStudentState.java	(date 1739642737244)
@@ -5,9 +5,9 @@
 import javafx.scene.Scene;
 import javafx.stage.Stage;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
+import org.example.togetjob.state.GUIContext;
 import org.example.togetjob.view.gui.controllergrafico.HomeStudentController;
 
 import java.io.IOException;
Index: src/main/java/org/example/togetjob/controller/student/SendAJobApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.controller.student;\n\nimport org.example.togetjob.bean.JobAnnouncementBean;\nimport org.example.togetjob.bean.JobAnnouncementSearchBean;\nimport org.example.togetjob.bean.JobApplicationBean;\nimport org.example.togetjob.exceptions.*;\nimport org.example.togetjob.dao.abstractfactorydao.AbstractFactoryDaoSingleton;\nimport org.example.togetjob.dao.abstractobjects.JobAnnouncementDao;\nimport org.example.togetjob.dao.abstractobjects.JobApplicationDao;\nimport org.example.togetjob.dao.abstractobjects.RecruiterDao;\nimport org.example.togetjob.model.entity.*;\nimport org.example.togetjob.model.factory.JobApplicationFactory;\nimport org.example.togetjob.session.SessionManager;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class SendAJobApplication {\n\n    private final JobAnnouncementDao jobAnnouncementDao;\n    private final JobApplicationDao jobApplicationDao;\n    private final RecruiterDao recruiterDao;\n\n    public SendAJobApplication() {\n        this.jobAnnouncementDao = AbstractFactoryDaoSingleton.getFactoryDao().createJobAnnouncementDao();\n        this.jobApplicationDao = AbstractFactoryDaoSingleton.getFactoryDao().createJobApplicationDao();\n        this.recruiterDao = AbstractFactoryDaoSingleton.getFactoryDao().createRecruiterDao();\n    }\n\n    public List<JobAnnouncementBean> showFilteredJobAnnouncements(JobAnnouncementSearchBean jobAnnouncementSearchBean) {\n        //all job announcements\n        List<JobAnnouncement> allAnnouncements = jobAnnouncementDao.getAllJobAnnouncements();\n\n        List<JobAnnouncement> filteredAnnouncements = allAnnouncements.stream()\n                .filter(announcement -> filterByTitle(announcement, jobAnnouncementSearchBean.getJobTitle()))\n                .filter(announcement -> filterByJobType(announcement, jobAnnouncementSearchBean.getJobType()))\n                .filter(announcement -> filterByRole(announcement, jobAnnouncementSearchBean.getRole()))\n                .filter(announcement -> filterByLocation(announcement, jobAnnouncementSearchBean.getLocation()))\n                .filter(announcement -> filterByWorkingHours(announcement, jobAnnouncementSearchBean.getWorkingHours()))\n                .filter(announcement -> filterByCompanyName(announcement, jobAnnouncementSearchBean.getCompanyName()))\n                .filter(announcement -> filterBySalary(announcement, jobAnnouncementSearchBean.getSalary()))\n                .toList();\n\n        return filteredAnnouncements.stream()\n                .map(this::convertToJobAnnouncementBean)\n                .toList();\n\n    }\n\n    private JobAnnouncementBean convertToJobAnnouncementBean(JobAnnouncement jobAnnouncement) {\n\n        JobAnnouncementBean jobAnnouncementBean = new JobAnnouncementBean();\n\n        jobAnnouncementBean.setJobTitle(jobAnnouncement.obtainJobTitle() != null ? jobAnnouncement.obtainJobTitle() : \"Unknown Title\");\n        jobAnnouncementBean.setJobType(jobAnnouncement.obtainJobType() != null ? jobAnnouncement.obtainJobType() : \"Unknown Type\");\n        jobAnnouncementBean.setRole(jobAnnouncement.obtainJobRole() != null ? jobAnnouncement.obtainJobRole() : \"Unknown Role\");\n        jobAnnouncementBean.setLocation(jobAnnouncement.obtainLocation() != null ? jobAnnouncement.obtainLocation() : \"Unknown Location\");\n        jobAnnouncementBean.setCompanyName(jobAnnouncement.obtainCompanyName() != null ? jobAnnouncement.obtainCompanyName() : \"Unknown Company\");\n        jobAnnouncementBean.setDescription(jobAnnouncement.obtainDescription() != null ? jobAnnouncement.obtainDescription() : \"No Description\");\n\n\n        //map\n        jobAnnouncementBean.setActive(jobAnnouncement.isJobActive() != null && jobAnnouncement.isJobActive());\n        jobAnnouncementBean.setRecruiterUsername(jobAnnouncement.getRecruiter().obtainUsername());\n        jobAnnouncementBean.setWorkingHours(jobAnnouncement.obtainWorkingHours() != 0 ? String.valueOf(jobAnnouncement.obtainWorkingHours()) : \"Not Defined\");\n        jobAnnouncementBean.setSalary(jobAnnouncement.obtainSalary() != 0.0 ? String.valueOf(jobAnnouncement.obtainSalary()) : \"Not Defined\");\n\n        return jobAnnouncementBean;\n\n    }\n\n    private List<JobApplicationBean> convertToJobApplicationBeans(List<JobApplication> jobApplications) {\n        List<JobApplicationBean> jobApplicationBeans = new ArrayList<>();\n\n        for (JobApplication jobApplication : jobApplications) {\n            JobApplicationBean jobApplicationBean = new JobApplicationBean();\n\n            jobApplicationBean.setJobTitle(jobApplication.getJobAnnouncement().obtainJobTitle());\n            jobApplicationBean.setStudentUsername(jobApplication.getStudent().obtainUsername());\n            jobApplicationBean.setCoverLetter(jobApplication.obtainCoverLetter());\n            jobApplicationBean.setRecruiterUsername(jobApplication.getJobAnnouncement().getRecruiter().obtainUsername());\n            jobApplicationBean.setStatus(jobApplication.obtainStatus());\n            jobApplicationBeans.add(jobApplicationBean);\n        }\n\n        return jobApplicationBeans;\n    }\n\n    public JobApplicationBean showJobApplicationForm(JobAnnouncementBean jobAnnouncementBean) {\n\n        JobApplicationBean form = new JobApplicationBean();\n\n        form.setJobTitle(jobAnnouncementBean.getJobTitle());\n        form.setRecruiterUsername(jobAnnouncementBean.getRecruiterUsername());\n        form.setStatus(Status.PENDING);\n        form.setStudentUsername(SessionManager.getInstance().getStudentFromSession().obtainUsername());\n\n        form.setCoverLetter(\"\");\n        return form;\n    }\n\n    public boolean sendAJobApplication(JobApplicationBean jobApplicationBean) throws RecruiterNotFoundException , JobAnnouncementNotFoundException , JobAnnouncementNotActiveException , JobApplicationAlreadySentException {\n\n\n        // Student who wants to send a job application to a job announcement\n        Student student = SessionManager.getInstance().getStudentFromSession();\n\n        //Recruiter who publishes the job announcement\n        Recruiter recruiter = recruiterDao.getRecruiter(jobApplicationBean.getRecruiterUsername())\n                .orElseThrow(() -> new RecruiterNotFoundException(\"Error: Recruiter not found.\"));\n\n        // Job Announcement\n        JobAnnouncement jobAnnouncement = jobAnnouncementDao.getJobAnnouncement(jobApplicationBean.getJobTitle(), recruiter)\n                .orElseThrow(() -> new JobAnnouncementNotFoundException(\"Error: JobAnnouncement not found.\")); // Job Announcement Found\n\n        // Check if the job announcement is still active\n        if (jobAnnouncement.isJobActive() == null || !jobAnnouncement.isJobActive()) {\n            throw new JobAnnouncementNotActiveException(\"This job announcement is no longer active.\");\n        }\n\n        // Check if the student has already applied for this job\n        if (jobApplicationDao.getJobApplication(student, jobAnnouncement).isPresent()) {\n            throw new JobApplicationAlreadySentException(\"You have already applied for this job.\");\n        }\n\n        JobApplication jobApplication = JobApplicationFactory.createJobApplication(student, jobApplicationBean.getCoverLetter(), jobAnnouncement);\n        jobApplicationDao.saveJobApplication(jobApplication); // Persistence\n\n        return true;\n    }\n\n    public List<JobApplicationBean> getAllJobApplication(){\n\n        Student student = SessionManager.getInstance().getStudentFromSession();\n\n        List<JobApplication> jobApplications = jobApplicationDao.getAllJobApplications(student);\n        return convertToJobApplicationBeans(jobApplications);\n\n    }\n\n    public boolean modifyJobApplication(JobApplicationBean jobApplicationBean) {\n\n        Status status = getStatusJobApplication(jobApplicationBean);\n\n        if (status.equals(Status.PENDING)) {\n            Optional<JobApplication> jobApplicationOPT = getJobApplication(jobApplicationBean);\n            //Job application existing\n\n            if (jobApplicationOPT.isEmpty()) {\n                return false;\n            }\n\n            JobApplication jobApplication = jobApplicationOPT.get();\n            jobApplication.setCoverLetter(jobApplicationBean.getCoverLetter());  // Modify\n            jobApplicationDao.saveJobApplication(jobApplication);\n            return true;\n        }\n\n        return false;\n    }\n\n\n    public boolean deleteJobApplication(JobApplicationBean jobApplicationBean) {\n\n        Optional<JobApplication> jobApplicationOPT = getJobApplication(jobApplicationBean);\n\n        if (jobApplicationOPT.isEmpty()) {\n            return false;\n        }\n\n        JobApplication jobApplication = jobApplicationOPT.get();\n\n        if (!jobApplication.obtainStatus().equals(Status.PENDING)) {\n            return false; //job application already managed\n        }\n\n        jobApplicationDao.deleteJobApplication(jobApplication);\n        return true;\n\n    }\n\n    public List<JobApplicationBean> getJobApplicationsForRecruiter(JobAnnouncementBean jobAnnouncementBean){\n\n        Recruiter recruiter = SessionManager.getInstance().getRecruiterFromSession();\n\n        Optional<JobAnnouncement> jobAnnouncementOpt = jobAnnouncementDao.getJobAnnouncement(jobAnnouncementBean.getJobTitle(), recruiter);\n        if (jobAnnouncementOpt.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        JobAnnouncement jobAnnouncement = jobAnnouncementOpt.get();\n\n        // all the job applications sent to the job announcement\n        List<JobApplication> jobApplications = jobApplicationDao.getJobApplicationsByJobAnnouncement(jobAnnouncement);\n        return convertToJobApplicationBeans(jobApplications);\n\n    }\n\n\n    public boolean updateJobApplicationStatus(JobApplicationBean jobApplicationBean, Status status) throws JobApplicationNotFoundException {\n\n\n        JobAnnouncement jobAnnouncement = getJobAnnouncementFromBean(jobApplicationBean);\n\n        List<JobApplication> jobApplications = jobApplicationDao.getJobApplicationsByJobAnnouncement(jobAnnouncement);\n        Optional<JobApplication> jobApplicationOpt = jobApplications.stream()\n                .filter(jobApplication -> jobApplication.getStudent().obtainUsername().equals(jobApplicationBean.getStudentUsername()))\n                .findFirst();\n        if (jobApplicationOpt.isEmpty()) {\n            throw new JobApplicationNotFoundException(\"Error: Job Application not found for the specified student.\");\n        }\n        JobApplication jobApplication = jobApplicationOpt.get();\n        if (!jobApplication.obtainStatus().equals(Status.PENDING)) {\n            return false; // Already Managed\n        }\n        jobApplication.setStatus(status); // (ACCEPTED or REJECTED)\n        jobApplicationDao.updateJobApplication(jobApplication);\n\n        return true;\n\n    }\n\n\n    private JobAnnouncement getJobAnnouncementFromBean(JobApplicationBean jobApplicationBean) {\n        //recruiter from session\n        Recruiter recruiter = SessionManager.getInstance().getRecruiterFromSession();\n\n        // job announcement\n        Optional<JobAnnouncement> jobAnnouncementOpt = jobAnnouncementDao.getJobAnnouncement(jobApplicationBean.getJobTitle(), recruiter);\n\n        if (jobAnnouncementOpt.isEmpty()) {\n            throw new IllegalArgumentException(\"Error: No job announcement found for the recruiter with the specified title.\");\n        }\n\n        return jobAnnouncementOpt.get();\n    }\n\n    private Optional<JobApplication> getJobApplication(JobApplicationBean jobApplicationBean) {\n        Student student = SessionManager.getInstance().getStudentFromSession();\n        Recruiter recruiter = recruiterDao.getRecruiter(jobApplicationBean.getRecruiterUsername())\n                .orElseThrow(() -> new IllegalArgumentException(\"Error: Recruiter not found.\"));\n        JobAnnouncement jobAnnouncement = jobAnnouncementDao.getJobAnnouncement(jobApplicationBean.getJobTitle(), recruiter)\n                .orElseThrow(() -> new IllegalArgumentException(\"Error: Job Announcement not found.\"));\n        return jobApplicationDao.getJobApplication(student, jobAnnouncement);\n    }\n\n\n    private Status getStatusJobApplication(JobApplicationBean jobApplicationBean) {\n\n        Optional<JobApplication> jobApplicationOpt = getJobApplication(jobApplicationBean);\n        if (jobApplicationOpt.isEmpty()) {\n\n            throw new IllegalArgumentException(\"Error: job Application not Found.\");\n\n        }\n\n        JobApplication jobApplication = jobApplicationOpt.get();\n        return jobApplication.obtainStatus();\n\n    }\n\n    //method to filter\n\n    private boolean filterByTitle(JobAnnouncement announcement, String jobTitle) {\n        return jobTitle == null || jobTitle.isEmpty() || announcement.obtainJobTitle().toLowerCase().contains(jobTitle.toLowerCase());\n    }\n\n    private boolean filterByLocation(JobAnnouncement announcement, String location) {\n        return location == null || location.isEmpty() || announcement.obtainLocation().toLowerCase().contains(location.toLowerCase());\n    }\n\n    private boolean filterByRole(JobAnnouncement announcement, String role) {\n        return role == null || role.isEmpty() || announcement.obtainJobRole().toLowerCase().contains(role.toLowerCase());\n    }\n\n    private boolean filterByJobType(JobAnnouncement announcement, String jobType) {\n        return jobType == null || jobType.isEmpty() || announcement.obtainJobType().toLowerCase().contains(jobType.toLowerCase());\n    }\n\n    private boolean filterBySalary(JobAnnouncement announcement, String salary) {\n        if (salary == null || salary.isEmpty()) {\n            return true; //no filter\n        }\n        try {\n            double salaryFilter = Double.parseDouble(salary);\n            return announcement.obtainSalary() >= salaryFilter;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n\n    private boolean filterByWorkingHours(JobAnnouncement announcement, String workingHours) {\n        if (workingHours == null || workingHours.isEmpty()) {\n            return true; //no filter\n        }\n        try {\n            int workingHoursFilter = Integer.parseInt(workingHours);\n            return announcement.obtainWorkingHours() >= workingHoursFilter;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n\n    private boolean filterByCompanyName(JobAnnouncement announcement, String companyName) {\n        return companyName == null || companyName.isEmpty() || announcement.obtainCompanyName().toLowerCase().contains(companyName.toLowerCase());\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/controller/student/SendAJobApplication.java b/src/main/java/org/example/togetjob/controller/student/SendAJobApplication.java
--- a/src/main/java/org/example/togetjob/controller/student/SendAJobApplication.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/controller/student/SendAJobApplication.java	(date 1739639778933)
@@ -48,63 +48,24 @@
 
     }
 
-    private JobAnnouncementBean convertToJobAnnouncementBean(JobAnnouncement jobAnnouncement) {
-
-        JobAnnouncementBean jobAnnouncementBean = new JobAnnouncementBean();
-
-        jobAnnouncementBean.setJobTitle(jobAnnouncement.obtainJobTitle() != null ? jobAnnouncement.obtainJobTitle() : "Unknown Title");
-        jobAnnouncementBean.setJobType(jobAnnouncement.obtainJobType() != null ? jobAnnouncement.obtainJobType() : "Unknown Type");
-        jobAnnouncementBean.setRole(jobAnnouncement.obtainJobRole() != null ? jobAnnouncement.obtainJobRole() : "Unknown Role");
-        jobAnnouncementBean.setLocation(jobAnnouncement.obtainLocation() != null ? jobAnnouncement.obtainLocation() : "Unknown Location");
-        jobAnnouncementBean.setCompanyName(jobAnnouncement.obtainCompanyName() != null ? jobAnnouncement.obtainCompanyName() : "Unknown Company");
-        jobAnnouncementBean.setDescription(jobAnnouncement.obtainDescription() != null ? jobAnnouncement.obtainDescription() : "No Description");
-
-
-        //map
-        jobAnnouncementBean.setActive(jobAnnouncement.isJobActive() != null && jobAnnouncement.isJobActive());
-        jobAnnouncementBean.setRecruiterUsername(jobAnnouncement.getRecruiter().obtainUsername());
-        jobAnnouncementBean.setWorkingHours(jobAnnouncement.obtainWorkingHours() != 0 ? String.valueOf(jobAnnouncement.obtainWorkingHours()) : "Not Defined");
-        jobAnnouncementBean.setSalary(jobAnnouncement.obtainSalary() != 0.0 ? String.valueOf(jobAnnouncement.obtainSalary()) : "Not Defined");
-
-        return jobAnnouncementBean;
-
-    }
-
-    private List<JobApplicationBean> convertToJobApplicationBeans(List<JobApplication> jobApplications) {
-        List<JobApplicationBean> jobApplicationBeans = new ArrayList<>();
-
-        for (JobApplication jobApplication : jobApplications) {
-            JobApplicationBean jobApplicationBean = new JobApplicationBean();
-
-            jobApplicationBean.setJobTitle(jobApplication.getJobAnnouncement().obtainJobTitle());
-            jobApplicationBean.setStudentUsername(jobApplication.getStudent().obtainUsername());
-            jobApplicationBean.setCoverLetter(jobApplication.obtainCoverLetter());
-            jobApplicationBean.setRecruiterUsername(jobApplication.getJobAnnouncement().getRecruiter().obtainUsername());
-            jobApplicationBean.setStatus(jobApplication.obtainStatus());
-            jobApplicationBeans.add(jobApplicationBean);
-        }
-
-        return jobApplicationBeans;
-    }
-
     public JobApplicationBean showJobApplicationForm(JobAnnouncementBean jobAnnouncementBean) {
 
         JobApplicationBean form = new JobApplicationBean();
-
         form.setJobTitle(jobAnnouncementBean.getJobTitle());
         form.setRecruiterUsername(jobAnnouncementBean.getRecruiterUsername());
         form.setStatus(Status.PENDING);
         form.setStudentUsername(SessionManager.getInstance().getStudentFromSession().obtainUsername());
-
         form.setCoverLetter("");
         return form;
     }
 
-    public boolean sendAJobApplication(JobApplicationBean jobApplicationBean) throws RecruiterNotFoundException , JobAnnouncementNotFoundException , JobAnnouncementNotActiveException , JobApplicationAlreadySentException {
-
+    public boolean sendAJobApplication(JobApplicationBean jobApplicationBean) throws RecruiterNotFoundException , JobAnnouncementNotFoundException , JobAnnouncementNotActiveException , JobApplicationAlreadySentException, UnauthorizedAccessException {
 
         // Student who wants to send a job application to a job announcement
         Student student = SessionManager.getInstance().getStudentFromSession();
+        if (student == null) {
+            throw new UnauthorizedAccessException("You have to be logged to apply for a job announcement.");
+        }
 
         //Recruiter who publishes the job announcement
         Recruiter recruiter = recruiterDao.getRecruiter(jobApplicationBean.getRecruiterUsername())
@@ -124,8 +85,12 @@
             throw new JobApplicationAlreadySentException("You have already applied for this job.");
         }
 
-        JobApplication jobApplication = JobApplicationFactory.createJobApplication(student, jobApplicationBean.getCoverLetter(), jobAnnouncement);
-        jobApplicationDao.saveJobApplication(jobApplication); // Persistence
+        try {
+            JobApplication jobApplication = JobApplicationFactory.createJobApplication(student, jobApplicationBean.getCoverLetter(), jobAnnouncement);
+            jobApplicationDao.saveJobApplication(jobApplication);
+        } catch (Exception e) {
+            throw new DatabaseException("Error saving job applications: " + e.getMessage(), e);
+        }
 
         return true;
     }
@@ -133,7 +98,6 @@
     public List<JobApplicationBean> getAllJobApplication(){
 
         Student student = SessionManager.getInstance().getStudentFromSession();
-
         List<JobApplication> jobApplications = jobApplicationDao.getAllJobApplications(student);
         return convertToJobApplicationBeans(jobApplications);
 
@@ -198,8 +162,8 @@
     }
 
 
-    public boolean updateJobApplicationStatus(JobApplicationBean jobApplicationBean, Status status) throws JobApplicationNotFoundException {
-
+    public boolean updateJobApplicationStatus(JobApplicationBean jobApplicationBean, Status status) throws JobApplicationNotFoundException,
+            JobApplicationAlreadyProcessedException, DatabaseException {
 
         JobAnnouncement jobAnnouncement = getJobAnnouncementFromBean(jobApplicationBean);
 
@@ -207,32 +171,37 @@
         Optional<JobApplication> jobApplicationOpt = jobApplications.stream()
                 .filter(jobApplication -> jobApplication.getStudent().obtainUsername().equals(jobApplicationBean.getStudentUsername()))
                 .findFirst();
+
         if (jobApplicationOpt.isEmpty()) {
-            throw new JobApplicationNotFoundException("Error: Job Application not found for the specified student.");
+            throw new JobApplicationNotFoundException("Error: Job Application not found.");
         }
+
         JobApplication jobApplication = jobApplicationOpt.get();
+
+
         if (!jobApplication.obtainStatus().equals(Status.PENDING)) {
-            return false; // Already Managed
+            throw new JobApplicationAlreadyProcessedException("Job application already managed.");
         }
-        jobApplication.setStatus(status); // (ACCEPTED or REJECTED)
-        jobApplicationDao.updateJobApplication(jobApplication);
+
+        jobApplication.setStatus(status);
+        try {
+            jobApplicationDao.updateJobApplication(jobApplication);
+        } catch (Exception e) {
+            throw new DatabaseException("Error during updating job application: " + e.getMessage(), e);
+        }
 
         return true;
-
     }
 
 
     private JobAnnouncement getJobAnnouncementFromBean(JobApplicationBean jobApplicationBean) {
         //recruiter from session
         Recruiter recruiter = SessionManager.getInstance().getRecruiterFromSession();
-
         // job announcement
         Optional<JobAnnouncement> jobAnnouncementOpt = jobAnnouncementDao.getJobAnnouncement(jobApplicationBean.getJobTitle(), recruiter);
-
         if (jobAnnouncementOpt.isEmpty()) {
             throw new IllegalArgumentException("Error: No job announcement found for the recruiter with the specified title.");
         }
-
         return jobAnnouncementOpt.get();
     }
 
@@ -250,18 +219,15 @@
 
         Optional<JobApplication> jobApplicationOpt = getJobApplication(jobApplicationBean);
         if (jobApplicationOpt.isEmpty()) {
-
             throw new IllegalArgumentException("Error: job Application not Found.");
-
         }
-
         JobApplication jobApplication = jobApplicationOpt.get();
         return jobApplication.obtainStatus();
 
     }
 
+
     //method to filter
-
     private boolean filterByTitle(JobAnnouncement announcement, String jobTitle) {
         return jobTitle == null || jobTitle.isEmpty() || announcement.obtainJobTitle().toLowerCase().contains(jobTitle.toLowerCase());
     }
@@ -306,4 +272,45 @@
         return companyName == null || companyName.isEmpty() || announcement.obtainCompanyName().toLowerCase().contains(companyName.toLowerCase());
     }
 
+
+    private JobAnnouncementBean convertToJobAnnouncementBean(JobAnnouncement jobAnnouncement) {
+
+        JobAnnouncementBean jobAnnouncementBean = new JobAnnouncementBean();
+
+        jobAnnouncementBean.setJobTitle(jobAnnouncement.obtainJobTitle() != null ? jobAnnouncement.obtainJobTitle() : "Unknown Title");
+        jobAnnouncementBean.setJobType(jobAnnouncement.obtainJobType() != null ? jobAnnouncement.obtainJobType() : "Unknown Type");
+        jobAnnouncementBean.setRole(jobAnnouncement.obtainJobRole() != null ? jobAnnouncement.obtainJobRole() : "Unknown Role");
+        jobAnnouncementBean.setLocation(jobAnnouncement.obtainLocation() != null ? jobAnnouncement.obtainLocation() : "Unknown Location");
+        jobAnnouncementBean.setCompanyName(jobAnnouncement.obtainCompanyName() != null ? jobAnnouncement.obtainCompanyName() : "Unknown Company");
+        jobAnnouncementBean.setDescription(jobAnnouncement.obtainDescription() != null ? jobAnnouncement.obtainDescription() : "No Description");
+
+
+        //map
+        jobAnnouncementBean.setActive(jobAnnouncement.isJobActive() != null && jobAnnouncement.isJobActive());
+        jobAnnouncementBean.setRecruiterUsername(jobAnnouncement.getRecruiter().obtainUsername());
+        jobAnnouncementBean.setWorkingHours(jobAnnouncement.obtainWorkingHours() != 0 ? String.valueOf(jobAnnouncement.obtainWorkingHours()) : "Not Defined");
+        jobAnnouncementBean.setSalary(jobAnnouncement.obtainSalary() != 0.0 ? String.valueOf(jobAnnouncement.obtainSalary()) : "Not Defined");
+
+        return jobAnnouncementBean;
+
+    }
+
+
+    private List<JobApplicationBean> convertToJobApplicationBeans(List<JobApplication> jobApplications) {
+        List<JobApplicationBean> jobApplicationBeans = new ArrayList<>();
+
+        for (JobApplication jobApplication : jobApplications) {
+            JobApplicationBean jobApplicationBean = new JobApplicationBean();
+
+            jobApplicationBean.setJobTitle(jobApplication.getJobAnnouncement().obtainJobTitle());
+            jobApplicationBean.setStudentUsername(jobApplication.getStudent().obtainUsername());
+            jobApplicationBean.setCoverLetter(jobApplication.obtainCoverLetter());
+            jobApplicationBean.setRecruiterUsername(jobApplication.getJobAnnouncement().getRecruiter().obtainUsername());
+            jobApplicationBean.setStatus(jobApplication.obtainStatus());
+            jobApplicationBeans.add(jobApplicationBean);
+        }
+
+        return jobApplicationBeans;
+    }
+
 }
Index: src/main/java/org/example/togetjob/view/GUIContext.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/GUIContext.java b/src/main/java/org/example/togetjob/state/GUIContext.java
rename from src/main/java/org/example/togetjob/view/GUIContext.java
rename to src/main/java/org/example/togetjob/state/GUIContext.java
--- a/src/main/java/org/example/togetjob/view/GUIContext.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/state/GUIContext.java	(date 1739643814012)
@@ -1,4 +1,4 @@
-package org.example.togetjob.view;
+package org.example.togetjob.state;
 
 import javafx.application.Application;
 import javafx.stage.Stage;
@@ -12,11 +12,7 @@
     private State currentState;
     private Stage currentStage;
 
-    private final Map<String, Object> contextData = new HashMap<>();
-
-    public GUIContext() {
-        //**//
-    }
+    private static final Map<String, Object> contextData = new HashMap<>();
 
     @Override
     public void start(Stage primaryStage) {
Index: src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeRecruiterController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.controllergrafico;\n\nimport javafx.fxml.FXML;\nimport javafx.geometry.Insets;\nimport javafx.geometry.Pos;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.ListCell;\nimport javafx.scene.control.ListView;\nimport javafx.scene.control.TitledPane;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.text.Text;\nimport org.example.togetjob.bean.JobAnnouncementBean;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.boundary.LoginBoundary;\nimport org.example.togetjob.view.boundary.PublishAJobAnnouncementRecruiterBoundary;\nimport org.example.togetjob.view.GUIContext;\n\nimport java.util.List;\n\npublic class HomeRecruiterController {\n\n    @FXML\n    private TitledPane jobAnnouncementField;\n    @FXML\n    private ListView<JobAnnouncementBean> jobAnnouncementBeanListView;\n\n    private GUIContext context;\n    private final LoginBoundary loginBoundary = new LoginBoundary();\n    private final PublishAJobAnnouncementRecruiterBoundary publishBoundary = new PublishAJobAnnouncementRecruiterBoundary();\n\n    public void setContext(GUIContext context) {\n        this.context = context;\n    }\n\n    @FXML\n    private void initialize() {\n        List<JobAnnouncementBean> jobAnnouncements = fetchJobAnnouncements();\n        populateJobAnnouncements(jobAnnouncements);\n    }\n\n    @FXML\n    private void handlePublishJobAnnouncementButton() {\n        if (context != null) {\n            Printer.print(\"Going to CreateJobAnnouncement...\");\n            context.goNext(\"publishJobAnnouncement\");\n        } else {\n            Printer.print(\"Context is NOT initialized in HomeRecruiter!\");\n        }\n    }\n\n    @FXML\n    private void handleLogout() {\n        if (context != null) {\n            loginBoundary.logout();\n            context.goNext(\"logout\");\n        } else {\n            Printer.print(\"Context is not initialized!\");\n        }\n    }\n\n    private void populateJobAnnouncements(List<JobAnnouncementBean> jobAnnouncements) {\n        if (jobAnnouncements != null && !jobAnnouncements.isEmpty()) {\n            jobAnnouncementBeanListView.getItems().clear();\n            jobAnnouncementBeanListView.getItems().addAll(jobAnnouncements);\n            jobAnnouncementBeanListView.setCellFactory(param -> createJobAnnouncementCell());\n        } else {\n            Printer.print(\"No job announcements to display.\");\n        }\n    }\n\n    private ListCell<JobAnnouncementBean> createJobAnnouncementCell() {\n        return new ListCell<JobAnnouncementBean>() {\n            @Override\n            protected void updateItem(JobAnnouncementBean jobAnnouncement, boolean empty) {\n                super.updateItem(jobAnnouncement, empty);\n\n                if (empty || jobAnnouncement == null) {\n                    setText(null);\n                    setGraphic(null);\n                } else {\n                    HBox hbox = new HBox(10);\n                    hbox.setAlignment(Pos.CENTER_LEFT);\n                    hbox.setPadding(new Insets(5, 10, 5, 10));\n\n                    Text jobTitleText = new Text(jobAnnouncement.getJobTitle());\n                    jobTitleText.setStyle(\"-fx-font-weight: bold; -fx-font-size: 14px; -fx-fill: #2980b9;\");\n\n                    Text statusText = new Text(jobAnnouncement.isActive() ? \"ACTIVE\" : \"INACTIVE\");\n                    statusText.setStyle(getStatusColorStyle(jobAnnouncement.isActive()));\n\n                    hbox.getChildren().addAll(jobTitleText, statusText);\n                    hbox.getChildren().add(createButtonsForJobAnnouncement(jobAnnouncement));\n\n                    setGraphic(hbox);\n                }\n            }\n        };\n    }\n\n    private String getStatusColorStyle(boolean isActive) {\n        return isActive ? \"-fx-fill: #28A745;\" : \"-fx-fill: #DC3545;\";\n    }\n\n    private HBox createButtonsForJobAnnouncement(JobAnnouncementBean jobAnnouncement) {\n        HBox hbox = new HBox(10);\n\n        Button manageButton = new Button(\"Manage\");\n        manageButton.setOnAction(event -> handleManageJobAnnouncement(jobAnnouncement));\n\n        Button contactButton = new Button(\"Contact a Job Candidate\");\n        contactButton.setOnAction(event -> handleContactJobCandidate(jobAnnouncement));\n\n        String buttonStyle = \"-fx-background-color: #b3d9ff; -fx-text-fill: #2980b9; \" +\n                \"-fx-border-radius: 5; -fx-border-color: #2980b9; -fx-border-width: 2; \" +\n                \"-fx-cursor: hand; -fx-font-weight: bold; -fx-background-radius: 5;\" +\n                \"-fx-font-size: 11px;\";\n\n        manageButton.setStyle(buttonStyle);\n        contactButton.setStyle(buttonStyle);\n\n        hbox.getChildren().addAll(manageButton, contactButton);\n        return hbox;\n    }\n\n    private void handleManageJobAnnouncement(JobAnnouncementBean jobAnnouncement) {\n        Printer.print(\"Managing Job Announcement: \" + jobAnnouncement.getJobTitle());\n    }\n\n    private void handleContactJobCandidate(JobAnnouncementBean jobAnnouncement) {\n        Printer.print(\"Contacting Job Candidate for: \" + jobAnnouncement.getJobTitle());\n\n        context.set(\"jobAnnouncement\", jobAnnouncement);\n\n        context.goNext(\"contactJobCandidate\");\n    }\n\n    private List<JobAnnouncementBean> fetchJobAnnouncements() {\n        return publishBoundary.getJobAnnouncements();\n    }\n\n    public void handleViewNotifications() {\n        context.goNext(\"viewNotifications\");\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeRecruiterController.java b/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeRecruiterController.java
--- a/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeRecruiterController.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeRecruiterController.java	(date 1739642737198)
@@ -6,21 +6,18 @@
 import javafx.scene.control.Button;
 import javafx.scene.control.ListCell;
 import javafx.scene.control.ListView;
-import javafx.scene.control.TitledPane;
 import javafx.scene.layout.HBox;
 import javafx.scene.text.Text;
 import org.example.togetjob.bean.JobAnnouncementBean;
 import org.example.togetjob.printer.Printer;
 import org.example.togetjob.view.boundary.LoginBoundary;
 import org.example.togetjob.view.boundary.PublishAJobAnnouncementRecruiterBoundary;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.GUIContext;
 
 import java.util.List;
 
 public class HomeRecruiterController {
 
-    @FXML
-    private TitledPane jobAnnouncementField;
     @FXML
     private ListView<JobAnnouncementBean> jobAnnouncementBeanListView;
 
@@ -127,13 +124,22 @@
     }
 
     private void handleContactJobCandidate(JobAnnouncementBean jobAnnouncement) {
+        if (jobAnnouncement == null) {
+            Printer.print("ERROR: jobAnnouncement is null!");
+            return;
+        }
+
+        if (context == null) {
+            Printer.print("ERROR: context is null in HomeRecruiterController!");
+            return;
+        }
+
         Printer.print("Contacting Job Candidate for: " + jobAnnouncement.getJobTitle());
-
         context.set("jobAnnouncement", jobAnnouncement);
-
         context.goNext("contactJobCandidate");
     }
 
+
     private List<JobAnnouncementBean> fetchJobAnnouncements() {
         return publishBoundary.getJobAnnouncements();
     }
Index: src/main/java/org/example/togetjob/view/gui/controllergrafico/CreateJobAnnouncementController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.controllergrafico;\n\nimport javafx.fxml.FXML;\nimport javafx.scene.control.TextField;\nimport org.example.togetjob.bean.JobAnnouncementBean;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.boundary.PublishAJobAnnouncementRecruiterBoundary;\nimport org.example.togetjob.view.GUIContext;\n\npublic class CreateJobAnnouncementController {\n\n    @FXML\n    private TextField jobTitleField;\n    @FXML\n    private TextField jobTypeField;\n    @FXML\n    private TextField roleField;\n    @FXML\n    private TextField locationField;\n    @FXML\n    private TextField workingHoursField;\n    @FXML\n    private TextField companyNameField;\n    @FXML\n    private TextField salaryField;\n    @FXML\n    private TextField descriptionField;\n\n    private final PublishAJobAnnouncementRecruiterBoundary boundary = new PublishAJobAnnouncementRecruiterBoundary();\n    private GUIContext context;\n\n    public void setContext(GUIContext context) {\n        this.context = context;\n    }\n\n    @FXML\n    private void handleProceedButton() {\n        if (context == null) {\n            Printer.print(\"ERROR: context is NULL in CreateJobAnnouncementController!\");\n            return;\n        }\n\n        String jobTitle = jobTitleField.getText();\n        String jobType = jobTypeField.getText();\n        String role = roleField.getText();\n        String location = locationField.getText();\n        String workingHours = workingHoursField.getText();\n        String companyName = companyNameField.getText();\n        String salary = salaryField.getText();\n        String description = descriptionField.getText();\n\n        if (jobTitle.isEmpty() || jobType.isEmpty() || role.isEmpty() || location.isEmpty() || workingHours.isEmpty() || companyName.isEmpty() || salary.isEmpty() || description.isEmpty()) {\n            Printer.print(\"No field can be empty!\");\n            return;\n        }\n\n        JobAnnouncementBean jobAnnouncementBean = new JobAnnouncementBean();\n        jobAnnouncementBean.setActive(true);\n        jobAnnouncementBean.setJobTitle(jobTitle);\n        jobAnnouncementBean.setJobType(jobType);\n        jobAnnouncementBean.setCompanyName(companyName);\n        jobAnnouncementBean.setDescription(description);\n        jobAnnouncementBean.setLocation(location);\n        jobAnnouncementBean.setWorkingHours(workingHours);\n        jobAnnouncementBean.setSalary(salary);\n        jobAnnouncementBean.setRole(role);\n\n        boolean creation = boundary.publishJobAnnouncement(jobAnnouncementBean);\n\n        if (creation) {\n            Printer.print(\"Job announcement published!\");\n            context.set(\"jobAnnouncement\", jobAnnouncementBean);\n            context.goNext(\"jobPublished\");\n        } else {\n            Printer.print(\"ERROR: Job announcement NOT published!\");\n        }\n    }\n\n    @FXML\n    private void handleGoBack() {\n        if (context != null) {\n            Printer.print(\"Going back to RecruiterHome...\");\n            context.goNext(\"homeRecruiter\");\n        } else {\n            Printer.print(\"Context is NOT initialized in CreateJobAnnouncementController!\");\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/controllergrafico/CreateJobAnnouncementController.java b/src/main/java/org/example/togetjob/view/gui/controllergrafico/CreateJobAnnouncementController.java
--- a/src/main/java/org/example/togetjob/view/gui/controllergrafico/CreateJobAnnouncementController.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/controllergrafico/CreateJobAnnouncementController.java	(date 1739642737247)
@@ -1,11 +1,15 @@
 package org.example.togetjob.view.gui.controllergrafico;
 
 import javafx.fxml.FXML;
+import javafx.scene.control.Alert;
 import javafx.scene.control.TextField;
 import org.example.togetjob.bean.JobAnnouncementBean;
+import org.example.togetjob.exceptions.InvalidSalaryException;
+import org.example.togetjob.exceptions.InvalidWorkingHourException;
+import org.example.togetjob.exceptions.JobAnnouncementAlreadyExists;
 import org.example.togetjob.printer.Printer;
 import org.example.togetjob.view.boundary.PublishAJobAnnouncementRecruiterBoundary;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.GUIContext;
 
 public class CreateJobAnnouncementController {
 
@@ -49,10 +53,41 @@
         String salary = salaryField.getText();
         String description = descriptionField.getText();
 
+
         if (jobTitle.isEmpty() || jobType.isEmpty() || role.isEmpty() || location.isEmpty() || workingHours.isEmpty() || companyName.isEmpty() || salary.isEmpty() || description.isEmpty()) {
             Printer.print("No field can be empty!");
+            showErrorAlert("Validation Error", "Please fill in all the fields.");
+            return;
+        }
+
+
+        try {
+            int workingHoursInt = Integer.parseInt(workingHours);
+            if (workingHoursInt <= 0) {
+                throw new InvalidWorkingHourException("Working hours must be greater than 0.");
+            }
+        } catch (NumberFormatException e) {
+            showErrorAlert("Invalid Input", "Working hours must be a valid number.");
+            return;
+        } catch (InvalidWorkingHourException e) {
+            showErrorAlert("Invalid Working Hours", e.getMessage());
+            return;
+        }
+
+
+        try {
+            double salaryDouble = Double.parseDouble(salary);
+            if (salaryDouble <= 0) {
+                throw new InvalidSalaryException("Salary must be a valid positive number.");
+            }
+        } catch (NumberFormatException e) {
+            showErrorAlert("Invalid Input", "Salary must be a valid number.");
+            return;
+        } catch (InvalidSalaryException e) {
+            showErrorAlert("Invalid Salary", e.getMessage());
             return;
         }
+
 
         JobAnnouncementBean jobAnnouncementBean = new JobAnnouncementBean();
         jobAnnouncementBean.setActive(true);
@@ -65,14 +100,21 @@
         jobAnnouncementBean.setSalary(salary);
         jobAnnouncementBean.setRole(role);
 
-        boolean creation = boundary.publishJobAnnouncement(jobAnnouncementBean);
+
+        try {
+            boolean creation = boundary.publishJobAnnouncement(jobAnnouncementBean);
 
-        if (creation) {
-            Printer.print("Job announcement published!");
-            context.set("jobAnnouncement", jobAnnouncementBean);
-            context.goNext("jobPublished");
-        } else {
-            Printer.print("ERROR: Job announcement NOT published!");
+            if (creation) {
+                Printer.print("Job announcement published!");
+                showSuccessAlert();
+                context.set("jobAnnouncement", jobAnnouncementBean);
+                context.goNext("jobPublished");
+            } else {
+                Printer.print("ERROR: Job announcement NOT published!");
+                showErrorAlert("Publish Error", "Failed to publish job announcement.");
+            }
+        } catch (JobAnnouncementAlreadyExists e) {
+            showErrorAlert("Job Announcement Exists", "A job announcement with this title already exists.");
         }
     }
 
@@ -85,4 +127,22 @@
             Printer.print("Context is NOT initialized in CreateJobAnnouncementController!");
         }
     }
+
+
+    private void showErrorAlert(String title, String message) {
+        Alert alert = new Alert(Alert.AlertType.ERROR);
+        alert.setTitle(title);
+        alert.setHeaderText(null);
+        alert.setContentText(message);
+        alert.showAndWait();
+    }
+
+
+    private void showSuccessAlert() {
+        Alert alert = new Alert(Alert.AlertType.INFORMATION);
+        alert.setTitle("Job Announcement Published");
+        alert.setHeaderText(null);
+        alert.setContentText("The job announcement has been successfully published.");
+        alert.showAndWait();
+    }
 }
Index: src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.controllergrafico;\n\nimport javafx.fxml.FXML;\nimport javafx.scene.control.PasswordField;\nimport javafx.scene.control.TextField;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.session.SessionManager;\nimport org.example.togetjob.view.boundary.LoginBoundary;\nimport org.example.togetjob.view.GUIContext;\n\npublic class HomeController {\n\n    @FXML\n    private TextField usernameField;\n    @FXML\n    private PasswordField passwordField;\n\n    private final LoginBoundary loginBoundary;\n    private GUIContext context;\n\n    public HomeController(){\n        this.loginBoundary = new LoginBoundary();\n    }\n\n    public void initialize(GUIContext context){\n        this.context = context;\n    }\n\n    public void setContext(GUIContext context) {\n        this.context = context;\n    }\n\n    @FXML\n    private void handleLogin() {\n        String username = usernameField.getText();\n        String password = passwordField.getText();\n\n        if (username.isEmpty() || password.isEmpty()) {\n            Printer.print(\"Username or password cannot be empty!\");\n            return;\n        }\n\n        boolean loginSuccess = loginBoundary.login(username, password);\n\n        if (loginSuccess) {\n            Printer.print(\"Login successful!\");\n\n            String userRole = SessionManager.getInstance().getCurrentUser().obtainRole().name();\n            if (\"STUDENT\".equalsIgnoreCase(userRole)) {\n                context.goNext(\"student_home\");\n            } else if (\"RECRUITER\".equalsIgnoreCase(userRole)) {\n                context.goNext(\"recruiter_home\");\n            } else {\n                Printer.print(\"Unknown user role: \" + userRole);\n            }\n        } else {\n            Printer.print(\"Login failed!\");\n        }\n    }\n\n    @FXML\n    private void handleRegister() {\n        if (context != null) {\n            Printer.print(\"Context is initialized!\");\n            context.goNext(\"register\");\n        } else {\n            Printer.print(\"Context is not initialized!\");\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeController.java b/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeController.java
--- a/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeController.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/controllergrafico/HomeController.java	(date 1739646469197)
@@ -1,12 +1,16 @@
 package org.example.togetjob.view.gui.controllergrafico;
 
 import javafx.fxml.FXML;
+import javafx.scene.control.Alert;
+import javafx.scene.control.Alert.AlertType;
 import javafx.scene.control.PasswordField;
 import javafx.scene.control.TextField;
 import org.example.togetjob.printer.Printer;
 import org.example.togetjob.session.SessionManager;
 import org.example.togetjob.view.boundary.LoginBoundary;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.GUIContext;
+import org.example.togetjob.exceptions.UserNotFoundException;
+import org.example.togetjob.exceptions.WrongPasswordException;
 
 public class HomeController {
 
@@ -35,26 +39,35 @@
         String username = usernameField.getText();
         String password = passwordField.getText();
 
+
         if (username.isEmpty() || password.isEmpty()) {
             Printer.print("Username or password cannot be empty!");
             return;
         }
 
-        boolean loginSuccess = loginBoundary.login(username, password);
+        try {
+
+            boolean loginSuccess = loginBoundary.login(username, password);
 
-        if (loginSuccess) {
-            Printer.print("Login successful!");
+            if (loginSuccess) {
+                Printer.print("Login successful!");
 
-            String userRole = SessionManager.getInstance().getCurrentUser().obtainRole().name();
-            if ("STUDENT".equalsIgnoreCase(userRole)) {
-                context.goNext("student_home");
-            } else if ("RECRUITER".equalsIgnoreCase(userRole)) {
-                context.goNext("recruiter_home");
-            } else {
-                Printer.print("Unknown user role: " + userRole);
+                String userRole = SessionManager.getInstance().getCurrentUser().obtainRole().name();
+                if ("STUDENT".equalsIgnoreCase(userRole)) {
+                    context.goNext("student_home");
+                } else if ("RECRUITER".equalsIgnoreCase(userRole)) {
+                    context.goNext("recruiter_home");
+                } else {
+                    Printer.print("Unknown user role: " + userRole);
+                }
             }
-        } else {
-            Printer.print("Login failed!");
+
+        } catch (UserNotFoundException e) {
+            showErrorAlert("User not found", "The username you entered does not exist.");
+        } catch (WrongPasswordException e) {
+            showErrorAlert("Wrong password", "The password you entered is incorrect.");
+        } catch (Exception e) {
+            showErrorAlert("Login failed", "An unexpected error occurred. Please try again.");
         }
     }
 
@@ -67,4 +80,12 @@
             Printer.print("Context is not initialized!");
         }
     }
+
+    private void showErrorAlert(String title, String message) {
+        Alert alert = new Alert(AlertType.ERROR);
+        alert.setTitle(title);
+        alert.setHeaderText(null);
+        alert.setContentText(message);
+        alert.showAndWait();
+    }
 }
Index: src/main/java/org/example/togetjob/view/gui/concretestate/RegisterRecruiterState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.concretestate;\n\nimport javafx.application.Platform;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\nimport org.example.togetjob.bean.RegisterUserBean;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.Context;\nimport org.example.togetjob.view.State;\nimport org.example.togetjob.view.GUIContext;\nimport org.example.togetjob.view.gui.controllergrafico.RegisterRecruiterController;\n\nimport java.io.IOException;\n\npublic class RegisterRecruiterState implements State {\n\n    RegisterUserBean registerUserBean;\n    GUIContext context;\n\n    public RegisterRecruiterState(RegisterUserBean registerUserBean, GUIContext context) {\n        this.registerUserBean = registerUserBean;\n        this.context = context;\n    }\n\n    @Override\n    public void showMenu() {\n        try {\n            Printer.print(\"Showing RegisterRecruiterState...\");\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/org/example/togetjob/fxml/registerrecruiter.fxml\"));\n            Parent root = fxmlLoader.load();\n\n            RegisterRecruiterController registerRecruiterController = fxmlLoader.getController();\n            registerRecruiterController.setContext(context);\n            registerRecruiterController.setUserBean(registerUserBean);\n\n            Scene scene = new Scene(root);\n            Stage stage = context.getStage();\n\n            if (stage == null) {\n                stage = new Stage();\n                context.setStage(stage);\n            }\n\n            stage.setTitle(\"Register Recruiter\");\n            stage.setScene(scene);\n\n            // Listener to close the application\n            stage.setOnCloseRequest(event -> {\n                Platform.exit();  // JavaFX exit\n                System.exit(0);   // process exit\n            });\n\n            stage.show();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void goNext(Context context, String event) {\n\n        GUIContext contextGUI = (GUIContext) context;\n\n        switch (event) {\n            case \"go_home_recruiter\":\n\n                contextGUI.setState(new HomeRecruiterState(contextGUI));\n                break;\n            case \"go_home\":\n\n                contextGUI.setState(new HomeState(contextGUI));\n                break;\n            case \"register_recruiter\":\n\n                contextGUI.setState(new RegisterRecruiterState(registerUserBean, contextGUI));\n                break;\n            default:\n                Printer.print(\"Event not handled: \" + event);\n                break;\n        }\n    }\n\n    public GUIContext getContext() {\n        return context;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterRecruiterState.java b/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterRecruiterState.java
--- a/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterRecruiterState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterRecruiterState.java	(date 1739642737210)
@@ -7,9 +7,9 @@
 import javafx.stage.Stage;
 import org.example.togetjob.bean.RegisterUserBean;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
+import org.example.togetjob.state.GUIContext;
 import org.example.togetjob.view.gui.controllergrafico.RegisterRecruiterController;
 
 import java.io.IOException;
Index: src/main/java/org/example/togetjob/view/gui/concretestate/HomeState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.concretestate;\n\nimport javafx.application.Platform;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.Context;\nimport org.example.togetjob.view.State;\nimport org.example.togetjob.view.GUIContext;\nimport org.example.togetjob.view.gui.controllergrafico.HomeController;\n\n\nimport java.io.IOException;\n\npublic class HomeState implements State {\n\n    private final GUIContext context;\n\n    public HomeState(GUIContext context) {\n        this.context = context;\n    }\n\n    @Override\n    public void showMenu() {\n        try {\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/org/example/togetjob/fxml/home.fxml\"));\n            Parent root = loader.load();\n\n            HomeController controller = loader.getController();\n            controller.initialize(context);\n\n            Scene scene = new Scene(root);\n            Stage stage = context.getStage();\n\n            if (stage == null) {\n                stage = new Stage();\n                context.setStage(stage);\n            }\n\n            stage.setScene(scene);\n\n            stage.setOnCloseRequest(event -> {\n                Platform.exit();  // JavaFX\n                System.exit(0);   // process\n            });\n\n            stage.show();\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void goNext(Context contextState, String event) {\n\n        GUIContext contextGUI = (GUIContext) contextState;\n\n        switch (event) {\n            case \"student_home\":\n                contextGUI.setState(new HomeStudentState(contextGUI));\n                break;\n            case \"recruiter_home\":\n                contextGUI.setState(new HomeRecruiterState(contextGUI));\n                break;\n            case \"register\":\n                contextGUI.setState(new RegisterUserState(contextGUI));\n                break;\n            default:\n                Printer.print(\"Event not managed: \" + event);\n                break;\n        }\n    }\n\n    public GUIContext getContext() {\n        return context;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/concretestate/HomeState.java b/src/main/java/org/example/togetjob/view/gui/concretestate/HomeState.java
--- a/src/main/java/org/example/togetjob/view/gui/concretestate/HomeState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/concretestate/HomeState.java	(date 1739642737215)
@@ -6,9 +6,9 @@
 import javafx.scene.Scene;
 import javafx.stage.Stage;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
+import org.example.togetjob.state.GUIContext;
 import org.example.togetjob.view.gui.controllergrafico.HomeController;
 
 
Index: src/main/resources/org/example/togetjob/fxml/recruitercreatejobannouncement.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import javafx.geometry.Rectangle2D?>\n<?import javafx.scene.control.Button?>\n<?import javafx.scene.control.Label?>\n<?import javafx.scene.control.TextField?>\n<?import javafx.scene.effect.Glow?>\n<?import javafx.scene.effect.InnerShadow?>\n<?import javafx.scene.image.Image?>\n<?import javafx.scene.image.ImageView?>\n<?import javafx.scene.layout.AnchorPane?>\n<?import javafx.scene.text.Font?>\n\n<AnchorPane prefHeight=\"500.0\" prefWidth=\"600.0\" style=\"-fx-background-color: linear-gradient(from 0% 0% to 0% 100%, rgba(255,255,255,1) 85%, rgba(240,248,255,0.8) 95%, rgba(220,240,255,0.7) 100%); -fx-border-color: lightgray;\" xmlns=\"http://javafx.com/javafx/23.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"org.example.togetjob.view.gui.controllergrafico.CreateJobAnnouncementController\">\n   <children>\n      <Label layoutX=\"91.0\" style=\"-fx-text-fill: #b3d9ff;\" textAlignment=\"JUSTIFY\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"36.0\" />\n         </font>\n      </Label>\n      <Label layoutX=\"13.0\" layoutY=\"130.0\" style=\"-fx-text-fill: #1D3557;\" text=\"Role :\" AnchorPane.topAnchor=\"140.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"18.0\" />\n         </font>\n         <effect>\n            <Glow />\n         </effect>\n      </Label>\n      <Label layoutX=\"13.0\" layoutY=\"200.0\" style=\"-fx-text-fill: #1D3557;\" text=\"Working hours :\" AnchorPane.topAnchor=\"180.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"18.0\" />\n         </font>\n         <effect>\n            <Glow />\n         </effect>\n      </Label>\n      <Label layoutX=\"13.0\" layoutY=\"60.0\" style=\"-fx-text-fill: #1D3557;\" text=\"Job title :\" AnchorPane.topAnchor=\"60.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"18.0\" />\n         </font>\n         <effect>\n            <Glow />\n         </effect>\n      </Label>\n      <Label layoutX=\"13.0\" layoutY=\"95.0\" style=\"-fx-text-fill: #1D3557;\" text=\"Job type :\" AnchorPane.topAnchor=\"100.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"18.0\" />\n         </font>\n         <effect>\n            <Glow />\n         </effect>\n      </Label>\n      <Label layoutX=\"13.0\" layoutY=\"235.0\" style=\"-fx-text-fill: #1D3557;\" text=\"Company name :\" AnchorPane.topAnchor=\"260.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"18.0\" />\n         </font>\n         <effect>\n            <Glow />\n         </effect>\n      </Label>\n      <Label layoutX=\"13.0\" layoutY=\"270.0\" style=\"-fx-text-fill: #1D3557;\" text=\"Salary :\" AnchorPane.topAnchor=\"300.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"18.0\" />\n         </font>\n         <effect>\n            <Glow />\n         </effect>\n      </Label>\n      <Label layoutX=\"13.0\" layoutY=\"165.0\" style=\"-fx-text-fill: #1D3557;\" text=\"Location :\" AnchorPane.topAnchor=\"220.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"18.0\" />\n         </font>\n         <effect>\n            <Glow />\n         </effect>\n      </Label>\n      <TextField fx:id=\"jobTitleField\" layoutX=\"79.0\" layoutY=\"60.0\" prefHeight=\"26.0\" prefWidth=\"514.0\" promptText=\"Enter job title \" style=\"-fx-border-radius: 5;\" AnchorPane.leftAnchor=\"160.0\" AnchorPane.rightAnchor=\"15.0\" AnchorPane.topAnchor=\"60.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"16.0\" />\n         </font>\n      </TextField>\n      <TextField fx:id=\"jobTypeField\" layoutX=\"162.0\" layoutY=\"102.0\" prefHeight=\"34.0\" prefWidth=\"423.0\" promptText=\"Enter job type [FULL-TIME/PART-TIME]\" style=\"-fx-border-radius: 5;\" AnchorPane.leftAnchor=\"161.0\" AnchorPane.rightAnchor=\"16.0\" AnchorPane.topAnchor=\"101.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"16.0\" />\n         </font>\n      </TextField>\n      <TextField fx:id=\"roleField\" layoutX=\"57.0\" layoutY=\"130.0\" prefHeight=\"26.0\" prefWidth=\"533.0\" promptText=\"Enter role \" style=\"-fx-border-radius: 5;\" AnchorPane.leftAnchor=\"160.0\" AnchorPane.rightAnchor=\"15.0\" AnchorPane.topAnchor=\"140.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"16.0\" />\n         </font>\n      </TextField>\n      <TextField fx:id=\"locationField\" layoutX=\"84.0\" layoutY=\"165.0\" prefHeight=\"26.0\" prefWidth=\"507.0\" promptText=\"Enter location \" style=\"-fx-border-radius: 5;\" AnchorPane.leftAnchor=\"160.0\" AnchorPane.rightAnchor=\"15.0\" AnchorPane.topAnchor=\"180.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"16.0\" />\n         </font>\n      </TextField>\n      <TextField fx:id=\"workingHoursField\" layoutX=\"122.0\" layoutY=\"200.0\" prefHeight=\"26.0\" prefWidth=\"468.0\" promptText=\"Enter working hours\" style=\"-fx-border-radius: 5;\" AnchorPane.leftAnchor=\"160.0\" AnchorPane.rightAnchor=\"15.0\" AnchorPane.topAnchor=\"220.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"16.0\" />\n         </font>\n      </TextField>\n      <TextField fx:id=\"companyNameField\" layoutX=\"131.0\" layoutY=\"235.0\" prefHeight=\"26.0\" prefWidth=\"458.0\" promptText=\"Enter company name \" style=\"-fx-border-radius: 5;\" AnchorPane.leftAnchor=\"160.0\" AnchorPane.rightAnchor=\"15.0\" AnchorPane.topAnchor=\"260.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"16.0\" />\n         </font>\n      </TextField>\n      <TextField fx:id=\"salaryField\" layoutX=\"70.0\" layoutY=\"270.0\" prefHeight=\"26.0\" prefWidth=\"520.0\" promptText=\"Enter salary\" style=\"-fx-border-radius: 5;\" AnchorPane.leftAnchor=\"160.0\" AnchorPane.rightAnchor=\"15.0\" AnchorPane.topAnchor=\"300.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"16.0\" />\n         </font>\n      </TextField>\n      <Button layoutX=\"-8.0\" layoutY=\"5.0\" mnemonicParsing=\"false\" onAction=\"#handleGoBack\" prefHeight=\"41.0\" prefWidth=\"58.0\" style=\"-fx-background-color: transparent;\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"14.0\" />\n         </font>\n      </Button>\n      <ImageView fitHeight=\"85.0\" fitWidth=\"111.0\" layoutX=\"235.0\" layoutY=\"-9.0\" pickOnBounds=\"true\" preserveRatio=\"true\" y=\"-7.0\">\n         <image>\n            <Image url=\"@../logo-removebg-preview.png\" />\n         </image>\n         <viewport>\n            <Rectangle2D minY=\"-10.0\" />\n         </viewport>\n      </ImageView>\n      <ImageView fitHeight=\"30.0\" fitWidth=\"30.0\" layoutX=\"10.0\" layoutY=\"10.0\" mouseTransparent=\"true\" onMouseClicked=\"#handleGoBack\" pickOnBounds=\"true\" preserveRatio=\"true\">\n         <image>\n            <Image url=\"@../back-158491_1920.png\" />\n         </image>\n         <effect>\n            <InnerShadow />\n         </effect>\n      </ImageView>\n      <Label layoutX=\"13.0\" layoutY=\"305.0\" style=\"-fx-text-fill: #1D3557;\" text=\"Description :\" AnchorPane.topAnchor=\"340.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"18.0\" />\n         </font>\n         <effect>\n            <Glow />\n         </effect>\n      </Label>\n      <TextField fx:id=\"descriptionField\" alignment=\"TOP_LEFT\" layoutX=\"162.0\" layoutY=\"342.0\" prefHeight=\"64.0\" prefWidth=\"423.0\" promptText=\"Enter description\" style=\"-fx-border-radius: 5;\" AnchorPane.leftAnchor=\"161.0\" AnchorPane.rightAnchor=\"16.0\" AnchorPane.topAnchor=\"341.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"16.0\" />\n         </font>\n      </TextField>\n      <Button layoutX=\"248.0\" layoutY=\"385.0\" mnemonicParsing=\"false\" onAction=\"#handleProceedButton\" prefHeight=\"42.0\" prefWidth=\"98.0\" style=\"-fx-background-color: #b3d9ff; -fx-text-fill: #2980b9; -fx-border-radius: 15; -fx-border-color: #2980b9; -fx-border-width: 2; -fx-cursor: hand; -fx-font-weight: bold; -fx-background-radius: 15;\" text=\"Proceed\" textFill=\"#00aaff\" AnchorPane.bottomAnchor=\"20.0\">\n         <font>\n            <Font name=\"AppleGothic Regular\" size=\"14.0\" />\n         </font>\n      </Button>\n   </children>\n</AnchorPane>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/org/example/togetjob/fxml/recruitercreatejobannouncement.fxml b/src/main/resources/org/example/togetjob/fxml/recruitercreatejobannouncement.fxml
--- a/src/main/resources/org/example/togetjob/fxml/recruitercreatejobannouncement.fxml	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/resources/org/example/togetjob/fxml/recruitercreatejobannouncement.fxml	(date 1739636558018)
@@ -89,12 +89,12 @@
             <Font name="AppleGothic Regular" size="16.0" />
          </font>
       </TextField>
-      <TextField fx:id="locationField" layoutX="84.0" layoutY="165.0" prefHeight="26.0" prefWidth="507.0" promptText="Enter location " style="-fx-border-radius: 5;" AnchorPane.leftAnchor="160.0" AnchorPane.rightAnchor="15.0" AnchorPane.topAnchor="180.0">
+      <TextField fx:id="workingHoursField" layoutX="84.0" layoutY="165.0" prefHeight="26.0" prefWidth="507.0" promptText="Enter working hours" style="-fx-border-radius: 5;" AnchorPane.leftAnchor="160.0" AnchorPane.rightAnchor="15.0" AnchorPane.topAnchor="180.0">
          <font>
             <Font name="AppleGothic Regular" size="16.0" />
          </font>
       </TextField>
-      <TextField fx:id="workingHoursField" layoutX="122.0" layoutY="200.0" prefHeight="26.0" prefWidth="468.0" promptText="Enter working hours" style="-fx-border-radius: 5;" AnchorPane.leftAnchor="160.0" AnchorPane.rightAnchor="15.0" AnchorPane.topAnchor="220.0">
+      <TextField fx:id="locationField" layoutX="122.0" layoutY="200.0" prefHeight="26.0" prefWidth="468.0" promptText="Enter location" style="-fx-border-radius: 5;" AnchorPane.leftAnchor="160.0" AnchorPane.rightAnchor="15.0" AnchorPane.topAnchor="220.0">
          <font>
             <Font name="AppleGothic Regular" size="16.0" />
          </font>
Index: src/main/java/org/example/togetjob/view/gui/concretestate/RegisterUserState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.view.gui.concretestate;\n\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\nimport org.example.togetjob.bean.RegisterUserBean;\nimport org.example.togetjob.printer.Printer;\nimport org.example.togetjob.view.Context;\nimport org.example.togetjob.view.State;\nimport org.example.togetjob.view.GUIContext;\nimport org.example.togetjob.view.gui.controllergrafico.RegisterController;\n\nimport java.io.IOException;\n\npublic class RegisterUserState implements State {\n\n    private final GUIContext context;\n\n    public RegisterUserState(GUIContext context) {\n        this.context = context;\n    }\n\n    @Override\n    public void showMenu() {\n        try {\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/org/example/togetjob/fxml/registeruser.fxml\"));\n            Parent root = loader.load();\n\n            RegisterController controller = loader.getController();\n            controller.setContext(context);\n\n            Stage stage = context.getStage();\n            if (stage == null) {\n                throw new IllegalStateException(\"Stage is null! Ensure GUIContext is properly initialized.\");\n            }\n\n            stage.setScene(new Scene(root));\n            stage.show();\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void goNext(Context context, String event) {\n        // Cast a GUIContext\n        GUIContext guiContext = (GUIContext) context;\n        RegisterUserBean user = (RegisterUserBean) guiContext.get(\"user\");\n\n        switch (event) {\n            case \"register_student\":\n                guiContext.setState(new RegisterStudentState(user, guiContext));\n                break;\n            case \"register_recruiter\":\n                guiContext.setState(new RegisterRecruiterState(user, guiContext));\n                break;\n            case \"go_home\":\n                guiContext.setState(new HomeState(guiContext));\n                break;\n            default:\n                Printer.print(\"Event not handled: \" + event);\n                break;\n        }\n    }\n\n    public GUIContext getContext() {\n        return context;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterUserState.java b/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterUserState.java
--- a/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterUserState.java	(revision 457ec4b0781f9ffa3bbe2fdee68c1272085a1d1f)
+++ b/src/main/java/org/example/togetjob/view/gui/concretestate/RegisterUserState.java	(date 1739642737320)
@@ -6,9 +6,9 @@
 import javafx.stage.Stage;
 import org.example.togetjob.bean.RegisterUserBean;
 import org.example.togetjob.printer.Printer;
-import org.example.togetjob.view.Context;
-import org.example.togetjob.view.State;
-import org.example.togetjob.view.GUIContext;
+import org.example.togetjob.state.Context;
+import org.example.togetjob.state.State;
+import org.example.togetjob.state.GUIContext;
 import org.example.togetjob.view.gui.controllergrafico.RegisterController;
 
 import java.io.IOException;

Index: src/main/java/org/example/togetjob/model/entity/Student.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.model.entity;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\npublic class Student extends User{\n\n    private LocalDate dateOfBirth;\n    private String phoneNumber;\n    private List<String> degrees;\n    private List<String> courseAttended;\n    private List<String> certifications;\n    private List<String> workExperiences;\n    private List<String> skills;\n    private String availability;\n    private List<JobApplication> jobApplications;\n\n    public Student(String username, String password, String name, String surname, String emailAddress, Role role) {\n        super(name, surname, username, emailAddress, password, role); // User\n    }\n\n    public Student(String name, String surname, String username, String emailAddress, String password, Role role, LocalDate dateOfBirth, String phoneNumber, List<String> degrees, List<String> courseAttended, List<String> certifications, List<String> workExperiences, List<String> skills, String availability, List<JobApplication> jobApplications) {\n        super(name, surname, username, emailAddress, password, role);\n        this.dateOfBirth = dateOfBirth;\n        this.phoneNumber = phoneNumber;\n        this.degrees = degrees;\n        this.courseAttended = courseAttended;\n        this.certifications = certifications;\n        this.workExperiences = workExperiences;\n        this.skills = skills;\n        this.availability = availability;\n        this.jobApplications = jobApplications;\n    }\n\n\n    public LocalDate getDateOfBirth() {\n        return dateOfBirth;\n    }\n\n    public String getPhoneNumber() {\n        return phoneNumber;\n    }\n\n    public List<String> getDegrees() {\n        return degrees;\n    }\n\n    public List<String> getCourseAttended() {\n        return courseAttended;\n    }\n\n    public List<String> getCertifications() {\n        return certifications;\n    }\n\n    public List<String> getWorkExperiences() {\n        return workExperiences;\n    }\n\n    public List<String> getSkills() {\n        return skills;\n    }\n\n    public String getAvailability() {\n        return availability;\n    }\n\n    public List<JobApplication> getJobApplications() {\n        return jobApplications;\n    }\n\n    @Override\n    public String toString() {\n        return \"Student{\" +\n                \"username='\" + getUsername() + '\\'' +\n                \", email='\" + getEmailAddress() + '\\'' +\n                \", degrees=\" + degrees +\n                '}';\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/model/entity/Student.java b/src/main/java/org/example/togetjob/model/entity/Student.java
--- a/src/main/java/org/example/togetjob/model/entity/Student.java	(revision 5577470cdb18d2778ecee0571e4d9067bf7e7df4)
+++ b/src/main/java/org/example/togetjob/model/entity/Student.java	(date 1738748671016)
@@ -15,6 +15,7 @@
     private String availability;
     private List<JobApplication> jobApplications;
 
+
     public Student(String username, String password, String name, String surname, String emailAddress, Role role) {
         super(name, surname, username, emailAddress, password, role); // User
     }
@@ -78,4 +79,39 @@
                 '}';
     }
 
+    public void setDateOfBirth(LocalDate dateOfBirth) {
+        this.dateOfBirth = dateOfBirth;
+    }
+
+    public void setPhoneNumber(String phoneNumber) {
+        this.phoneNumber = phoneNumber;
+    }
+
+    public void setDegrees(List<String> degrees) {
+        this.degrees = degrees;
+    }
+
+    public void setCourseAttended(List<String> courseAttended) {
+        this.courseAttended = courseAttended;
+    }
+
+    public void setCertifications(List<String> certifications) {
+        this.certifications = certifications;
+    }
+
+    public void setWorkExperiences(List<String> workExperiences) {
+        this.workExperiences = workExperiences;
+    }
+
+    public void setSkills(List<String> skills) {
+        this.skills = skills;
+    }
+
+    public void setAvailability(String availability) {
+        this.availability = availability;
+    }
+
+    public void setJobApplications(List<JobApplication> jobApplications) {
+        this.jobApplications = jobApplications;
+    }
 }
Index: src/main/java/org/example/togetjob/model/dao/concreteobjects/FileSystemUserDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.model.dao.concreteobjects;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.example.togetjob.model.dao.abstractobjects.UserDao;\nimport org.example.togetjob.model.entity.User;\nimport org.example.togetjob.printer.Printer;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class FileSystemUserDao implements UserDao {\n\n    private static final String PATH_NAME = \"files_json/User.json\";\n    private final ObjectMapper objectMapper = new ObjectMapper();\n\n    private File getUserFile() {\n        URL resource = getClass().getClassLoader().getResource(PATH_NAME);\n        if (resource == null) {\n            Printer.print(\"File non trovato: files_json/User.json\");\n            return null;\n        }\n        Printer.print(\"File trovato a: \" + resource.getPath());\n        return new File(resource.getFile());\n    }\n\n    @Override\n    public boolean saveUser(User user) {\n        try {\n            List<User> users = getAllUsers();\n\n            if (users.stream().anyMatch(u -> u.getUsername().equals(user.getUsername()))) {\n                Printer.print(\"The user: \" + user.getUsername() + \" already exists.\");\n                return false;\n            }\n\n            users.add(user);\n            objectMapper.writeValue(getUserFile(), users);\n            Printer.print(\"The user: \" + user.getUsername() + \" has been successfully saved in the File System\");\n            return true;\n\n        } catch (IOException e) {\n            Printer.print(\"Error saving user: \" + user.getUsername());\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    @Override\n    public Optional<User> getUser(String username) {\n        return getAllUsers().stream().filter(user -> user.getUsername().equals(username)).findFirst();\n    }\n\n    @Override\n    public List<User> getAllUsers() {\n        try {\n            File file = getUserFile();\n            if (!file.exists()) {\n                return new ArrayList<>();\n            }\n\n            return objectMapper.readValue(file, new TypeReference<List<User>>() {});\n\n        } catch (IOException e) {\n            Printer.print(\"Error retrieving users from File System\");\n            e.printStackTrace();\n            return new ArrayList<>();\n        }\n    }\n\n    @Override\n    public boolean updateUser(User user) {\n        try {\n            List<User> users = getAllUsers();\n            boolean found = false;\n\n            for (int i = 0; i < users.size(); i++) {\n                if (users.get(i).getUsername().equals(user.getUsername())) {\n                    users.set(i, user); // Update user data\n                    found = true;\n                    break;\n                }\n            }\n\n            if (!found) {\n                Printer.print(\"The user: \" + user.getUsername() + \" doesn't exist.\");\n                return false;\n            }\n\n            objectMapper.writeValue(new File(PATH_NAME), users);\n            Printer.print(\"The user: \" + user.getUsername() + \" has been successfully updated.\");\n            return true;\n\n        } catch (IOException e) {\n            Printer.print(\"An unexpected error occurred: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    @Override\n    public boolean deleteUser(String username) {\n        try {\n            List<User> users = getAllUsers();\n            boolean removed = users.removeIf(user -> user.getUsername().equals(username));\n            if (!removed) {\n                Printer.print(\"The user: \" + username + \" doesn't exist.\");\n                return false;\n            }\n\n            objectMapper.writeValue(getUserFile(), users);\n            Printer.print(\"The user: \" + username + \" has been successfully deleted.\");\n            return true;\n\n        } catch (IOException e) {\n            Printer.print(\"The user: \" + username + \" cannot be deleted\");\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    @Override\n    public boolean userExists(String username) {\n        return getAllUsers().stream().anyMatch(user -> user.getUsername().equals(username));\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/model/dao/concreteobjects/FileSystemUserDao.java b/src/main/java/org/example/togetjob/model/dao/concreteobjects/FileSystemUserDao.java
--- a/src/main/java/org/example/togetjob/model/dao/concreteobjects/FileSystemUserDao.java	(revision 5577470cdb18d2778ecee0571e4d9067bf7e7df4)
+++ b/src/main/java/org/example/togetjob/model/dao/concreteobjects/FileSystemUserDao.java	(date 1738752024821)
@@ -1,129 +1,144 @@
 package org.example.togetjob.model.dao.concreteobjects;
 
-import com.fasterxml.jackson.core.type.TypeReference;
-import com.fasterxml.jackson.databind.ObjectMapper;
 import org.example.togetjob.model.dao.abstractobjects.UserDao;
-import org.example.togetjob.model.entity.User;
+import org.example.togetjob.model.entity.*;
+import org.example.togetjob.model.entity.Role;
 import org.example.togetjob.printer.Printer;
 
-import java.io.File;
-import java.io.IOException;
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Optional;
+import java.io.*;
+import java.util.*;
 
 public class FileSystemUserDao implements UserDao {
-
-    private static final String PATH_NAME = "files_json/User.json";
-    private final ObjectMapper objectMapper = new ObjectMapper();
-
-    private File getUserFile() {
-        URL resource = getClass().getClassLoader().getResource(PATH_NAME);
-        if (resource == null) {
-            Printer.print("File non trovato: files_json/User.json");
-            return null;
-        }
-        Printer.print("File trovato a: " + resource.getPath());
-        return new File(resource.getFile());
-    }
+    private static final String PATH_NAME = "src/main/resources/files_txt/User.txt";
 
     @Override
     public boolean saveUser(User user) {
-        try {
-            List<User> users = getAllUsers();
-
-            if (users.stream().anyMatch(u -> u.getUsername().equals(user.getUsername()))) {
-                Printer.print("The user: " + user.getUsername() + " already exists.");
-                return false;
-            }
+        if (userExists(user.getUsername())) {
+            Printer.print("L'utente con username " + user.getUsername() + " esiste già.");
+            return false;
+        }
 
-            users.add(user);
-            objectMapper.writeValue(getUserFile(), users);
-            Printer.print("The user: " + user.getUsername() + " has been successfully saved in the File System");
+        try (BufferedWriter writer = new BufferedWriter(new FileWriter(PATH_NAME, true))) {
+            writer.write(user.getName() + "," + user.getSurname() + "," + user.getUsername() + "," +
+                    user.getEmailAddress() + "," + user.getPassword() + "," + user.getRole());
+            writer.newLine();
             return true;
-
         } catch (IOException e) {
-            Printer.print("Error saving user: " + user.getUsername());
-            e.printStackTrace();
+            Printer.print("Errore durante la scrittura del file: " + e.getMessage());
             return false;
         }
     }
 
     @Override
     public Optional<User> getUser(String username) {
-        return getAllUsers().stream().filter(user -> user.getUsername().equals(username)).findFirst();
+        return getAllUsers().stream()
+                .filter(user -> user.getUsername().equals(username))
+                .findFirst();
     }
 
     @Override
     public List<User> getAllUsers() {
-        try {
-            File file = getUserFile();
-            if (!file.exists()) {
-                return new ArrayList<>();
+        List<User> users = new ArrayList<>();
+        try (BufferedReader reader = new BufferedReader(new FileReader(PATH_NAME))) {
+            String line;
+            while ((line = reader.readLine()) != null) {
+                // Dividi la riga in base alla virgola
+                String[] data = line.split(",");
+                // Verifica che la riga contenga i dati corretti
+                if (data.length >= 6) {
+                    Role role = Role.valueOf(data[5].trim()); // Rimuovi gli spazi extra
+                    User user = (role == Role.STUDENT)
+                            ? new Student(data[0].trim(), data[1].trim(), data[2].trim(), data[3].trim(), data[4].trim(), role)
+                            : new Recruiter(data[0].trim(), data[1].trim(), data[2].trim(), data[3].trim(), data[4].trim(), role);
+                    users.add(user);
+                }
             }
-
-            return objectMapper.readValue(file, new TypeReference<List<User>>() {});
-
         } catch (IOException e) {
-            Printer.print("Error retrieving users from File System");
-            e.printStackTrace();
-            return new ArrayList<>();
+            Printer.print("Errore durante la lettura del file: " + e.getMessage());
+        } catch (IllegalArgumentException e) {
+            Printer.print("Errore nel parsing del ruolo: " + e.getMessage());
         }
+        return users;
     }
 
     @Override
     public boolean updateUser(User user) {
-        try {
-            List<User> users = getAllUsers();
-            boolean found = false;
 
-            for (int i = 0; i < users.size(); i++) {
-                if (users.get(i).getUsername().equals(user.getUsername())) {
-                    users.set(i, user); // Update user data
-                    found = true;
-                    break;
+        List<String> lines = new ArrayList<>();
+        try (BufferedReader reader = new BufferedReader(new FileReader(PATH_NAME))) {
+            String line;
+            while ((line = reader.readLine()) != null) {
+                String[] data = line.split(",");
+                if (data.length >= 6 && data[2].trim().equals(user.getUsername())) {
+                    // Trova la riga dell'utente da aggiornare e sostituiscila con i nuovi dati
+                    line = user.getName() + "," + user.getSurname() + "," + user.getUsername() + "," +
+                            user.getEmailAddress() + "," + user.getPassword() + "," + user.getRole();
                 }
+                lines.add(line); // Aggiungi la riga al buffer
             }
-
-            if (!found) {
-                Printer.print("The user: " + user.getUsername() + " doesn't exist.");
-                return false;
-            }
+        } catch (IOException e) {
+            Printer.print("Errore durante la lettura del file: " + e.getMessage());
+            return false;
+        }
 
-            objectMapper.writeValue(new File(PATH_NAME), users);
-            Printer.print("The user: " + user.getUsername() + " has been successfully updated.");
+        // Riscrivi il file con i dati aggiornati
+        try (BufferedWriter writer = new BufferedWriter(new FileWriter(PATH_NAME))) {
+            for (String line : lines) {
+                writer.write(line);
+                writer.newLine(); // Scrivi a capo
+            }
             return true;
-
         } catch (IOException e) {
-            Printer.print("An unexpected error occurred: " + e.getMessage());
+            Printer.print("Errore durante la scrittura del file: " + e.getMessage());
             return false;
         }
     }
 
     @Override
     public boolean deleteUser(String username) {
-        try {
-            List<User> users = getAllUsers();
-            boolean removed = users.removeIf(user -> user.getUsername().equals(username));
-            if (!removed) {
-                Printer.print("The user: " + username + " doesn't exist.");
-                return false;
-            }
+
+        List<String> lines = new ArrayList<>();
+        try (BufferedReader reader = new BufferedReader(new FileReader(PATH_NAME))) {
+            String line;
+            while ((line = reader.readLine()) != null) {
+                String[] data = line.split(",");
+                if (data.length >= 6 && !data[2].trim().equals(username)) {
+                    // Aggiungi solo le righe che non corrispondono all'utente da eliminare
+                    lines.add(line);
+                }
+            }
+        } catch (IOException e) {
+            Printer.print("Errore durante la lettura del file: " + e.getMessage());
+            return false;
+        }
 
-            objectMapper.writeValue(getUserFile(), users);
-            Printer.print("The user: " + username + " has been successfully deleted.");
+        // Riscrivi il file senza l'utente eliminato
+        try (BufferedWriter writer = new BufferedWriter(new FileWriter(PATH_NAME))) {
+            for (String line : lines) {
+                writer.write(line);
+                writer.newLine(); // Scrivi a capo
+            }
             return true;
-
         } catch (IOException e) {
-            Printer.print("The user: " + username + " cannot be deleted");
-            e.printStackTrace();
+            Printer.print("Errore durante la scrittura del file: " + e.getMessage());
             return false;
         }
     }
 
     @Override
     public boolean userExists(String username) {
-        return getAllUsers().stream().anyMatch(user -> user.getUsername().equals(username));
-    }
-}
+        try (BufferedReader reader = new BufferedReader(new FileReader(PATH_NAME))) {
+            String line;
+            while ((line = reader.readLine()) != null) {
+                String[] data = line.split(",");
+                if (data.length >= 5 && data[2].trim().equals(username)) {  // username è al terzo posto
+                    return true;  // Utente trovato
+                }
+            }
+        } catch (IOException e) {
+            Printer.print("Errore durante la lettura del file: " + e.getMessage());
+        }
+        return false;  // Utente non trovato
+    }
+
+}
\ No newline at end of file
Index: src/main/resources/files_json/JobAnnouncement.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/files_json/JobAnnouncement.json b/src/main/resources/files_txt/User.txt
rename from src/main/resources/files_json/JobAnnouncement.json
rename to src/main/resources/files_txt/User.txt
--- a/src/main/resources/files_json/JobAnnouncement.json	(revision 5577470cdb18d2778ecee0571e4d9067bf7e7df4)
+++ b/src/main/resources/files_txt/User.txt	(date 1738750102148)
@@ -1,0 +1,6 @@
+sss,sss,anme,aaa,eeee,STUDENT
+mario,mario@gmail.com,mario22,password,rossi,RECRUITER
+user222,surname,name,email@gmail.com,pssw,STUDENT
+name,aaa,mar22,surname,email@gmail.com,STUDENT
+username,email,name,password,surname,STUDENT
+name,surname,username,email,password,STUDENT
Index: src/main/java/org/example/togetjob/model/entity/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.model.entity;\n\nimport com.fasterxml.jackson.annotation.JsonSubTypes;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\n\n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = \"role\")\n@JsonSubTypes({\n        @JsonSubTypes.Type(value = Student.class, name = \"STUDENT\"),\n        @JsonSubTypes.Type(value = Recruiter.class, name = \"RECRUITER\")\n})\n\npublic abstract class User {\n\n    private final String name;\n    private final String surname;\n    private final String username;\n    private final String emailAddress;\n    private final String password;\n    private final Role role;\n\n    protected User(String name, String surname, String username, String emailAddress, String password, Role role) {\n        this.name = name;\n        this.surname = surname;\n        this.username = username;\n        this.emailAddress = emailAddress;\n        this.password = password;\n        this.role = role;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public String getEmailAddress() {\n        return emailAddress;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public Role getRole() {\n        return role;\n    }\n\n    public String getSurname() { return surname; }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/model/entity/User.java b/src/main/java/org/example/togetjob/model/entity/User.java
--- a/src/main/java/org/example/togetjob/model/entity/User.java	(revision 5577470cdb18d2778ecee0571e4d9067bf7e7df4)
+++ b/src/main/java/org/example/togetjob/model/entity/User.java	(date 1738745416970)
@@ -1,14 +1,5 @@
 package org.example.togetjob.model.entity;
 
-import com.fasterxml.jackson.annotation.JsonSubTypes;
-import com.fasterxml.jackson.annotation.JsonTypeInfo;
-
-@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "role")
-@JsonSubTypes({
-        @JsonSubTypes.Type(value = Student.class, name = "STUDENT"),
-        @JsonSubTypes.Type(value = Recruiter.class, name = "RECRUITER")
-})
-
 public abstract class User {
 
     private final String name;
Index: src/main/resources/files_json/User.json
===================================================================
diff --git a/src/main/resources/files_json/User.json b/src/main/resources/files_json/User.json
deleted file mode 100644
--- a/src/main/resources/files_json/User.json	(revision 5577470cdb18d2778ecee0571e4d9067bf7e7df4)
+++ /dev/null	(revision 5577470cdb18d2778ecee0571e4d9067bf7e7df4)
@@ -1,1 +0,0 @@
-[]
\ No newline at end of file
Index: src/main/resources/files_json/Recruiter.json
===================================================================
diff --git a/src/main/resources/files_json/Recruiter.json b/src/main/resources/files_json/Recruiter.json
deleted file mode 100644
--- a/src/main/resources/files_json/Recruiter.json	(revision 5577470cdb18d2778ecee0571e4d9067bf7e7df4)
+++ /dev/null	(revision 5577470cdb18d2778ecee0571e4d9067bf7e7df4)
@@ -1,1 +0,0 @@
-[]
\ No newline at end of file
Index: src/main/resources/files_json/Student.json
===================================================================
diff --git a/src/main/resources/files_json/Student.json b/src/main/resources/files_json/Student.json
deleted file mode 100644
--- a/src/main/resources/files_json/Student.json	(revision 5577470cdb18d2778ecee0571e4d9067bf7e7df4)
+++ /dev/null	(revision 5577470cdb18d2778ecee0571e4d9067bf7e7df4)
@@ -1,1 +0,0 @@
-[]
\ No newline at end of file

Index: src/main/java/org/example/togetjob/controller/student/SendAJobApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.togetjob.controller.student;\n\nimport org.example.togetjob.bean.JobAnnouncementBean;\nimport org.example.togetjob.bean.JobAnnouncementSearchBean;\nimport org.example.togetjob.bean.JobApplicationBean;\nimport org.example.togetjob.model.dao.abstractfactorydao.AbstractFactoryDaoSingleton;\nimport org.example.togetjob.model.dao.abstractobjects.JobAnnouncementDao;\nimport org.example.togetjob.model.dao.abstractobjects.JobApplicationDao;\nimport org.example.togetjob.model.dao.abstractobjects.RecruiterDao;\nimport org.example.togetjob.model.entity.*;\nimport org.example.togetjob.model.factory.JobApplicationFactory;\nimport org.example.togetjob.session.SessionManager;\n\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class SendAJobApplication {\n\n    private final JobAnnouncementDao jobAnnouncementDao;\n    private final JobApplicationDao jobApplicationDao ;\n    private final RecruiterDao recruiterDao ;\n\n    public SendAJobApplication(){\n        this.jobAnnouncementDao = AbstractFactoryDaoSingleton.getFactoryDao().createJobAnnouncementDao();\n        this.jobApplicationDao = AbstractFactoryDaoSingleton.getFactoryDao().createJobApplicationDao();\n        this.recruiterDao = AbstractFactoryDaoSingleton.getFactoryDao().createRecruiterDao() ;\n    }\n\n\n\n\n\n\n    public List<JobAnnouncementSearchBean> getFilteredJobAnnouncement (JobAnnouncementSearchBean jobAnnouncementSearchBean){\n\n        return List.of() ;\n\n    }\n\n    private Optional<JobApplication> getJobApplication(JobApplicationBean jobApplicationBean){\n\n\n        Student student = getStudentFromSession();\n\n        Optional<Recruiter> recruiterOpt = recruiterDao.getRecruiter(jobApplicationBean.getRecruiterUsername());\n        if (recruiterOpt.isEmpty()) {\n            throw new IllegalArgumentException(\"Errore: Recruiter non trovato.\");\n        }\n        Recruiter recruiter = recruiterOpt.get(); // Ora c'è un recruiter valido\n\n        // Recupero lo job announcement sfruttando il getter di jobApplicationBean\n        Optional<JobAnnouncement> jobAnnouncementOpt = jobAnnouncementDao.getJobAnnouncement(jobApplicationBean.getJobTitle(), recruiter);\n        if (jobAnnouncementOpt.isEmpty()) {\n\n            throw new IllegalArgumentException(\"Errore: Recruiter non trovato.\");\n\n        }\n        JobAnnouncement jobAnnouncement = jobAnnouncementOpt.get(); // Ora c'è un job announcement valido\n\n        return jobApplicationDao.getJobApplication(student, jobAnnouncement);\n\n    }\n\n    public boolean sendAJobApplication (JobApplicationBean jobApplicationBean){\n\n        // Recupero lo studente dalla sessione attuale\n        Student student = getStudentFromSession();\n\n        Optional<Recruiter> recruiterOpt = recruiterDao.getRecruiter(jobApplicationBean.getRecruiterUsername());\n        if (recruiterOpt.isEmpty()) {\n            throw new IllegalArgumentException(\"Errore: Recruiter non trovato.\");\n        }\n        Recruiter recruiter = recruiterOpt.get(); // Ora c'è un recruiter valido\n\n        // Recupero lo job announcement sfruttando il getter di jobApplicationBean\n        Optional<JobAnnouncement> jobAnnouncementOpt = jobAnnouncementDao.getJobAnnouncement(jobApplicationBean.getJobTitle(), recruiter);\n        if (jobAnnouncementOpt.isEmpty()) {\n\n            throw new IllegalArgumentException(\"Errore: Recruiter non trovato.\");\n\n        }\n        JobAnnouncement jobAnnouncement = jobAnnouncementOpt.get(); // Ora c'è un job announcement valido\n\n        Optional<JobApplication> jobApplicationOpt = jobApplicationDao.getJobApplication(student, jobAnnouncement);\n\n        if (jobApplicationOpt.isEmpty()){\n\n            JobApplication jobApplication = new JobApplication(student, jobApplicationBean.getCoverLetter(), jobAnnouncement);\n            jobApplicationDao.saveJobApplication(jobApplication) ;\n\n            // job application inviata\n            return true ;\n\n        }\n\n        // ritorna false nel caso in cui esista già una job application inviata dallo studente per quel job announcement\n        return false ;\n\n    }\n\n\n\n\n\n\n\n\n    public Status getStatusJobApplication (JobApplicationBean jobApplicationBean){\n\n        Optional<JobApplication> jobApplicationOpt = getJobApplication(jobApplicationBean) ;\n        if (jobApplicationOpt.isEmpty()){\n\n            throw new IllegalArgumentException(\"Errore: Job Application non trovata.\");\n\n        }\n\n        JobApplication jobApplication = jobApplicationOpt.get() ;\n        return jobApplication.getStatus() ;\n\n    }\n\n\n    public boolean modifyJobApplication(JobApplicationBean jobApplicationBean){\n\n        Status status = getStatusJobApplication(jobApplicationBean) ;\n\n        // se lo stato è pending approval allora la candidatura è ancora modificabile\n        if (status.equals(Status.PENDING)){\n\n            Optional<JobApplication> jobApplicationOPT = getJobApplication(jobApplicationBean) ;\n            JobApplication oldJobApplication = jobApplicationOPT.get() ;\n\n            JobApplication newJobApplication = new JobApplication(oldJobApplication.getStudent(),jobApplicationBean.getCoverLetter(),oldJobApplication.getJobAnnouncement()) ;\n            jobApplicationDao.saveJobApplication(newJobApplication) ;\n\n            // la job application è stata modificata\n            return true ;\n\n\n        }\n\n        // la job application è immodificabile\n        return false ;\n\n    }\n\n    public boolean deleteJobApplication(JobApplicationBean jobApplicationBean){\n        Status status = getStatusJobApplication(jobApplicationBean) ;\n\n        // se lo stato è pending approval allora la candidatura è ancora modificabile\n        if (status.equals(Status.PENDING)){\n\n            Optional<JobApplication> jobApplicationOPT = getJobApplication(jobApplicationBean) ;\n            JobApplication oldJobApplication = jobApplicationOPT.get() ;\n\n            JobApplication newJobApplication = new JobApplication(oldJobApplication.getStudent(),jobApplicationBean.getCoverLetter(),oldJobApplication.getJobAnnouncement()) ;\n            jobApplicationDao.deleteJobApplication(newJobApplication) ;\n\n            // la job application è stata eliminata\n            return true ;\n        }\n\n        // la job application è ineliminabile\n        return false ;\n\n    }\n\n    public boolean manageJobApplication(JobApplicationBean jobApplicationBean){\n\n\n        Optional<JobApplication> jobApplicationOPT = getJobApplication(jobApplicationBean) ;\n        if (jobApplicationOPT.isEmpty()){\n\n            throw new IllegalArgumentException(\"Errore: Job Application non trovata.\");\n\n        }\n\n        JobApplication jobApplication = jobApplicationOPT.get() ;\n\n        Status status = jobApplicationBean.getStatus() ;\n        if (status.equals(Status.PENDING)){\n\n            return false ;\n\n        }\n\n        jobApplication.setStatus(status);\n        jobApplicationDao.saveJobApplication(jobApplication) ;\n\n        // lo stato della job application è stato modificato\n        return true ;\n\n    }\n\n    private Student getStudentFromSession() {\n        // Student from session\n        return (Student) SessionManager.getInstance().getCurrentUser();\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/togetjob/controller/student/SendAJobApplication.java b/src/main/java/org/example/togetjob/controller/student/SendAJobApplication.java
--- a/src/main/java/org/example/togetjob/controller/student/SendAJobApplication.java	(revision 059bd2eeb650ee49a137b61fe50606584a894576)
+++ b/src/main/java/org/example/togetjob/controller/student/SendAJobApplication.java	(date 1738450856938)
@@ -27,11 +27,7 @@
         this.recruiterDao = AbstractFactoryDaoSingleton.getFactoryDao().createRecruiterDao() ;
     }
 
-
-
-
-
-
+    // DA FINIRE
     public List<JobAnnouncementSearchBean> getFilteredJobAnnouncement (JobAnnouncementSearchBean jobAnnouncementSearchBean){
 
         return List.of() ;
